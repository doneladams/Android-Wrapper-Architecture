package webservice;

/**
 * Created by samir on 8/16/2017.
 */


//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:10 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
public class WS_Enums {

    public enum SoapProtocolVersion {
        Default(0),
        Soap11(1),
        Soap12(2);

        private int code;

        SoapProtocolVersion(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SoapProtocolVersion fromString(String str) {
            if (str.equals("Default"))
                return Default;
            if (str.equals("Soap11"))
                return Soap11;
            if (str.equals("Soap12"))
                return Soap12;
            return null;
        }
    }

    public enum BooleanFilter {
        All(0),
        Yes(1),
        No(2);

        private int code;

        BooleanFilter(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static BooleanFilter fromString(String str) {
            if (str.equals("All"))
                return All;
            if (str.equals("Yes"))
                return Yes;
            if (str.equals("No"))
                return No;
            return null;
        }
    }

    public enum BarcodeType {
        NotSpecified(0),
        Upc12(1),
        Ean8(2),
        Ean13(3),
        Code39(4),
        Ean13PriceBarcode(5),
        Ean13WithoutVerification(6),
        Ean13WithoutChecksum(7),
        Ean13WithoutLeaderZero(8),
        Code93(9),
        Itf25(10),
        Ean13WeightBarcode(11),
        UPCA(12),
        Ean13DiscountPercentage(13),
        Ean128(14),
        UnknownType(15);

        private int code;

        BarcodeType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static BarcodeType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Upc12"))
                return Upc12;
            if (str.equals("Ean8"))
                return Ean8;
            if (str.equals("Ean13"))
                return Ean13;
            if (str.equals("Code39"))
                return Code39;
            if (str.equals("Ean13PriceBarcode"))
                return Ean13PriceBarcode;
            if (str.equals("Ean13WithoutVerification"))
                return Ean13WithoutVerification;
            if (str.equals("Ean13WithoutChecksum"))
                return Ean13WithoutChecksum;
            if (str.equals("Ean13WithoutLeaderZero"))
                return Ean13WithoutLeaderZero;
            if (str.equals("Code93"))
                return Code93;
            if (str.equals("Itf25"))
                return Itf25;
            if (str.equals("Ean13WeightBarcode"))
                return Ean13WeightBarcode;
            if (str.equals("UPCA"))
                return UPCA;
            if (str.equals("Ean13DiscountPercentage"))
                return Ean13DiscountPercentage;
            if (str.equals("Ean128"))
                return Ean128;
            if (str.equals("UnknownType"))
                return UnknownType;
            return null;
        }
    }

    public enum BookmarkType {
        NotSpecified(0),
        ReceivedProduct(1),
        Exchange(2),
        StockAdjustment(3),
        Inventory(4),
        ReservationRow(5);

        private int code;

        BookmarkType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static BookmarkType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ReceivedProduct"))
                return ReceivedProduct;
            if (str.equals("Exchange"))
                return Exchange;
            if (str.equals("StockAdjustment"))
                return StockAdjustment;
            if (str.equals("Inventory"))
                return Inventory;
            if (str.equals("ReservationRow"))
                return ReservationRow;
            return null;
        }
    }

    public enum AssortmentType {
        NotSpecified(0),
        OwnAssortment(1),
        CoordinationUnknown(2),
        Uncoordinated(3),
        Coordinated(4);

        private int code;

        AssortmentType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static AssortmentType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("OwnAssortment"))
                return OwnAssortment;
            if (str.equals("CoordinationUnknown"))
                return CoordinationUnknown;
            if (str.equals("Uncoordinated"))
                return Uncoordinated;
            if (str.equals("Coordinated"))
                return Coordinated;
            return null;
        }
    }

    public enum ArticleFeedPurchaseSupplierMode {
        NotSpecified(0),
        UseOriginalSupplier(1),
        UseSpecifiedSupplier(2),
        UseBothSuppliers(3);

        private int code;

        ArticleFeedPurchaseSupplierMode(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ArticleFeedPurchaseSupplierMode fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("UseOriginalSupplier"))
                return UseOriginalSupplier;
            if (str.equals("UseSpecifiedSupplier"))
                return UseSpecifiedSupplier;
            if (str.equals("UseBothSuppliers"))
                return UseBothSuppliers;
            return null;
        }
    }

    public enum ArticleFeedPreferredSupplierMode {
        NotSpecified(0),
        DoNotModifyPreferredSupplier(1),
        SetOriginalSupplier(2),
        SetSpecifiedSupplier(3);

        private int code;

        ArticleFeedPreferredSupplierMode(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ArticleFeedPreferredSupplierMode fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("DoNotModifyPreferredSupplier"))
                return DoNotModifyPreferredSupplier;
            if (str.equals("SetOriginalSupplier"))
                return SetOriginalSupplier;
            if (str.equals("SetSpecifiedSupplier"))
                return SetSpecifiedSupplier;
            return null;
        }
    }

    public enum CashInvoiceDiscount {
        NotSpecified(0),
        CashOnly(1),
        InvoiceOnly(2);

        private int code;

        CashInvoiceDiscount(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static CashInvoiceDiscount fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("CashOnly"))
                return CashOnly;
            if (str.equals("InvoiceOnly"))
                return InvoiceOnly;
            return null;
        }
    }

    public enum PrinterResponse {
        OK(0),
        PrinterNotFound(1),
        InvalidPrinterCommand(2),
        Error(3),
        Timeout(4),
        NothingToPrint(5);

        private int code;

        PrinterResponse(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PrinterResponse fromString(String str) {
            if (str.equals("OK"))
                return OK;
            if (str.equals("PrinterNotFound"))
                return PrinterNotFound;
            if (str.equals("InvalidPrinterCommand"))
                return InvalidPrinterCommand;
            if (str.equals("Error"))
                return Error;
            if (str.equals("Timeout"))
                return Timeout;
            if (str.equals("NothingToPrint"))
                return NothingToPrint;
            return null;
        }
    }

    public enum MixedMatchType {
        NotSpecified(0),
        Standard(1),
        ProductsSeries(2);

        private int code;

        MixedMatchType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static MixedMatchType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Standard"))
                return Standard;
            if (str.equals("ProductsSeries"))
                return ProductsSeries;
            return null;
        }
    }

    public enum MixedMatchDiscountType {
        NotSpecified(0),
        DiscountPrice(1),
        DiscountPercentage(2),
        SolidPrice(3);

        private int code;

        MixedMatchDiscountType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static MixedMatchDiscountType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("DiscountPrice"))
                return DiscountPrice;
            if (str.equals("DiscountPercentage"))
                return DiscountPercentage;
            if (str.equals("SolidPrice"))
                return SolidPrice;
            return null;
        }
    }

    public enum MixedMatchReceiptDetailType {
        NotSpecified(0),
        NoDetails(1),
        PrintNoPrices(2),
        PrintOriginalPrices(3),
        PrintDiscountedPrices(4);

        private int code;

        MixedMatchReceiptDetailType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static MixedMatchReceiptDetailType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("NoDetails"))
                return NoDetails;
            if (str.equals("PrintNoPrices"))
                return PrintNoPrices;
            if (str.equals("PrintOriginalPrices"))
                return PrintOriginalPrices;
            if (str.equals("PrintDiscountedPrices"))
                return PrintDiscountedPrices;
            return null;
        }
    }

    public enum MixedMatchDiscountOnArticlesType {
        NotSpecified(0),
        AllArticles(1),
        LowestPricedArticle(2),
        HighestPricedArticle(3),
        ArticlesColumn1(4),
        ArticlesColumn2(5),
        ArticlesColumn3(6),
        ArticlesColumn4(7),
        ArticlesColumn5(8),
        ArticlesColumn6(9),
        ArticlesColumn7(10),
        ArticlesColumn8(11),
        ArticlesColumn9(12),
        ArticlesColumn10(13);

        private int code;

        MixedMatchDiscountOnArticlesType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static MixedMatchDiscountOnArticlesType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("AllArticles"))
                return AllArticles;
            if (str.equals("LowestPricedArticle"))
                return LowestPricedArticle;
            if (str.equals("HighestPricedArticle"))
                return HighestPricedArticle;
            if (str.equals("ArticlesColumn1"))
                return ArticlesColumn1;
            if (str.equals("ArticlesColumn2"))
                return ArticlesColumn2;
            if (str.equals("ArticlesColumn3"))
                return ArticlesColumn3;
            if (str.equals("ArticlesColumn4"))
                return ArticlesColumn4;
            if (str.equals("ArticlesColumn5"))
                return ArticlesColumn5;
            if (str.equals("ArticlesColumn6"))
                return ArticlesColumn6;
            if (str.equals("ArticlesColumn7"))
                return ArticlesColumn7;
            if (str.equals("ArticlesColumn8"))
                return ArticlesColumn8;
            if (str.equals("ArticlesColumn9"))
                return ArticlesColumn9;
            if (str.equals("ArticlesColumn10"))
                return ArticlesColumn10;
            return null;
        }
    }

    public enum GiftCardType {
        NotSpecified(0),
        ThiemeCardServicesWeb(1),
        RetailVista(2),
        Intersolve(3),
        IntersolveWithoutSimulate(4),
        IntersolveVoucher1Step(5),
        IntersolveVoucher3Step(6);

        private int code;

        GiftCardType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static GiftCardType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ThiemeCardServicesWeb"))
                return ThiemeCardServicesWeb;
            if (str.equals("RetailVista"))
                return RetailVista;
            if (str.equals("Intersolve"))
                return Intersolve;
            if (str.equals("IntersolveWithoutSimulate"))
                return IntersolveWithoutSimulate;
            if (str.equals("IntersolveVoucher1Step"))
                return IntersolveVoucher1Step;
            if (str.equals("IntersolveVoucher3Step"))
                return IntersolveVoucher3Step;
            return null;
        }
    }

    public enum DiscountArticleRequirementRowsType {
        NotSpecified(0),
        AllRows(1),
        NumberOfRows(2),
        Columns(3);

        private int code;

        DiscountArticleRequirementRowsType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static DiscountArticleRequirementRowsType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("AllRows"))
                return AllRows;
            if (str.equals("NumberOfRows"))
                return NumberOfRows;
            if (str.equals("Columns"))
                return Columns;
            return null;
        }
    }

    public enum ProductListStatus {
        NotSpecified(0),
        New(1),
        EntryCompleted(2),
        Final(3);

        private int code;

        ProductListStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductListStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("New"))
                return New;
            if (str.equals("EntryCompleted"))
                return EntryCompleted;
            if (str.equals("Final"))
                return Final;
            return null;
        }
    }

    public enum GeneratePurchaseOrdersDestinationFilter {
        NotSpecified(0),
        InterbranchesOnly(1),
        SuppliersOnly(2);

        private int code;

        GeneratePurchaseOrdersDestinationFilter(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static GeneratePurchaseOrdersDestinationFilter fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("InterbranchesOnly"))
                return InterbranchesOnly;
            if (str.equals("SuppliersOnly"))
                return SuppliersOnly;
            return null;
        }
    }

    public enum OrderAdviceOrderMethod {
        NotSpecified(0),
        ByStockOrPeriodSale(1),
        AllProducts(2);

        private int code;

        OrderAdviceOrderMethod(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static OrderAdviceOrderMethod fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ByStockOrPeriodSale"))
                return ByStockOrPeriodSale;
            if (str.equals("AllProducts"))
                return AllProducts;
            return null;
        }
    }

    public enum OrderAdviceAction {
        NotSpecified(0),
        Centralize(1),
        Decentralize(2),
        AlterSupplier(3),
        RemoveOrderAmounts(4),
        OrderSurplusStock(5);

        private int code;

        OrderAdviceAction(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static OrderAdviceAction fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Centralize"))
                return Centralize;
            if (str.equals("Decentralize"))
                return Decentralize;
            if (str.equals("AlterSupplier"))
                return AlterSupplier;
            if (str.equals("RemoveOrderAmounts"))
                return RemoveOrderAmounts;
            if (str.equals("OrderSurplusStock"))
                return OrderSurplusStock;
            return null;
        }
    }

    public enum ReducePurchaseOrderSorting {
        NotSpecified(0),
        SalueValue(1),
        Quantity(2);

        private int code;

        ReducePurchaseOrderSorting(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReducePurchaseOrderSorting fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("SalueValue"))
                return SalueValue;
            if (str.equals("Quantity"))
                return Quantity;
            return null;
        }
    }

    public enum PurchaseOrderStatus {
        NotSpecified(0),
        New(1),
        EntryCompleted(2),
        EntryVerified(3),
        Approved(4),
        Final(5),
        Closed(6);

        private int code;

        PurchaseOrderStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseOrderStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("New"))
                return New;
            if (str.equals("EntryCompleted"))
                return EntryCompleted;
            if (str.equals("EntryVerified"))
                return EntryVerified;
            if (str.equals("Approved"))
                return Approved;
            if (str.equals("Final"))
                return Final;
            if (str.equals("Closed"))
                return Closed;
            return null;
        }
    }

    public enum DigitalOrderType {
        NotSpecified(0),
        RetailLink(1),
        Email(2);

        private int code;

        DigitalOrderType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static DigitalOrderType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("RetailLink"))
                return RetailLink;
            if (str.equals("Email"))
                return Email;
            return null;
        }
    }

    public enum PurchaseOrderRowOrderType {
        NotSpecified(0),
        OrderCode(1),
        ConsumerBarcode(2),
        PurchaseUnitBarcode(3);

        private int code;

        PurchaseOrderRowOrderType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseOrderRowOrderType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("OrderCode"))
                return OrderCode;
            if (str.equals("ConsumerBarcode"))
                return ConsumerBarcode;
            if (str.equals("PurchaseUnitBarcode"))
                return PurchaseUnitBarcode;
            return null;
        }
    }

    public enum PurchaseOrderType {
        NotSpecified(0),
        NormalOrder(1),
        CreditOrder(2),
        BlanketOrder(3),
        OrderRaisedBySupplier(4);

        private int code;

        PurchaseOrderType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseOrderType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("NormalOrder"))
                return NormalOrder;
            if (str.equals("CreditOrder"))
                return CreditOrder;
            if (str.equals("BlanketOrder"))
                return BlanketOrder;
            if (str.equals("OrderRaisedBySupplier"))
                return OrderRaisedBySupplier;
            return null;
        }
    }

    public enum PurchaseOrderConfirmationStatus {
        NotSpecified(0),
        Changed(1),
        NotAccepted(2),
        Accepted(3);

        private int code;

        PurchaseOrderConfirmationStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseOrderConfirmationStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Changed"))
                return Changed;
            if (str.equals("NotAccepted"))
                return NotAccepted;
            if (str.equals("Accepted"))
                return Accepted;
            return null;
        }
    }

    public enum PurchaseDiscountCalculationMethod {
        NotSpecified(0),
        MultiplyDiscountValues(1),
        AddDiscountValues(2);

        private int code;

        PurchaseDiscountCalculationMethod(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseDiscountCalculationMethod fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("MultiplyDiscountValues"))
                return MultiplyDiscountValues;
            if (str.equals("AddDiscountValues"))
                return AddDiscountValues;
            return null;
        }
    }

    public enum PurchaseOrderImportColumns {
        NotSpecified(0),
        Barcode(1),
        ProductNumber(2),
        OrderCode(3),
        RequestedSaleConsumerUnits(4),
        PurchaseUnitAmount(5),
        OrderMultiplier(6),
        MinimumOrderQuantity(7),
        PurchaseOrderUnitISOCode(8),
        PurchaseContentUnitISOCode(9),
        PurchasePricePerAmount(10),
        PurchasePrice(11),
        Note(12),
        CbmPerSingleUnit(13);

        private int code;

        PurchaseOrderImportColumns(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseOrderImportColumns fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Barcode"))
                return Barcode;
            if (str.equals("ProductNumber"))
                return ProductNumber;
            if (str.equals("OrderCode"))
                return OrderCode;
            if (str.equals("RequestedSaleConsumerUnits"))
                return RequestedSaleConsumerUnits;
            if (str.equals("PurchaseUnitAmount"))
                return PurchaseUnitAmount;
            if (str.equals("OrderMultiplier"))
                return OrderMultiplier;
            if (str.equals("MinimumOrderQuantity"))
                return MinimumOrderQuantity;
            if (str.equals("PurchaseOrderUnitISOCode"))
                return PurchaseOrderUnitISOCode;
            if (str.equals("PurchaseContentUnitISOCode"))
                return PurchaseContentUnitISOCode;
            if (str.equals("PurchasePricePerAmount"))
                return PurchasePricePerAmount;
            if (str.equals("PurchasePrice"))
                return PurchasePrice;
            if (str.equals("Note"))
                return Note;
            if (str.equals("CbmPerSingleUnit"))
                return CbmPerSingleUnit;
            return null;
        }
    }

    public enum PurchasePriceType {
        NotSpecified(0),
        PurchaseUnit(1),
        PurchaseContentUnit(2),
        ConsumerUnit(3);

        private int code;

        PurchasePriceType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchasePriceType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("PurchaseUnit"))
                return PurchaseUnit;
            if (str.equals("PurchaseContentUnit"))
                return PurchaseContentUnit;
            if (str.equals("ConsumerUnit"))
                return ConsumerUnit;
            return null;
        }
    }

    public enum PurchaseOrderRowConfirmationStatus {
        NotSpecified(0),
        Changes(1),
        Pending(2),
        NotAccepted(3),
        Accepted(4);

        private int code;

        PurchaseOrderRowConfirmationStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseOrderRowConfirmationStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Changes"))
                return Changes;
            if (str.equals("Pending"))
                return Pending;
            if (str.equals("NotAccepted"))
                return NotAccepted;
            if (str.equals("Accepted"))
                return Accepted;
            return null;
        }
    }

    public enum QuantityPriceBreakType {
        NotSpecified(0),
        AdditionalSalePrice(1),
        QuantityPriceBreak(2);

        private int code;

        QuantityPriceBreakType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static QuantityPriceBreakType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("AdditionalSalePrice"))
                return AdditionalSalePrice;
            if (str.equals("QuantityPriceBreak"))
                return QuantityPriceBreak;
            return null;
        }
    }

    public enum PurchaseOrderRowDeliveryAmount {
        NotSpecified(0),
        OnlyLessThanOrdered(1),
        OnlyMoreThanOrdered(2),
        LessOrMoreThanOrdered(3);

        private int code;

        PurchaseOrderRowDeliveryAmount(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PurchaseOrderRowDeliveryAmount fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("OnlyLessThanOrdered"))
                return OnlyLessThanOrdered;
            if (str.equals("OnlyMoreThanOrdered"))
                return OnlyMoreThanOrdered;
            if (str.equals("LessOrMoreThanOrdered"))
                return LessOrMoreThanOrdered;
            return null;
        }
    }

    public enum OrderMethod {
        NotSpecified(0),
        ByStock(1),
        ByPeriodSale(2),
        NoAutoOrder(3);

        private int code;

        OrderMethod(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static OrderMethod fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ByStock"))
                return ByStock;
            if (str.equals("ByPeriodSale"))
                return ByPeriodSale;
            if (str.equals("NoAutoOrder"))
                return NoAutoOrder;
            return null;
        }
    }

    public enum FieldsToReturnType {
        Full(0),
        NoJoin(1),
        ItemId(2);

        private int code;

        FieldsToReturnType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static FieldsToReturnType fromString(String str) {
            if (str.equals("Full"))
                return Full;
            if (str.equals("NoJoin"))
                return NoJoin;
            if (str.equals("ItemId"))
                return ItemId;
            return null;
        }
    }

    public enum SalePriceType {
        NotSpecified(0),
        PcePrice(1),
        TotalPrice(2);

        private int code;

        SalePriceType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SalePriceType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("PcePrice"))
                return PcePrice;
            if (str.equals("TotalPrice"))
                return TotalPrice;
            return null;
        }
    }

    public enum ProductListSelectionType {
        NotSpecified(0),
        AllRows(1),
        SelectedRows(2);

        private int code;

        ProductListSelectionType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductListSelectionType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("AllRows"))
                return AllRows;
            if (str.equals("SelectedRows"))
                return SelectedRows;
            return null;
        }
    }

    public enum ProductListPriceSelectionType {
        NotSpecified(0),
        ProductListPrices(1),
        ActualPrices(2),
        None(3);

        private int code;

        ProductListPriceSelectionType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductListPriceSelectionType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ProductListPrices"))
                return ProductListPrices;
            if (str.equals("ActualPrices"))
                return ActualPrices;
            if (str.equals("None"))
                return None;
            return null;
        }
    }

    public enum ThermalLabelAmountType {
        NotSpecified(0),
        RowAmounts(1),
        OnePiecePerLabel(2),
        CurrentStock(3);

        private int code;

        ThermalLabelAmountType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ThermalLabelAmountType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("RowAmounts"))
                return RowAmounts;
            if (str.equals("OnePiecePerLabel"))
                return OnePiecePerLabel;
            if (str.equals("CurrentStock"))
                return CurrentStock;
            return null;
        }
    }

    public enum ProductListSortOrderType {
        NotSpecified(0),
        ReferenceNumber(1),
        Productnumber(2),
        Description(3),
        OrderCode(4),
        InputOrder(5);

        private int code;

        ProductListSortOrderType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductListSortOrderType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ReferenceNumber"))
                return ReferenceNumber;
            if (str.equals("Productnumber"))
                return Productnumber;
            if (str.equals("Description"))
                return Description;
            if (str.equals("OrderCode"))
                return OrderCode;
            if (str.equals("InputOrder"))
                return InputOrder;
            return null;
        }
    }

    public enum ProductListImportColumns {
        NotSpecified(0),
        Barcode(1),
        ProductNumber(2),
        PceGrossPrice(3),
        Amount(4),
        ExternalProductCode(5),
        RowDiscountPrice(6),
        RowDiscountPercentage(7),
        PceNetPrice(8);

        private int code;

        ProductListImportColumns(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductListImportColumns fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Barcode"))
                return Barcode;
            if (str.equals("ProductNumber"))
                return ProductNumber;
            if (str.equals("PceGrossPrice"))
                return PceGrossPrice;
            if (str.equals("Amount"))
                return Amount;
            if (str.equals("ExternalProductCode"))
                return ExternalProductCode;
            if (str.equals("RowDiscountPrice"))
                return RowDiscountPrice;
            if (str.equals("RowDiscountPercentage"))
                return RowDiscountPercentage;
            if (str.equals("PceNetPrice"))
                return PceNetPrice;
            return null;
        }
    }

    public enum DeliveryType {
        NotSpecified(0),
        Delivery(1),
        Pickup(2);

        private int code;

        DeliveryType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static DeliveryType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Delivery"))
                return Delivery;
            if (str.equals("Pickup"))
                return Pickup;
            return null;
        }
    }

    public enum SuggestDirectReservationAmountType {
        NotSpecified(0),
        SaleOrderAmount(1),
        FreeStock(2);

        private int code;

        SuggestDirectReservationAmountType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SuggestDirectReservationAmountType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("SaleOrderAmount"))
                return SaleOrderAmount;
            if (str.equals("FreeStock"))
                return FreeStock;
            return null;
        }
    }

    public enum SaleOrders_ConceptOrderModus {
        NotSpecified(0),
        None(1),
        NotRequired(2),
        Required(3);

        private int code;

        SaleOrders_ConceptOrderModus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SaleOrders_ConceptOrderModus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("None"))
                return None;
            if (str.equals("NotRequired"))
                return NotRequired;
            if (str.equals("Required"))
                return Required;
            return null;
        }
    }

    public enum AddressType2 {
        NotSpecified(0),
        DefaultAddress(1),
        AlternatePostalAddress(2),
        AlternateInvoiceAddress(3),
        AlternateDeliveryAddress(4);

        private int code;

        AddressType2(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static AddressType2 fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("DefaultAddress"))
                return DefaultAddress;
            if (str.equals("AlternatePostalAddress"))
                return AlternatePostalAddress;
            if (str.equals("AlternateInvoiceAddress"))
                return AlternateInvoiceAddress;
            if (str.equals("AlternateDeliveryAddress"))
                return AlternateDeliveryAddress;
            return null;
        }
    }

    public enum AddressSource {
        NotSpecified(0),
        Customers(1),
        SaleOrders(2);

        private int code;

        AddressSource(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static AddressSource fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Customers"))
                return Customers;
            if (str.equals("SaleOrders"))
                return SaleOrders;
            return null;
        }
    }

    public enum SaleOrderStatus {
        NotSpecified(0),
        New(1),
        EntryCompleted(2),
        EntryVerified(3),
        Final(4),
        FinalAndInProcess(5),
        Closed(6);

        private int code;

        SaleOrderStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SaleOrderStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("New"))
                return New;
            if (str.equals("EntryCompleted"))
                return EntryCompleted;
            if (str.equals("EntryVerified"))
                return EntryVerified;
            if (str.equals("Final"))
                return Final;
            if (str.equals("FinalAndInProcess"))
                return FinalAndInProcess;
            if (str.equals("Closed"))
                return Closed;
            return EntryCompleted;
        }
    }

    public enum Gender {
        NotSpecified(0),
        Male(1),
        Female(2);

        private int code;

        Gender(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static Gender fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Male"))
                return Male;
            if (str.equals("Female"))
                return Female;
            return null;
        }
    }

    public enum ParcelPartnerType {
        NotSpecified(0),
        PostNL(1),
        RetailVista(2),
        DHLParcel(3);

        private int code;

        ParcelPartnerType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ParcelPartnerType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("PostNL"))
                return PostNL;
            if (str.equals("RetailVista"))
                return RetailVista;
            if (str.equals("DHLParcel"))
                return DHLParcel;
            return null;
        }
    }

    public enum DiscountType {
        NotSpecified(0),
        NoDiscount(1),
        MixedMatchDiscount(2),
        QuantityPriceBreakDiscount(3),
        ManualRowDiscount(4),
        ManualRowPriceIncrease(5),
        SubTotalDiscount(6),
        PurchasePriceRaisePercentage(7),
        DiscountAgreementClassificationDiscount(8),
        QueueBustingSale(9),
        TransactionDiscount(10);

        private int code;

        DiscountType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static DiscountType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("NoDiscount"))
                return NoDiscount;
            if (str.equals("MixedMatchDiscount"))
                return MixedMatchDiscount;
            if (str.equals("QuantityPriceBreakDiscount"))
                return QuantityPriceBreakDiscount;
            if (str.equals("ManualRowDiscount"))
                return ManualRowDiscount;
            if (str.equals("ManualRowPriceIncrease"))
                return ManualRowPriceIncrease;
            if (str.equals("SubTotalDiscount"))
                return SubTotalDiscount;
            if (str.equals("PurchasePriceRaisePercentage"))
                return PurchasePriceRaisePercentage;
            if (str.equals("DiscountAgreementClassificationDiscount"))
                return DiscountAgreementClassificationDiscount;
            if (str.equals("QueueBustingSale"))
                return QueueBustingSale;
            if (str.equals("TransactionDiscount"))
                return TransactionDiscount;
            return null;
        }
    }

    public enum ReservationStatus {
        NotSpecified(0),
        Open(1),
        Printed(2),
        ClosedByCashSale(3),
        ClosedByInvoiceSale(4),
        OrderPickingComplete(5),
        OrderPickingInProgress(6),
        OrderPickingVerified(7);

        private int code;

        ReservationStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReservationStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Open"))
                return Open;
            if (str.equals("Printed"))
                return Printed;
            if (str.equals("ClosedByCashSale"))
                return ClosedByCashSale;
            if (str.equals("ClosedByInvoiceSale"))
                return ClosedByInvoiceSale;
            if (str.equals("OrderPickingComplete"))
                return OrderPickingComplete;
            if (str.equals("OrderPickingInProgress"))
                return OrderPickingInProgress;
            if (str.equals("OrderPickingVerified"))
                return OrderPickingVerified;
            return null;
        }
    }

    public enum SaleOrderType {
        NotSpecified(0),
        NormalSaleOrder(1),
        BlanketOrder(2);

        private int code;

        SaleOrderType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SaleOrderType fromString(String str) {
            if (str == null)
                return NotSpecified;
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("NormalSaleOrder"))
                return NormalSaleOrder;
            if (str.equals("BlanketOrder"))
                return BlanketOrder;

            return null;
        }
    }

    public enum SaleOrderApprovalStatus {
        NotSpecified(0),
        Pending(1),
        Accepted(2),
        Rejected(3);

        private int code;

        SaleOrderApprovalStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SaleOrderApprovalStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Pending"))
                return Pending;
            if (str.equals("Accepted"))
                return Accepted;
            if (str.equals("Rejected"))
                return Rejected;
            return null;
        }
    }

    public enum ReceivedProductStatus {
        NotSpecified(0),
        New(1),
        Closed(2);

        private int code;

        ReceivedProductStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReceivedProductStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("New"))
                return New;
            if (str.equals("Closed"))
                return Closed;
            return null;
        }
    }

    public enum ReceivedProductsDayPart {
        NotSpecified(0),
        Morning(1),
        Afternoon(2),
        Evening(3);

        private int code;

        ReceivedProductsDayPart(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReceivedProductsDayPart fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Morning"))
                return Morning;
            if (str.equals("Afternoon"))
                return Afternoon;
            if (str.equals("Evening"))
                return Evening;
            return null;
        }
    }

    public enum ReceivedProductAmountType {
        PackingListAmount(0),
        FinalAmount(1);

        private int code;

        ReceivedProductAmountType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReceivedProductAmountType fromString(String str) {
            if (str.equals("PackingListAmount"))
                return PackingListAmount;
            if (str.equals("FinalAmount"))
                return FinalAmount;
            return null;
        }
    }

    public enum PrintThermalLabelSortOrder {
        NotSpecified(0),
        Brand(1),
        Supplier(2),
        ClasslevelOneTwoThree(3);

        private int code;

        PrintThermalLabelSortOrder(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PrintThermalLabelSortOrder fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Brand"))
                return Brand;
            if (str.equals("Supplier"))
                return Supplier;
            if (str.equals("ClasslevelOneTwoThree"))
                return ClasslevelOneTwoThree;
            return null;
        }
    }

    public enum QueueBustingSaleType {
        NotSpecified(0),
        Prescan(1),
        ArticleComposition(2);

        private int code;

        QueueBustingSaleType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static QueueBustingSaleType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Prescan"))
                return Prescan;
            if (str.equals("ArticleComposition"))
                return ArticleComposition;
            return null;
        }
    }

    public enum ProductListToDiscountAmountType {
        NotSpecified(0),
        RowAmounts(1),
        OneAmount(2);

        private int code;

        ProductListToDiscountAmountType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductListToDiscountAmountType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("RowAmounts"))
                return RowAmounts;
            if (str.equals("OneAmount"))
                return OneAmount;
            return null;
        }
    }

    public enum StockAdjustmentType {
        NotSpecified(0),
        ManualStockAdjustment(1),
        ProcessInventories(2),
        BulkUpdateToZero(3);

        private int code;

        StockAdjustmentType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static StockAdjustmentType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ManualStockAdjustment"))
                return ManualStockAdjustment;
            if (str.equals("ProcessInventories"))
                return ProcessInventories;
            if (str.equals("BulkUpdateToZero"))
                return BulkUpdateToZero;
            return null;
        }
    }

    public enum DiscountFilter {
        All(0),
        AllDiscounts(1),
        NoDiscounts(2),
        QuantityPriceBreaks(3),
        MixedMatches(4);

        private int code;

        DiscountFilter(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static DiscountFilter fromString(String str) {
            if (str.equals("All"))
                return All;
            if (str.equals("AllDiscounts"))
                return AllDiscounts;
            if (str.equals("NoDiscounts"))
                return NoDiscounts;
            if (str.equals("QuantityPriceBreaks"))
                return QuantityPriceBreaks;
            if (str.equals("MixedMatches"))
                return MixedMatches;
            return null;
        }
    }

    public enum SearchProductState {
        NotSpecified(0),
        OrganizationOnly(1),
        DerivedOnly(2),
        LocalOnly(3),
        LocalAndDerivedOnly(4);

        private int code;

        SearchProductState(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SearchProductState fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("OrganizationOnly"))
                return OrganizationOnly;
            if (str.equals("DerivedOnly"))
                return DerivedOnly;
            if (str.equals("LocalOnly"))
                return LocalOnly;
            if (str.equals("LocalAndDerivedOnly"))
                return LocalAndDerivedOnly;
            return null;
        }
    }

    public enum ComparisonType {
        NotSpecified(0),
        Unequal(1),
        Greater(2),
        GreaterEqual(3),
        Equal(4),
        LowerEqual(5),
        Lower(6);

        private int code;

        ComparisonType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ComparisonType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Unequal"))
                return Unequal;
            if (str.equals("Greater"))
                return Greater;
            if (str.equals("GreaterEqual"))
                return GreaterEqual;
            if (str.equals("Equal"))
                return Equal;
            if (str.equals("LowerEqual"))
                return LowerEqual;
            if (str.equals("Lower"))
                return Lower;
            return null;
        }
    }

    public enum RelatedProductsType {
        NoRelatedProducts(0),
        SaleOnRelatedProducts(1),
        ReplaceWithRelatedProducts(2),
        AddRelatedProducts(3),
        ArticleComposition(4);

        private int code;

        RelatedProductsType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static RelatedProductsType fromString(String str) {
            if (str.equals("NoRelatedProducts"))
                return NoRelatedProducts;
            if (str.equals("SaleOnRelatedProducts"))
                return SaleOnRelatedProducts;
            if (str.equals("ReplaceWithRelatedProducts"))
                return ReplaceWithRelatedProducts;
            if (str.equals("AddRelatedProducts"))
                return AddRelatedProducts;
            if (str.equals("ArticleComposition"))
                return ArticleComposition;
            return null;
        }
    }

    public enum InboundOutboundMessageType {
        NotSpecified(0),
        Order(1),
        ShippingNotification(2),
        Invoice(3),
        OrderResponse(4),
        OrderRaisedBySupplier(5),
        SalesReport(6),
        InventoryReport(7),
        PriceCatalog(8),
        ReturnInstruction(9),
        WebshopOrder(10),
        Unknown(11);

        private int code;

        InboundOutboundMessageType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static InboundOutboundMessageType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Order"))
                return Order;
            if (str.equals("ShippingNotification"))
                return ShippingNotification;
            if (str.equals("Invoice"))
                return Invoice;
            if (str.equals("OrderResponse"))
                return OrderResponse;
            if (str.equals("OrderRaisedBySupplier"))
                return OrderRaisedBySupplier;
            if (str.equals("SalesReport"))
                return SalesReport;
            if (str.equals("InventoryReport"))
                return InventoryReport;
            if (str.equals("PriceCatalog"))
                return PriceCatalog;
            if (str.equals("ReturnInstruction"))
                return ReturnInstruction;
            if (str.equals("WebshopOrder"))
                return WebshopOrder;
            if (str.equals("Unknown"))
                return Unknown;
            return null;
        }
    }

    public enum ReturnOfGoodsRowSource {
        NotSpecified(0),
        Manual(1),
        ShipmentVerification(2);

        private int code;

        ReturnOfGoodsRowSource(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReturnOfGoodsRowSource fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Manual"))
                return Manual;
            if (str.equals("ShipmentVerification"))
                return ShipmentVerification;
            return null;
        }
    }

    public enum ReturnOfGoodsStatus {
        NotSpecified(0),
        New(1),
        Final(2),
        PickupRequestSent(3),
        PickupRequestAcknowledged(4),
        PickupRequestDeclined(5),
        SpecificationSent(6),
        SpecificationAcknowledged(7),
        SpecificationDeclined(8),
        Closed(9);

        private int code;

        ReturnOfGoodsStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReturnOfGoodsStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("New"))
                return New;
            if (str.equals("Final"))
                return Final;
            if (str.equals("PickupRequestSent"))
                return PickupRequestSent;
            if (str.equals("PickupRequestAcknowledged"))
                return PickupRequestAcknowledged;
            if (str.equals("PickupRequestDeclined"))
                return PickupRequestDeclined;
            if (str.equals("SpecificationSent"))
                return SpecificationSent;
            if (str.equals("SpecificationAcknowledged"))
                return SpecificationAcknowledged;
            if (str.equals("SpecificationDeclined"))
                return SpecificationDeclined;
            if (str.equals("Closed"))
                return Closed;
            return null;
        }
    }

    public enum ReturnGoodsStockDestination {
        NotSpecified(0),
        ToShopStock(1),
        ToSupplierReturns(2);

        private int code;

        ReturnGoodsStockDestination(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ReturnGoodsStockDestination fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ToShopStock"))
                return ToShopStock;
            if (str.equals("ToSupplierReturns"))
                return ToSupplierReturns;
            return null;
        }
    }

    public enum GS1EdiImplementation {
        NotSpecified(0),
        DoeHetZelf(1),
        Levensmiddelen(2);

        private int code;

        GS1EdiImplementation(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static GS1EdiImplementation fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("DoeHetZelf"))
                return DoeHetZelf;
            if (str.equals("Levensmiddelen"))
                return Levensmiddelen;
            return null;
        }
    }

    public enum GS1ReturnType {
        NotSpecified(0),
        ReasonCodeN01(1),
        ReasonCodeN02(2),
        ReasonCodeN03(3),
        ReasonCodeN04(4),
        ReasonCodeN05(5),
        ReasonCodeN06(6),
        ReasonCodeN07(7),
        ReasonCodeN08(8),
        ReasonCodeN10(9),
        ReasonCodeN11(10),
        ReasonCode15E(11);

        private int code;

        GS1ReturnType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static GS1ReturnType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ReasonCodeN01"))
                return ReasonCodeN01;
            if (str.equals("ReasonCodeN02"))
                return ReasonCodeN02;
            if (str.equals("ReasonCodeN03"))
                return ReasonCodeN03;
            if (str.equals("ReasonCodeN04"))
                return ReasonCodeN04;
            if (str.equals("ReasonCodeN05"))
                return ReasonCodeN05;
            if (str.equals("ReasonCodeN06"))
                return ReasonCodeN06;
            if (str.equals("ReasonCodeN07"))
                return ReasonCodeN07;
            if (str.equals("ReasonCodeN08"))
                return ReasonCodeN08;
            if (str.equals("ReasonCodeN10"))
                return ReasonCodeN10;
            if (str.equals("ReasonCodeN11"))
                return ReasonCodeN11;
            if (str.equals("ReasonCode15E"))
                return ReasonCode15E;
            return null;
        }
    }

    public enum PromotionVoucherType {
        NotSpecified(0),
        OneTimeOnly(1),
        MultipleTimes(2);

        private int code;

        PromotionVoucherType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PromotionVoucherType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("OneTimeOnly"))
                return OneTimeOnly;
            if (str.equals("MultipleTimes"))
                return MultipleTimes;
            return null;
        }
    }

    /**********Product component*********/


    public enum OrderAmountType {
        NotSpecified(0),
        Append(1),
        Total(2);

        private int code;

        OrderAmountType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static OrderAmountType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Append"))
                return Append;
            if (str.equals("Total"))
                return Total;
            return null;
        }
    }

    public enum MarkingCodeType {
        NotSpecified(0),
        EanAndPrice(1),
        EanNoPrice(2),
        NoEanPrice(3),
        NoEanNoPrice(4);

        private int code;

        MarkingCodeType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static MarkingCodeType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("EanAndPrice"))
                return EanAndPrice;
            if (str.equals("EanNoPrice"))
                return EanNoPrice;
            if (str.equals("NoEanPrice"))
                return NoEanPrice;
            if (str.equals("NoEanNoPrice"))
                return NoEanNoPrice;
            return null;
        }
    }


    public enum ProductState {
        NotSpecified(0),
        Organization(1),
        Derived(2),
        Local(3);

        private int code;

        ProductState(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductState fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Organization"))
                return Organization;
            if (str.equals("Derived"))
                return Derived;
            if (str.equals("Local"))
                return Local;
            return null;
        }
    }

    public enum DataSource {
        NotSpecified(0),
        Unknown(1),
        Organization(2),
        Excel(3);

        private int code;

        DataSource(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static DataSource fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Unknown"))
                return Unknown;
            if (str.equals("Organization"))
                return Organization;
            if (str.equals("Excel"))
                return Excel;
            return null;
        }
    }

    public enum ProductsFieldsToReturnType {
        Full(0),
        NoJoin(1),
        ItemId(2);

        private int code;

        ProductsFieldsToReturnType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductsFieldsToReturnType fromString(String str) {
            if (str.equals("Full"))
                return Full;
            if (str.equals("NoJoin"))
                return NoJoin;
            if (str.equals("ItemId"))
                return ItemId;
            return null;
        }
    }

    public enum ScheduledPriceType {
        NotSpecified(0),
        GrossPrice(1),
        AdvicePrice(2);

        private int code;

        ScheduledPriceType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ScheduledPriceType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("GrossPrice"))
                return GrossPrice;
            if (str.equals("AdvicePrice"))
                return AdvicePrice;
            return null;
        }
    }

    public enum ImageTypeToReturn {
        Both(0),
        Image(1),
        ThumbnailImage(2),
        None(3);

        private int code;

        ImageTypeToReturn(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ImageTypeToReturn fromString(String str) {
            if (str.equals("Both"))
                return Both;
            if (str.equals("Image"))
                return Image;
            if (str.equals("ThumbnailImage"))
                return ThumbnailImage;
            if (str.equals("None"))
                return None;
            return null;
        }
    }

    public enum StockValueCalculationBase {
        ByReceivedArticles(0),
        ByMostRecentReceivedArticleRow(1),
        ByCalculatedArticlePurchasePrice(2),
        NotSpecified(3);

        private int code;

        StockValueCalculationBase(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static StockValueCalculationBase fromString(String str) {
            if (str.equals("ByReceivedArticles"))
                return ByReceivedArticles;
            if (str.equals("ByMostRecentReceivedArticleRow"))
                return ByMostRecentReceivedArticleRow;
            if (str.equals("ByCalculatedArticlePurchasePrice"))
                return ByCalculatedArticlePurchasePrice;
            if (str.equals("NotSpecified"))
                return NotSpecified;
            return null;
        }
    }

    public enum PrintQueueReasons {
        NotSpecified(0),
        PriceChange(1),
        OrderMethodChange(2),
        AddedToPlanogram(3),
        RemovedFromPlanogram(4),
        Manual(5),
        ScheduledSalePriceChange(6);

        private int code;

        PrintQueueReasons(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PrintQueueReasons fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("PriceChange"))
                return PriceChange;
            if (str.equals("OrderMethodChange"))
                return OrderMethodChange;
            if (str.equals("AddedToPlanogram"))
                return AddedToPlanogram;
            if (str.equals("RemovedFromPlanogram"))
                return RemovedFromPlanogram;
            if (str.equals("Manual"))
                return Manual;
            if (str.equals("ScheduledSalePriceChange"))
                return ScheduledSalePriceChange;
            return null;
        }
    }

    public enum StoreProductImportColumns {
        NotSpecified(0),
        Barcode(1),
        MaintainStock(2),
        ManualMinStock(3),
        ManualMaxStock(4),
        ManualMinMaxStock(5),
        LimitCalculatedMinStock(6),
        LimitCalculatedMaxStock(7),
        CalculatedMinStock(8),
        CalculatedMaxStock(9),
        Stock(10);

        private int code;

        StoreProductImportColumns(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static StoreProductImportColumns fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Barcode"))
                return Barcode;
            if (str.equals("MaintainStock"))
                return MaintainStock;
            if (str.equals("ManualMinStock"))
                return ManualMinStock;
            if (str.equals("ManualMaxStock"))
                return ManualMaxStock;
            if (str.equals("ManualMinMaxStock"))
                return ManualMinMaxStock;
            if (str.equals("LimitCalculatedMinStock"))
                return LimitCalculatedMinStock;
            if (str.equals("LimitCalculatedMaxStock"))
                return LimitCalculatedMaxStock;
            if (str.equals("CalculatedMinStock"))
                return CalculatedMinStock;
            if (str.equals("CalculatedMaxStock"))
                return CalculatedMaxStock;
            if (str.equals("Stock"))
                return Stock;
            return null;
        }
    }

    public enum ProductStatisticsRowSource {
        NotSpecified(0),
        ReceivedProducts(1),
        InvoiceSaleRows(2),
        StockAdjustments(3),
        CashSaleRows(4),
        ProcessedInventories(5),
        StockZero(6),
        Returns(7);

        private int code;

        ProductStatisticsRowSource(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ProductStatisticsRowSource fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ReceivedProducts"))
                return ReceivedProducts;
            if (str.equals("InvoiceSaleRows"))
                return InvoiceSaleRows;
            if (str.equals("StockAdjustments"))
                return StockAdjustments;
            if (str.equals("CashSaleRows"))
                return CashSaleRows;
            if (str.equals("ProcessedInventories"))
                return ProcessedInventories;
            if (str.equals("StockZero"))
                return StockZero;
            if (str.equals("Returns"))
                return Returns;
            return null;
        }
    }

    public enum TableNames {
        NotSpecified(0),
        AbuseIp(1),
        Addresses(2),
        ArticleFeeds(3),
        ArticleFeedSubscriptions(4),
        ArticleGroups(5),
        AssignedCustomerGroups(6),
        AssignedReportCategories(7),
        Assortments(8),
        BarcodeLabelExtensions(9),
        Barcodes(10),
        BarcodeScanners(11),
        BarcodeTypes(12),
        BaseCharacteristics(13),
        BaseEmailTemplates(14),
        Bookmarks(15),
        BrandPossibleLocations(16),
        Brands(17),
        BrandTranslations(18),
        CalculationFactors(19),
        CalculationRoundings(20),
        CashDeclarationJournals(21),
        CashDeclarationJournalRows(22),
        CashDeclarationSafeTransactions(23),
        CashDeclarationExpenseSpecifications(24),
        CashDeclarationDeposits(25),
        CashDeclarationWithdrawals(26),
        CashDeclarationAttributes(27),
        CashDeclarationPayments(28),
        CashDeclarationCashSales(29),
        CashDeclarationExpenses(30),
        CashDeclarations(31),
        CashFlows(32),
        CashGuards(33),
        CashPaymentDelays(34),
        CashRegisterGroups(35),
        CashSalePayments(36),
        CashSaleRows(37),
        CashSales(38),
        Characteristics(39),
        ClassificationGroups(40),
        ClassificationLevel1(41),
        ClassificationLevel2(42),
        ClassificationLevel3(43),
        ClassificationLevel4(44),
        ClassificationLevel5(45),
        ClassificationTranslations(46),
        Colors(47),
        Companies(48),
        Containers(49),
        ContainerArticles(50),
        CostCenters(51),
        Countries(52),
        InvoiceRequestRows(53),
        Currencies(54),
        CurrencyUnitCounts(55),
        CurrencyUnitCountDetails(56),
        CurrencyUnits(57),
        CustomerContacts(58),
        CustomerCounters(59),
        CustomerCountings(60),
        CustomerDisplays(61),
        CustomerGroups(62),
        CustomerMailingExportFilters(63),
        Customers(64),
        CustomerNotes(65),
        CustomerTypes(66),
        Debtors(67),
        DeletedRecords(68),
        Departments(69),
        Dimensions(70),
        DimensionTranslations(71),
        DiscountAgreementClassifications(72),
        DiscountAgreements(73),
        DiscountArticleRequirements(74),
        DiscountArticleRequirementRows(75),
        DiscountSaleValueRequirements(76),
        DiscountReasons(77),
        DisposalFees(78),
        EdiExportSubscribers(79),
        EftDevices(80),
        EftIssuerCodes(81),
        EftJournals(82),
        EftStatistics(83),
        EmailAddresses(84),
        EmailTemplates(85),
        ExchangeAuthorizations(86),
        ExchangeBarcodes(87),
        ExcelProfiles(88),
        ExchangeFilters(89),
        ExchangeFreeFieldValues(90),
        ExchangeProducts(91),
        ExchangePurchases(92),
        ExpenseTypes(93),
        ExternalProductCharacteristics(94),
        ExternalProducts(95),
        ExtraSavings(96),
        ExtraSavingRows(97),
        FifoStockValues(98),
        FinancialJournalInboundInvoiceRows(99),
        FreeBinaries(100),
        FreeData(101),
        FreeTables(102),
        FreeFieldAssignedValues(103),
        FreeFields(104),
        FreeFieldLanguages(105),
        FreeFieldListboxItems(106),
        FreeFieldListboxLocalizedItems(107),
        FullText(108),
        FullTextWords(109),
        GiftCards(110),
        GiftCardTransactions(111),
        GiftCardCredentials(112),
        GiftCardTypes(113),
        GiftCardDefinitions(114),
        Ids(115),
        InboundMessages(116),
        InboundInvoiceBookmarkMappings(117),
        InboundInvoiceRows(118),
        InboundInvoiceRowActions(119),
        InboundInvoiceSurcharges(120),
        InboundInvoiceRowSurcharges(121),
        InboundInvoiceRowVats(122),
        InboundInvoices(123),
        InboundInvoiceVatTotals(124),
        Inventories(125),
        InvoiceJournals(126),
        InvoiceJournalRows(127),
        InvoicePayments(128),
        InvoicePaymentConditions(129),
        Invoices(130),
        InvoiceSalePayments(131),
        InvoiceSaleRows(132),
        InvoiceSales(133),
        IsoCountries(134),
        IsoCurrencies(135),
        IsoDimensions(136),
        IsoPackages(137),
        KitchenNoteShortcuts(138),
        LabelClasses(139),
        LabelDefinitions(140),
        LabelDefinitionTextConstants(141),
        Languages(142),
        LastSynchronization(143),
        LocationClasses(144),
        LocationLevel1(145),
        LocationLevel2(146),
        LocationLevel3(147),
        LocationLevel4(148),
        LocationLevel5(149),
        LocationStorageTypes(150),
        LogReports(151),
        Logs(152),
        LoyaltyCards(153),
        LoyaltyCardTransactions(154),
        LoyaltyCardTypes(155),
        MixedMatches(156),
        MixedMatchProducts(157),
        MobileDevices(158),
        MobileDeviceFeatures(159),
        MobileDeviceTemplates(160),
        NoteTypes(161),
        OrderAdvices(162),
        Organizations(163),
        OutboundMessages(164),
        Packages(165),
        PackageTranslations(166),
        ParcelServices(167),
        ParkedPosTransactions(168),
        PaymentTypes(169),
        Permissions(170),
        PhoneNumbers(171),
        PhoneTypes(172),
        PriCatTranslations(173),
        PosBridges(174),
        PosBridgePrinters(175),
        PosCorrections(176),
        PosEvents(177),
        PosDailyNotices(178),
        PosFastExecute(179),
        PosMessages(180),
        PosTerminals(181),
        PosTerminalGroups(182),
        PosTransactions(183),
        PrePaymentRequests(184),
        PrePayments(185),
        PrePaymentTypes(186),
        PriceAgreements(187),
        PriceAgreementProducts(188),
        PriceChanges(189),
        PrintedProductLabels(190),
        Printers(191),
        PrintQueueRows(192),
        Processes(193),
        ProductCategories(194),
        ProductCategoryGroups(195),
        ProductCharacteristics(196),
        ProductCombinationGroups(197),
        ProductCombinationGroupWarnings(198),
        ProductCombinationGroupWarningSources(199),
        ProductCountryVats(200),
        ProductImages(201),
        Products(202),
        ProductLists(203),
        ProductListRows(204),
        ProductListTypes(205),
        ProductRequests(206),
        Projects(207),
        Promotions(208),
        PromotionProfiles(209),
        PromotionVouchers(210),
        PromotionVoucherTypes(211),
        PurchaseAssortments(212),
        PurchaseStatusRows(213),
        Purchases(214),
        PurchaseOrderClasses(215),
        PurchaseOrderRows(216),
        PurchaseOrders(217),
        QuantityPriceBreaks(218),
        QuantityPurchasePriceBreaks(219),
        QueueBustingSales(220),
        QueueBustingSaleRows(221),
        QuoteClasses(222),
        Quotes(223),
        QuoteRows(224),
        RawLicenses(225),
        ReceiptPrinters(226),
        Receipts(227),
        ReceivedProducts(228),
        ReceivedProductConditions(229),
        ReceivedProductHeaders(230),
        RecordChangeHistory(231),
        RfidDevices(232),
        Ledgers(233),
        LedgerRelations(234),
        RelatedProducts(235),
        ReportCategories(236),
        ReportDescriptions(237),
        Reports(238),
        RequiredFieldSets(239),
        RequiredTableColumns(240),
        Reservations(241),
        ReservationParcels(242),
        ReservationRows(243),
        ReturnSaleRowApprovals(244),
        ReturnOfGoods(245),
        ReturnOfGoodsReasons(246),
        ReturnOfGoodsRows(247),
        SaleOrderClasses(248),
        SaleOrderApprovalRows(249),
        SaleOrders(250),
        SaleOrderRows(251),
        ScaleDevices(252),
        SeasonProfiles(253),
        SeasonProfileRows(254),
        StackTypes(255),
        SaleClasses(256),
        SaleTypes(257),
        Salutations(258),
        ScanData(259),
        ScanDataRows(260),
        Scanners(261),
        Schedules(262),
        ScheduledSalePrices(263),
        ScheduledPurchasePrices(264),
        SecurityGroupPermissions(265),
        SecurityGroups(266),
        SecurityGroupUsers(267),
        SecurityRoles(268),
        SecurityRoleGroups(269),
        SerialNumbers(270),
        SessionConversations(271),
        SessionConversationLogs(272),
        Settings(273),
        SettingValues(274),
        ShelfDisplays(275),
        ShelfProducts(276),
        ShelfDisplaySubscriptions(277),
        ShopScanners(278),
        SignatureReaders(279),
        Sizes(280),
        SizeTypes(281),
        SourceProtections(282),
        StatisticsColumnSelections(283),
        StockAdjustments(284),
        StockMovements(285),
        StorageLists(286),
        StorageListRowSpecifications(287),
        StorageListRows(288),
        StorageTypes(289),
        StoredProcedureDebugging(290),
        StoreProductDateStocks(291),
        StoreProducts(292),
        StoreProductLocations(293),
        Stores(294),
        StoreTypeProducts(295),
        StoreTypes(296),
        StoreTypeDifferentations(297),
        SubBrands(298),
        Suppliers(299),
        SupplierConditions(300),
        SupplierConditionValues(301),
        SupplierStores(302),
        SupplierTranslations(303),
        SwipeReaders(304),
        TableColumns(305),
        Tables(306),
        Tasks(307),
        ThermalPrinterLanguages(308),
        TimeProfiles(309),
        TransportDeclarations(310),
        TransportTypes(311),
        TransportClasses(312),
        Users(313),
        UserPermissions(314),
        Vats(315),
        VatTranslations(316),
        Warranties(317),
        WarehouseCounts(318),
        WarehouseCountHeaders(319),
        WebshopClassifications(320),
        WebshopClassificationsDerived(321),
        WebshopProducts(322),
        Webshops(323);

        private int code;

        TableNames(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static TableNames fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("AbuseIp"))
                return AbuseIp;
            if (str.equals("Addresses"))
                return Addresses;
            if (str.equals("ArticleFeeds"))
                return ArticleFeeds;
            if (str.equals("ArticleFeedSubscriptions"))
                return ArticleFeedSubscriptions;
            if (str.equals("ArticleGroups"))
                return ArticleGroups;
            if (str.equals("AssignedCustomerGroups"))
                return AssignedCustomerGroups;
            if (str.equals("AssignedReportCategories"))
                return AssignedReportCategories;
            if (str.equals("Assortments"))
                return Assortments;
            if (str.equals("BarcodeLabelExtensions"))
                return BarcodeLabelExtensions;
            if (str.equals("Barcodes"))
                return Barcodes;
            if (str.equals("BarcodeScanners"))
                return BarcodeScanners;
            if (str.equals("BarcodeTypes"))
                return BarcodeTypes;
            if (str.equals("BaseCharacteristics"))
                return BaseCharacteristics;
            if (str.equals("BaseEmailTemplates"))
                return BaseEmailTemplates;
            if (str.equals("Bookmarks"))
                return Bookmarks;
            if (str.equals("BrandPossibleLocations"))
                return BrandPossibleLocations;
            if (str.equals("Brands"))
                return Brands;
            if (str.equals("BrandTranslations"))
                return BrandTranslations;
            if (str.equals("CalculationFactors"))
                return CalculationFactors;
            if (str.equals("CalculationRoundings"))
                return CalculationRoundings;
            if (str.equals("CashDeclarationJournals"))
                return CashDeclarationJournals;
            if (str.equals("CashDeclarationJournalRows"))
                return CashDeclarationJournalRows;
            if (str.equals("CashDeclarationSafeTransactions"))
                return CashDeclarationSafeTransactions;
            if (str.equals("CashDeclarationExpenseSpecifications"))
                return CashDeclarationExpenseSpecifications;
            if (str.equals("CashDeclarationDeposits"))
                return CashDeclarationDeposits;
            if (str.equals("CashDeclarationWithdrawals"))
                return CashDeclarationWithdrawals;
            if (str.equals("CashDeclarationAttributes"))
                return CashDeclarationAttributes;
            if (str.equals("CashDeclarationPayments"))
                return CashDeclarationPayments;
            if (str.equals("CashDeclarationCashSales"))
                return CashDeclarationCashSales;
            if (str.equals("CashDeclarationExpenses"))
                return CashDeclarationExpenses;
            if (str.equals("CashDeclarations"))
                return CashDeclarations;
            if (str.equals("CashFlows"))
                return CashFlows;
            if (str.equals("CashGuards"))
                return CashGuards;
            if (str.equals("CashPaymentDelays"))
                return CashPaymentDelays;
            if (str.equals("CashRegisterGroups"))
                return CashRegisterGroups;
            if (str.equals("CashSalePayments"))
                return CashSalePayments;
            if (str.equals("CashSaleRows"))
                return CashSaleRows;
            if (str.equals("CashSales"))
                return CashSales;
            if (str.equals("Characteristics"))
                return Characteristics;
            if (str.equals("ClassificationGroups"))
                return ClassificationGroups;
            if (str.equals("ClassificationLevel1"))
                return ClassificationLevel1;
            if (str.equals("ClassificationLevel2"))
                return ClassificationLevel2;
            if (str.equals("ClassificationLevel3"))
                return ClassificationLevel3;
            if (str.equals("ClassificationLevel4"))
                return ClassificationLevel4;
            if (str.equals("ClassificationLevel5"))
                return ClassificationLevel5;
            if (str.equals("ClassificationTranslations"))
                return ClassificationTranslations;
            if (str.equals("Colors"))
                return Colors;
            if (str.equals("Companies"))
                return Companies;
            if (str.equals("Containers"))
                return Containers;
            if (str.equals("ContainerArticles"))
                return ContainerArticles;
            if (str.equals("CostCenters"))
                return CostCenters;
            if (str.equals("Countries"))
                return Countries;
            if (str.equals("InvoiceRequestRows"))
                return InvoiceRequestRows;
            if (str.equals("Currencies"))
                return Currencies;
            if (str.equals("CurrencyUnitCounts"))
                return CurrencyUnitCounts;
            if (str.equals("CurrencyUnitCountDetails"))
                return CurrencyUnitCountDetails;
            if (str.equals("CurrencyUnits"))
                return CurrencyUnits;
            if (str.equals("CustomerContacts"))
                return CustomerContacts;
            if (str.equals("CustomerCounters"))
                return CustomerCounters;
            if (str.equals("CustomerCountings"))
                return CustomerCountings;
            if (str.equals("CustomerDisplays"))
                return CustomerDisplays;
            if (str.equals("CustomerGroups"))
                return CustomerGroups;
            if (str.equals("CustomerMailingExportFilters"))
                return CustomerMailingExportFilters;
            if (str.equals("Customers"))
                return Customers;
            if (str.equals("CustomerNotes"))
                return CustomerNotes;
            if (str.equals("CustomerTypes"))
                return CustomerTypes;
            if (str.equals("Debtors"))
                return Debtors;
            if (str.equals("DeletedRecords"))
                return DeletedRecords;
            if (str.equals("Departments"))
                return Departments;
            if (str.equals("Dimensions"))
                return Dimensions;
            if (str.equals("DimensionTranslations"))
                return DimensionTranslations;
            if (str.equals("DiscountAgreementClassifications"))
                return DiscountAgreementClassifications;
            if (str.equals("DiscountAgreements"))
                return DiscountAgreements;
            if (str.equals("DiscountArticleRequirements"))
                return DiscountArticleRequirements;
            if (str.equals("DiscountArticleRequirementRows"))
                return DiscountArticleRequirementRows;
            if (str.equals("DiscountSaleValueRequirements"))
                return DiscountSaleValueRequirements;
            if (str.equals("DiscountReasons"))
                return DiscountReasons;
            if (str.equals("DisposalFees"))
                return DisposalFees;
            if (str.equals("EdiExportSubscribers"))
                return EdiExportSubscribers;
            if (str.equals("EftDevices"))
                return EftDevices;
            if (str.equals("EftIssuerCodes"))
                return EftIssuerCodes;
            if (str.equals("EftJournals"))
                return EftJournals;
            if (str.equals("EftStatistics"))
                return EftStatistics;
            if (str.equals("EmailAddresses"))
                return EmailAddresses;
            if (str.equals("EmailTemplates"))
                return EmailTemplates;
            if (str.equals("ExchangeAuthorizations"))
                return ExchangeAuthorizations;
            if (str.equals("ExchangeBarcodes"))
                return ExchangeBarcodes;
            if (str.equals("ExcelProfiles"))
                return ExcelProfiles;
            if (str.equals("ExchangeFilters"))
                return ExchangeFilters;
            if (str.equals("ExchangeFreeFieldValues"))
                return ExchangeFreeFieldValues;
            if (str.equals("ExchangeProducts"))
                return ExchangeProducts;
            if (str.equals("ExchangePurchases"))
                return ExchangePurchases;
            if (str.equals("ExpenseTypes"))
                return ExpenseTypes;
            if (str.equals("ExternalProductCharacteristics"))
                return ExternalProductCharacteristics;
            if (str.equals("ExternalProducts"))
                return ExternalProducts;
            if (str.equals("ExtraSavings"))
                return ExtraSavings;
            if (str.equals("ExtraSavingRows"))
                return ExtraSavingRows;
            if (str.equals("FifoStockValues"))
                return FifoStockValues;
            if (str.equals("FinancialJournalInboundInvoiceRows"))
                return FinancialJournalInboundInvoiceRows;
            if (str.equals("FreeBinaries"))
                return FreeBinaries;
            if (str.equals("FreeData"))
                return FreeData;
            if (str.equals("FreeTables"))
                return FreeTables;
            if (str.equals("FreeFieldAssignedValues"))
                return FreeFieldAssignedValues;
            if (str.equals("FreeFields"))
                return FreeFields;
            if (str.equals("FreeFieldLanguages"))
                return FreeFieldLanguages;
            if (str.equals("FreeFieldListboxItems"))
                return FreeFieldListboxItems;
            if (str.equals("FreeFieldListboxLocalizedItems"))
                return FreeFieldListboxLocalizedItems;
            if (str.equals("FullText"))
                return FullText;
            if (str.equals("FullTextWords"))
                return FullTextWords;
            if (str.equals("GiftCards"))
                return GiftCards;
            if (str.equals("GiftCardTransactions"))
                return GiftCardTransactions;
            if (str.equals("GiftCardCredentials"))
                return GiftCardCredentials;
            if (str.equals("GiftCardTypes"))
                return GiftCardTypes;
            if (str.equals("GiftCardDefinitions"))
                return GiftCardDefinitions;
            if (str.equals("Ids"))
                return Ids;
            if (str.equals("InboundMessages"))
                return InboundMessages;
            if (str.equals("InboundInvoiceBookmarkMappings"))
                return InboundInvoiceBookmarkMappings;
            if (str.equals("InboundInvoiceRows"))
                return InboundInvoiceRows;
            if (str.equals("InboundInvoiceRowActions"))
                return InboundInvoiceRowActions;
            if (str.equals("InboundInvoiceSurcharges"))
                return InboundInvoiceSurcharges;
            if (str.equals("InboundInvoiceRowSurcharges"))
                return InboundInvoiceRowSurcharges;
            if (str.equals("InboundInvoiceRowVats"))
                return InboundInvoiceRowVats;
            if (str.equals("InboundInvoices"))
                return InboundInvoices;
            if (str.equals("InboundInvoiceVatTotals"))
                return InboundInvoiceVatTotals;
            if (str.equals("Inventories"))
                return Inventories;
            if (str.equals("InvoiceJournals"))
                return InvoiceJournals;
            if (str.equals("InvoiceJournalRows"))
                return InvoiceJournalRows;
            if (str.equals("InvoicePayments"))
                return InvoicePayments;
            if (str.equals("InvoicePaymentConditions"))
                return InvoicePaymentConditions;
            if (str.equals("Invoices"))
                return Invoices;
            if (str.equals("InvoiceSalePayments"))
                return InvoiceSalePayments;
            if (str.equals("InvoiceSaleRows"))
                return InvoiceSaleRows;
            if (str.equals("InvoiceSales"))
                return InvoiceSales;
            if (str.equals("IsoCountries"))
                return IsoCountries;
            if (str.equals("IsoCurrencies"))
                return IsoCurrencies;
            if (str.equals("IsoDimensions"))
                return IsoDimensions;
            if (str.equals("IsoPackages"))
                return IsoPackages;
            if (str.equals("KitchenNoteShortcuts"))
                return KitchenNoteShortcuts;
            if (str.equals("LabelClasses"))
                return LabelClasses;
            if (str.equals("LabelDefinitions"))
                return LabelDefinitions;
            if (str.equals("LabelDefinitionTextConstants"))
                return LabelDefinitionTextConstants;
            if (str.equals("Languages"))
                return Languages;
            if (str.equals("LastSynchronization"))
                return LastSynchronization;
            if (str.equals("LocationClasses"))
                return LocationClasses;
            if (str.equals("LocationLevel1"))
                return LocationLevel1;
            if (str.equals("LocationLevel2"))
                return LocationLevel2;
            if (str.equals("LocationLevel3"))
                return LocationLevel3;
            if (str.equals("LocationLevel4"))
                return LocationLevel4;
            if (str.equals("LocationLevel5"))
                return LocationLevel5;
            if (str.equals("LocationStorageTypes"))
                return LocationStorageTypes;
            if (str.equals("LogReports"))
                return LogReports;
            if (str.equals("Logs"))
                return Logs;
            if (str.equals("LoyaltyCards"))
                return LoyaltyCards;
            if (str.equals("LoyaltyCardTransactions"))
                return LoyaltyCardTransactions;
            if (str.equals("LoyaltyCardTypes"))
                return LoyaltyCardTypes;
            if (str.equals("MixedMatches"))
                return MixedMatches;
            if (str.equals("MixedMatchProducts"))
                return MixedMatchProducts;
            if (str.equals("MobileDevices"))
                return MobileDevices;
            if (str.equals("MobileDeviceFeatures"))
                return MobileDeviceFeatures;
            if (str.equals("MobileDeviceTemplates"))
                return MobileDeviceTemplates;
            if (str.equals("NoteTypes"))
                return NoteTypes;
            if (str.equals("OrderAdvices"))
                return OrderAdvices;
            if (str.equals("Organizations"))
                return Organizations;
            if (str.equals("OutboundMessages"))
                return OutboundMessages;
            if (str.equals("Packages"))
                return Packages;
            if (str.equals("PackageTranslations"))
                return PackageTranslations;
            if (str.equals("ParcelServices"))
                return ParcelServices;
            if (str.equals("ParkedPosTransactions"))
                return ParkedPosTransactions;
            if (str.equals("PaymentTypes"))
                return PaymentTypes;
            if (str.equals("Permissions"))
                return Permissions;
            if (str.equals("PhoneNumbers"))
                return PhoneNumbers;
            if (str.equals("PhoneTypes"))
                return PhoneTypes;
            if (str.equals("PriCatTranslations"))
                return PriCatTranslations;
            if (str.equals("PosBridges"))
                return PosBridges;
            if (str.equals("PosBridgePrinters"))
                return PosBridgePrinters;
            if (str.equals("PosCorrections"))
                return PosCorrections;
            if (str.equals("PosEvents"))
                return PosEvents;
            if (str.equals("PosDailyNotices"))
                return PosDailyNotices;
            if (str.equals("PosFastExecute"))
                return PosFastExecute;
            if (str.equals("PosMessages"))
                return PosMessages;
            if (str.equals("PosTerminals"))
                return PosTerminals;
            if (str.equals("PosTerminalGroups"))
                return PosTerminalGroups;
            if (str.equals("PosTransactions"))
                return PosTransactions;
            if (str.equals("PrePaymentRequests"))
                return PrePaymentRequests;
            if (str.equals("PrePayments"))
                return PrePayments;
            if (str.equals("PrePaymentTypes"))
                return PrePaymentTypes;
            if (str.equals("PriceAgreements"))
                return PriceAgreements;
            if (str.equals("PriceAgreementProducts"))
                return PriceAgreementProducts;
            if (str.equals("PriceChanges"))
                return PriceChanges;
            if (str.equals("PrintedProductLabels"))
                return PrintedProductLabels;
            if (str.equals("Printers"))
                return Printers;
            if (str.equals("PrintQueueRows"))
                return PrintQueueRows;
            if (str.equals("Processes"))
                return Processes;
            if (str.equals("ProductCategories"))
                return ProductCategories;
            if (str.equals("ProductCategoryGroups"))
                return ProductCategoryGroups;
            if (str.equals("ProductCharacteristics"))
                return ProductCharacteristics;
            if (str.equals("ProductCombinationGroups"))
                return ProductCombinationGroups;
            if (str.equals("ProductCombinationGroupWarnings"))
                return ProductCombinationGroupWarnings;
            if (str.equals("ProductCombinationGroupWarningSources"))
                return ProductCombinationGroupWarningSources;
            if (str.equals("ProductCountryVats"))
                return ProductCountryVats;
            if (str.equals("ProductImages"))
                return ProductImages;
            if (str.equals("Products"))
                return Products;
            if (str.equals("ProductLists"))
                return ProductLists;
            if (str.equals("ProductListRows"))
                return ProductListRows;
            if (str.equals("ProductListTypes"))
                return ProductListTypes;
            if (str.equals("ProductRequests"))
                return ProductRequests;
            if (str.equals("Projects"))
                return Projects;
            if (str.equals("Promotions"))
                return Promotions;
            if (str.equals("PromotionProfiles"))
                return PromotionProfiles;
            if (str.equals("PromotionVouchers"))
                return PromotionVouchers;
            if (str.equals("PromotionVoucherTypes"))
                return PromotionVoucherTypes;
            if (str.equals("PurchaseAssortments"))
                return PurchaseAssortments;
            if (str.equals("PurchaseStatusRows"))
                return PurchaseStatusRows;
            if (str.equals("Purchases"))
                return Purchases;
            if (str.equals("PurchaseOrderClasses"))
                return PurchaseOrderClasses;
            if (str.equals("PurchaseOrderRows"))
                return PurchaseOrderRows;
            if (str.equals("PurchaseOrders"))
                return PurchaseOrders;
            if (str.equals("QuantityPriceBreaks"))
                return QuantityPriceBreaks;
            if (str.equals("QuantityPurchasePriceBreaks"))
                return QuantityPurchasePriceBreaks;
            if (str.equals("QueueBustingSales"))
                return QueueBustingSales;
            if (str.equals("QueueBustingSaleRows"))
                return QueueBustingSaleRows;
            if (str.equals("QuoteClasses"))
                return QuoteClasses;
            if (str.equals("Quotes"))
                return Quotes;
            if (str.equals("QuoteRows"))
                return QuoteRows;
            if (str.equals("RawLicenses"))
                return RawLicenses;
            if (str.equals("ReceiptPrinters"))
                return ReceiptPrinters;
            if (str.equals("Receipts"))
                return Receipts;
            if (str.equals("ReceivedProducts"))
                return ReceivedProducts;
            if (str.equals("ReceivedProductConditions"))
                return ReceivedProductConditions;
            if (str.equals("ReceivedProductHeaders"))
                return ReceivedProductHeaders;
            if (str.equals("RecordChangeHistory"))
                return RecordChangeHistory;
            if (str.equals("RfidDevices"))
                return RfidDevices;
            if (str.equals("Ledgers"))
                return Ledgers;
            if (str.equals("LedgerRelations"))
                return LedgerRelations;
            if (str.equals("RelatedProducts"))
                return RelatedProducts;
            if (str.equals("ReportCategories"))
                return ReportCategories;
            if (str.equals("ReportDescriptions"))
                return ReportDescriptions;
            if (str.equals("Reports"))
                return Reports;
            if (str.equals("RequiredFieldSets"))
                return RequiredFieldSets;
            if (str.equals("RequiredTableColumns"))
                return RequiredTableColumns;
            if (str.equals("Reservations"))
                return Reservations;
            if (str.equals("ReservationParcels"))
                return ReservationParcels;
            if (str.equals("ReservationRows"))
                return ReservationRows;
            if (str.equals("ReturnSaleRowApprovals"))
                return ReturnSaleRowApprovals;
            if (str.equals("ReturnOfGoods"))
                return ReturnOfGoods;
            if (str.equals("ReturnOfGoodsReasons"))
                return ReturnOfGoodsReasons;
            if (str.equals("ReturnOfGoodsRows"))
                return ReturnOfGoodsRows;
            if (str.equals("SaleOrderClasses"))
                return SaleOrderClasses;
            if (str.equals("SaleOrderApprovalRows"))
                return SaleOrderApprovalRows;
            if (str.equals("SaleOrders"))
                return SaleOrders;
            if (str.equals("SaleOrderRows"))
                return SaleOrderRows;
            if (str.equals("ScaleDevices"))
                return ScaleDevices;
            if (str.equals("SeasonProfiles"))
                return SeasonProfiles;
            if (str.equals("SeasonProfileRows"))
                return SeasonProfileRows;
            if (str.equals("StackTypes"))
                return StackTypes;
            if (str.equals("SaleClasses"))
                return SaleClasses;
            if (str.equals("SaleTypes"))
                return SaleTypes;
            if (str.equals("Salutations"))
                return Salutations;
            if (str.equals("ScanData"))
                return ScanData;
            if (str.equals("ScanDataRows"))
                return ScanDataRows;
            if (str.equals("Scanners"))
                return Scanners;
            if (str.equals("Schedules"))
                return Schedules;
            if (str.equals("ScheduledSalePrices"))
                return ScheduledSalePrices;
            if (str.equals("ScheduledPurchasePrices"))
                return ScheduledPurchasePrices;
            if (str.equals("SecurityGroupPermissions"))
                return SecurityGroupPermissions;
            if (str.equals("SecurityGroups"))
                return SecurityGroups;
            if (str.equals("SecurityGroupUsers"))
                return SecurityGroupUsers;
            if (str.equals("SecurityRoles"))
                return SecurityRoles;
            if (str.equals("SecurityRoleGroups"))
                return SecurityRoleGroups;
            if (str.equals("SerialNumbers"))
                return SerialNumbers;
            if (str.equals("SessionConversations"))
                return SessionConversations;
            if (str.equals("SessionConversationLogs"))
                return SessionConversationLogs;
            if (str.equals("Settings"))
                return Settings;
            if (str.equals("SettingValues"))
                return SettingValues;
            if (str.equals("ShelfDisplays"))
                return ShelfDisplays;
            if (str.equals("ShelfProducts"))
                return ShelfProducts;
            if (str.equals("ShelfDisplaySubscriptions"))
                return ShelfDisplaySubscriptions;
            if (str.equals("ShopScanners"))
                return ShopScanners;
            if (str.equals("SignatureReaders"))
                return SignatureReaders;
            if (str.equals("Sizes"))
                return Sizes;
            if (str.equals("SizeTypes"))
                return SizeTypes;
            if (str.equals("SourceProtections"))
                return SourceProtections;
            if (str.equals("StatisticsColumnSelections"))
                return StatisticsColumnSelections;
            if (str.equals("StockAdjustments"))
                return StockAdjustments;
            if (str.equals("StockMovements"))
                return StockMovements;
            if (str.equals("StorageLists"))
                return StorageLists;
            if (str.equals("StorageListRowSpecifications"))
                return StorageListRowSpecifications;
            if (str.equals("StorageListRows"))
                return StorageListRows;
            if (str.equals("StorageTypes"))
                return StorageTypes;
            if (str.equals("StoredProcedureDebugging"))
                return StoredProcedureDebugging;
            if (str.equals("StoreProductDateStocks"))
                return StoreProductDateStocks;
            if (str.equals("StoreProducts"))
                return StoreProducts;
            if (str.equals("StoreProductLocations"))
                return StoreProductLocations;
            if (str.equals("Stores"))
                return Stores;
            if (str.equals("StoreTypeProducts"))
                return StoreTypeProducts;
            if (str.equals("StoreTypes"))
                return StoreTypes;
            if (str.equals("StoreTypeDifferentations"))
                return StoreTypeDifferentations;
            if (str.equals("SubBrands"))
                return SubBrands;
            if (str.equals("Suppliers"))
                return Suppliers;
            if (str.equals("SupplierConditions"))
                return SupplierConditions;
            if (str.equals("SupplierConditionValues"))
                return SupplierConditionValues;
            if (str.equals("SupplierStores"))
                return SupplierStores;
            if (str.equals("SupplierTranslations"))
                return SupplierTranslations;
            if (str.equals("SwipeReaders"))
                return SwipeReaders;
            if (str.equals("TableColumns"))
                return TableColumns;
            if (str.equals("Tables"))
                return Tables;
            if (str.equals("Tasks"))
                return Tasks;
            if (str.equals("ThermalPrinterLanguages"))
                return ThermalPrinterLanguages;
            if (str.equals("TimeProfiles"))
                return TimeProfiles;
            if (str.equals("TransportDeclarations"))
                return TransportDeclarations;
            if (str.equals("TransportTypes"))
                return TransportTypes;
            if (str.equals("TransportClasses"))
                return TransportClasses;
            if (str.equals("Users"))
                return Users;
            if (str.equals("UserPermissions"))
                return UserPermissions;
            if (str.equals("Vats"))
                return Vats;
            if (str.equals("VatTranslations"))
                return VatTranslations;
            if (str.equals("Warranties"))
                return Warranties;
            if (str.equals("WarehouseCounts"))
                return WarehouseCounts;
            if (str.equals("WarehouseCountHeaders"))
                return WarehouseCountHeaders;
            if (str.equals("WebshopClassifications"))
                return WebshopClassifications;
            if (str.equals("WebshopClassificationsDerived"))
                return WebshopClassificationsDerived;
            if (str.equals("WebshopProducts"))
                return WebshopProducts;
            if (str.equals("Webshops"))
                return Webshops;
            return null;
        }
    }

    public enum ChangedPriceType {
        NotSpecified(0),
        GrossSalePrice(1),
        AdviceSalePrice(2),
        PurchasePrice(3),
        GrossPurchasePrice(4),
        OwnPurchasePrice(5);

        private int code;

        ChangedPriceType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ChangedPriceType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("GrossSalePrice"))
                return GrossSalePrice;
            if (str.equals("AdviceSalePrice"))
                return AdviceSalePrice;
            if (str.equals("PurchasePrice"))
                return PurchasePrice;
            if (str.equals("GrossPurchasePrice"))
                return GrossPurchasePrice;
            if (str.equals("OwnPurchasePrice"))
                return OwnPurchasePrice;
            return null;
        }
    }

    public enum PriceChangesFieldsToReturnType {
        Full(0),
        NoJoin(1),
        ItemId(2),
        UniqueProductIds(3);

        private int code;

        PriceChangesFieldsToReturnType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PriceChangesFieldsToReturnType fromString(String str) {
            if (str.equals("Full"))
                return Full;
            if (str.equals("NoJoin"))
                return NoJoin;
            if (str.equals("ItemId"))
                return ItemId;
            if (str.equals("UniqueProductIds"))
                return UniqueProductIds;
            return null;
        }
    }

    public enum PriceProcess {
        NotSpecified(0),
        CommonDelete(1),
        CommonUpdate(2),
        Exchange(3),
        PosUpdate(4),
        CommonAdd(5),
        ClaimProcedure(6),
        ScheduledPriceUpdate(7),
        CommonScannerUpdate(8),
        CalculateSalePrices(9);

        private int code;

        PriceProcess(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PriceProcess fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("CommonDelete"))
                return CommonDelete;
            if (str.equals("CommonUpdate"))
                return CommonUpdate;
            if (str.equals("Exchange"))
                return Exchange;
            if (str.equals("PosUpdate"))
                return PosUpdate;
            if (str.equals("CommonAdd"))
                return CommonAdd;
            if (str.equals("ClaimProcedure"))
                return ClaimProcedure;
            if (str.equals("ScheduledPriceUpdate"))
                return ScheduledPriceUpdate;
            if (str.equals("CommonScannerUpdate"))
                return CommonScannerUpdate;
            if (str.equals("CalculateSalePrices"))
                return CalculateSalePrices;
            return null;
        }
    }

    public enum ImportArticles {
        NewArticlesOnly(0),
        ExistingArticlesOnly(1),
        AllArticles(2);

        private int code;

        ImportArticles(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ImportArticles fromString(String str) {
            if (str.equals("NewArticlesOnly"))
                return NewArticlesOnly;
            if (str.equals("ExistingArticlesOnly"))
                return ExistingArticlesOnly;
            if (str.equals("AllArticles"))
                return AllArticles;
            return null;
        }
    }

    public enum PriceSource {
        ListPrice(0),
        ArticlePrice(1);

        private int code;

        PriceSource(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PriceSource fromString(String str) {
            if (str.equals("ListPrice"))
                return ListPrice;
            if (str.equals("ArticlePrice"))
                return ArticlePrice;
            return null;
        }
    }

    public enum LoyaltyCardStatus {
        NotSpecified(0),
        New(1),
        Reserved(2),
        Active(3),
        Blocked(4),
        Cancelled(5);

        private int code;

        LoyaltyCardStatus(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static LoyaltyCardStatus fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("New"))
                return New;
            if (str.equals("Reserved"))
                return Reserved;
            if (str.equals("Active"))
                return Active;
            if (str.equals("Blocked"))
                return Blocked;
            if (str.equals("Cancelled"))
                return Cancelled;
            return null;
        }
    }

    public enum LoyaltyCardTypes {
        NotSpecified(0),
        Identification(1),
        Points(2),
        Price(3);

        private int code;

        LoyaltyCardTypes(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static LoyaltyCardTypes fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Identification"))
                return Identification;
            if (str.equals("Points"))
                return Points;
            if (str.equals("Price"))
                return Price;
            return null;
        }
    }

    public enum SetStockToZeroType {
        NotSpecified(0),
        ShopOnly(1),
        WarehouseOnly(2),
        ShopAndWarehouse(3);

        private int code;

        SetStockToZeroType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SetStockToZeroType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("ShopOnly"))
                return ShopOnly;
            if (str.equals("WarehouseOnly"))
                return WarehouseOnly;
            if (str.equals("ShopAndWarehouse"))
                return ShopAndWarehouse;
            return null;
        }
    }

    public enum PrinterOutputType {
        NotSpecified(0),
        Thermal(1),
        Line(2),
        General(3);

        private int code;

        PrinterOutputType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static PrinterOutputType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Thermal"))
                return Thermal;
            if (str.equals("Line"))
                return Line;
            if (str.equals("General"))
                return General;
            return null;
        }
    }

    public enum ThermalPrinterDestinationType {
        NotSpecified(0),
        LocalServices(1),
        TcpIp(2),
        Bluetooth(3);

        private int code;

        ThermalPrinterDestinationType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static ThermalPrinterDestinationType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("LocalServices"))
                return LocalServices;
            if (str.equals("TcpIp"))
                return TcpIp;
            if (str.equals("Bluetooth"))
                return Bluetooth;
            return null;
        }
    }

    public enum LabelType {
        NotSpecified(0),
        Product(1),
        Customer(2),
        SerialNumber(3),
        Reservations(4),
        Location(5);

        private int code;

        LabelType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static LabelType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Product"))
                return Product;
            if (str.equals("Customer"))
                return Customer;
            if (str.equals("SerialNumber"))
                return SerialNumber;
            if (str.equals("Reservations"))
                return Reservations;
            if (str.equals("Location"))
                return Location;
            return null;
        }
    }

    public enum MessageCode {
        NotSpecified(0),
        PermanentAccountBan(1),
        AccountNotApproved(2),
        AlreadyModifiedBySomeoneElse(3),
        BusinessRuleNoIsDeleteAllowed(4),
        CompanyLockedOut(5),
        DatabaseProviderException(6),
        GeneralException(7),
        IllegalOperation(8),
        IpRestriction(9),
        LoginFailed(10),
        LoginSuccessful(11),
        NoAddRights(12),
        NoAdministratorRights(13),
        NoDeleteRights(14),
        NoPrimaryKeyOwner(15),
        NoRetrieveRights(16),
        NoUpdateRights(17),
        PasswordExpired(18),
        PasswordFailed(19),
        PermanentIpBan(20),
        RecordNotFound(21),
        RecordsNotFound(22),
        SecurityException(23),
        TemporaryIpBan(24),
        TokenNotFound(25),
        UserNotFound(26),
        WrongAccountType(27),
        InvalidVatPercentage(28),
        XmlLoadError(29),
        XmlParseError(30),
        NoStoreRights(31),
        RecordAlreadyExists(32),
        TestAccountExpired(33),
        InvalidIpAddress(34),
        InvalidPropertyContainsSpaces(35),
        InvalidParameter1(36),
        InvalidParameter2(37),
        PasswordsIdentical(38),
        PasswordNotStrongEnough(39),
        Cancelled(40),
        RequiredPropertyNotSpecified(41),
        UniqueRequiredPropertyNotUnique(42),
        CandidateKeyNotUnique(43),
        IncorrectCharacterInPassword(44),
        InvalidExchangeRate(45),
        UpdateNotAllowedBusinessRule(46),
        InvalidId(47),
        InvalidPropertyGreaterThan(48),
        InvalidPropertyBetween(49),
        InvalidPropertyLowerThan(50),
        InvalidPropertyEmpty(51),
        InvalidPropertyEmptyBecause(52),
        InvalidPropertyCustom(53),
        InvalidPropertyContainsPath(54),
        NoParameterFilterProvided(55),
        NotAllParametersProvided(56),
        RequiredParameterNotProvided(57),
        InvalidPropertyCombinationExactlyOneShouldBeProvided(58),
        InvalidPropertyValueBecause(59),
        UpdateOfIsCustomerBoundNotAllowedBecauseOfBoundCustomers(60),
        CompanyNotFound(61),
        InvalidProperty(62),
        InvalidPropertyGreaterOrEqualThan(63),
        InvalidPropertyLowerOrEqualThan(64),
        InvalidPropertyUnequal(65),
        UpdateRecordNotAllowed(66),
        CustomerBoundToOtherDebtor(67),
        InvalidProductId(68),
        InvalidVatId(69),
        CustomerBoundToOtherSupplier(70),
        InvalidDerivedRecordId(71),
        InvalidFileName(72),
        NoOrganizationUpdateRights(73),
        InvalidValueType(74),
        TooManyRecords(75),
        SettingNotFound(76),
        NoFlagUpdateRights(77),
        IncorrectSettingValue(78),
        InvalidLabelType(79),
        InvalidProductVatIdOnlyOnePerCountry(80),
        InvalidForeignKey(81),
        InvalidPropertyCombinationAtLeastOneShouldBeProvided(82),
        IdRangeFull(83),
        IdAlreadyInUse(84),
        TableNameColumnNameComboDoesNotExist(85),
        AdministrationIncomplete(86),
        InvalidPropertyEmptyGreaterThanEqual(87),
        InvalidPropertyEmptyGreaterThan(88),
        NoRequiredParameterProvided(89),
        PosTransactionAlreadyProcessed(90),
        InvalidPropertySelfReference(91),
        IncorrectBarcode(92),
        SettingValueLevelNotPermitted(93),
        SettingValueLevelNotPermittedInsufficientRights(94),
        TemporaryAccountBan(95),
        InvalidStatisticsData(96),
        InvalidReportSortText(97),
        IllegalRelatedProductProductId(98),
        IllegalRelatedProductRelatedProductId(99),
        InvalidPropertyCharactersBetween(100),
        InvalidPropertyEmptyOrCharactersBetween(101),
        InvalidPropertyDecimalsBetween(102),
        RegistrationKeyAlreadyInUse(103),
        RegistrationKeyNotFound(104),
        eServicesException(105),
        MissingAndUnrecognizedEmailPlaceholders(106),
        MissingEmailPlaceholders(107),
        UnrecognizedEmailPlaceholders(108),
        InvalidImage(109),
        NonHeadOfficeUserCannotCallHeadOfficeFunction(110),
        LoginSuccessfulChangePassword(111),
        FunctionCallNotAllowed(112),
        CannotParseEmbeddedProductCodesForOrganizationProduct(113),
        CompanyRecordAlreadyExists(114),
        InvalidXml(115),
        InvalidXmlCannotConvertToType(116),
        InvalidXmlCannotFindRequiredElement(117),
        ReferencedThermalPrinterLanguageNotFound(118),
        PropertiesDoNotExist(119),
        InvalidPropertyShouldHaveValueBecause(120),
        GetCompaniesFunctionIncomplete(121),
        InvalidPropertyValue(122),
        ReferencedLanguageNotFound(123),
        ReferencedIsoPackageNotFound(124),
        ReferencedIsoDimensionNotFound(125),
        ReferencedIsoCountryNotFound(126),
        ReferencedIsoCurrencyNotFound(127),
        ReferencedBaseEmailTemplateNotFound(128),
        RegistrationDisabled(129),
        SettingValueRangeOverlaysHeadoffice(130),
        SettingValueRangeOverlaysCompany(131),
        CannotSuggestSettingValueRange(132),
        DerivedCompanyRecordAlreadyExists(133),
        CannotRemoveDefaultFlag(134),
        InvalidEmailAddress(135),
        AccountExpired(136),
        UpdateRecordNotAllowedBecause(137),
        ModifyInvoiceSaleRowNotAllowedBecauseInvoiceIsFinal(138),
        AddInvoiceSaleRowNotAllowedBecauseDebtorIsBlocked(139),
        InvalidCalculatedProperty(140),
        ModifyInvoiceSaleRowNotAllowedBecauseInvoiceSaleIsApproved(141),
        RequiredPropertyPairNotSpecified(142),
        RequiredPropertyPairBothSpecified(143),
        IncompletePurchaseOrderRows(144),
        InvalidPropertyNotEmptyBecause(145),
        MaximumDebtorCreditLimitReached(146),
        OrderHasNoRows(147),
        InvalidInvoiceSaleStateChange(148),
        DebtorNotBoundToSpecifiedCustomer(149),
        SaleRowVatDiffersFromSaleVat(150),
        InvalidStateTransition(151),
        InvoiceHasUnapprovedInvoiceSales(152),
        CannotBindToInvoiceBecauseInvoiceIsAlreadyFinal(153),
        InvalidRegisterBookType(154),
        InvalidPurchaseOrderRowIsNotClosed(155),
        InvalidPurchaseOrderRowPOIsNotFinal(156),
        InvalidInvoiceSaleStateChange_BoundInvoiceStatusNotNew(157),
        InvalidInvoiceSaleStateChange_InvoiceSaleApprovalRequired(158),
        InvalidInvoiceSaleStateChange_ModifyingPrintedInvoiceSalesNotAllowed(159),
        InvoiceUpdateNotAllowed_InvoiceHasBoundInvoiceSales(160),
        InvoiceSaleCannotBeBoundToInvoiceBecausePropertyIsDifferent(161),
        SettingValueInvoiceSaleApprovalRequiredNotAllowed(162),
        InvoiceHasNewInvoiceSales(163),
        InvalidDiscountPriceCannotGiveMoreDiscountThanTheProductCosts(164),
        InvalidCountryCodeForCountry(165),
        InvalidNationalPrefixForCountry(166),
        InvalidPriceBarcodeLength(167),
        ProductPropertyShouldBeEmptyBecausoNotAFashionProduct(168),
        ParentProductIsNotAFashionProduct(169),
        SizeTypeDoesNotMatchParentSizeType(170),
        SizeIsOfInvalidSizeType(171),
        SizeAndColorCombinationShouldBeUniqueWithinFashionProduct(172),
        ParentProductIsAChildProductItself(173),
        ModifyChildFashionProductNotAllowed(174),
        DateTimeOverlap(175),
        InvalidLicenseCode(176),
        WrongLicenseApplicationType(177),
        LicenseExpired(178),
        eServicesUserNotFound(179),
        NoRightsOnStore(180),
        LicenseNotFound(181),
        CompanyRecordAlreadyExistsOnExchangeProcess(182),
        InvalidLedgerType(183),
        BalanceLedgerType(184),
        InvalidPropertyValue2(185),
        SettingNotSet(186),
        InvalidPropertyLowerOrEqualThan2(187),
        CashDeclarationDeleteFailedNotLastDeclaration(188),
        ContractNumberNotUnique(189),
        ContractNumberNotAvailable(190),
        NotAllowedToReopenPOAlreadyReceivedProducts(191),
        ProductIsNotAvailableAtStore(192),
        ClaimNotPossibleProductIsAlreadyDerived(193),
        ScannerNotFound(194),
        ScannerIsCancelled(195),
        ExchangeExcelImport_InvalidAssortmentType(196),
        ExchangeExcelImport_InvalidClassificationLevelXCode(197),
        ExchangeExcelImport_InvalidProductCategoryCode(198),
        ExchangeExcelImport_InvalidBarcodeType(199),
        ExchangeExcelImport_InvalidSaleUnitDimension(200),
        ExchangeExcelImport_InvalidSaleUnitPackage(201),
        ExchangeExcelImport_InvalidSaleUnitCode(202),
        ExchangeExcelImport_InvalidDimensionCode(203),
        ExchangeExcelImport_InvalidBrandDescription(204),
        ExchangeExcelImport_InvalidBrandCode(205),
        ExchangeExcelImport_InvalidBrandExternalCode(206),
        ExchangeExcelImport_InvalidOrderUnitDimension(207),
        ExchangeExcelImport_InvalidOrderUnitPackage(208),
        ExchangeExcelImport_InvalidOrderUnitCode(209),
        ExchangeExcelImport_PurchaseRequiredSupplier(210),
        ExchangeExcelImport_PurchaseRequiredPurchaseUnit(211),
        ExchangeExcelImport_DuplicateExternalCode(212),
        ExchangeExcelImport_FilePathUnknownCheckConfiguration(213),
        InvalidPropertyNoDecimalValue(214),
        InvalidPropertyNoNumericValue(215),
        InvalidPropertyEqual(216),
        EvaluationPeriodTooLong(217),
        PurchaseOrderHasAlreadyBeenExported(218),
        InvalidPropertyContainsChar(219),
        InsufficientPosTerminalsCals(220),
        InvalideServicesUsernameChecksum(221),
        ProductGroupUpdateNotAllowedBecausePurchase(222),
        AddPurchaseNotAllowedBecauseIsProductGroup(223),
        GenerateInvoiceJournals_MissingLedgerRelations(224),
        InvalidPriceBarcodeOverlappingElements(225),
        PurchaseOrder_NoDeleteForStatus(226),
        AddRowNotAllowedBecauseStatusNotIsNew(227),
        ExchangeExcelImport_BarcodeExistsOnDifferentProduct(228),
        InboundMessageAlreadyProcessed(229),
        ServiceNotAvailable(230),
        InvalidPropertyValueBecause2(231),
        ReceiptPrinterProductListTitle(232),
        ReceiptPrinterProductListDescription(233),
        ReceiptPrinterProductListNumber(234),
        ReceiptPrinterProductListTotal(235),
        ReservationRow_DeleteNotAllowed(236),
        InvalidDebtorId(237),
        InvoiceSaleRows_NotAllowedToDeletePartOfAReservation(238),
        PhoneNumbers_AreaCodeShouldNotStartWithZero(239),
        PurchaseOrders_NoDoubleProductAllowed(240),
        SaleOrders_HasPendingPrepaymentRequest(241),
        ReservationIsAlreadyProcessed(242),
        SaleOrder_NoDeleteForStatus(243),
        Reservation_DeleteNotAllowed(244),
        NoDerivableField(245),
        ShopServerStoreNumberNotUnique(246),
        BookmarkAlreadyProcessed(247),
        AdministrationExactExportIncomplete(248),
        AdministrationFinancialExportIncomplete(249),
        ExchangeExcelImport_InvalidProductCategoryExternalCode(250),
        QuantityPriceBreakDescription_AdditionalSalePrice_Percentage(251),
        QuantityPriceBreakDescription_AdditionalSalePrice_Price(252),
        QuantityPriceBreakDescription_AdditionalSalePrice_TotalPrice(253),
        QuantityPriceBreakDescription_QPB_Percentage(254),
        QuantityPriceBreakDescription_QPB_Price(255),
        QuantityPriceBreakDescription_QPB_TotalPrice(256),
        XmlSchemaValidationFailed(257),
        InvalidSettingValueBecauseOtherSetting(258),
        PropertyCannotBeChangedDueToStateOfObject(259),
        SaleOrders_CustomerChangeNotAllowedDueToState(260),
        SaleOrders_VatFreeNotAllowedWithoutDebtor(261),
        SaleOrders_VatFreeNotAllowedWhenDebtorIsNoVatDebtor(262),
        ExchangeExcelImport_InvalidSupplierNumber(263),
        ExchangeExcelImport_InvalidExternalProductCode(264),
        MoveCashSaleAlreadyPartOfCashDeclaration(265),
        MoveCashSalePaymentTooHigh(266),
        MoveCashSaleDestinationPaymentTypeRequired(267),
        MoveCashSalePaymentAmountRequired(268),
        MoveCashSaleSaleNotFound(269),
        MoveCashSalePaymentNotFound(270),
        MoveCashSaleInvalidOriginalPaymentType(271),
        MoveCashSaleInvalidDestinationPaymentType(272),
        DeleteNotAllowedBecauseOf(273),
        UpdateAssortmentNotAllowedIsInUse(274),
        NoPermissionToUpdateField(275),
        ArticleNotFoundByArticleNumber(276),
        ArticleNotFoundByBarcode(277),
        NotAllowedToAddGroupToMixedMatch(278),
        UpdateMultiplePricingNotAllowedBecauseOfBarcodeWithPrice(279),
        InsufficientEftTerminalsCals(280),
        RequiredPropertyPairAtLeastOneNotSpecified(281),
        ReceiptPrinterQueueBustingPrescanTitle(282),
        ReceiptPrinterQueueBustingSaleNumber(283),
        NoStockLicenseFound(284),
        ReceiptPrinterSaleOrderTitle(285),
        ReceiptPrinterSaleOrderDescription(286),
        ReceiptPrinterSaleOrderNumber(287),
        ReceiptPrinterReservationsTitle(288),
        ReceiptPrinterPrePaymentRequestsTitle(289),
        InsufficientOfflineStoreCals(290),
        ReceiptPrinterQueueBustingArticleCompositionTitle(291),
        InvalidPropertyNotEqual(292),
        ExchangeExcelImport_InvalidAssortmentCode(293),
        InvalidStatus(294),
        JournalNotBalanced(295),
        InvalidPropertyNoBooleanValue(296),
        BarcodeNotAvailableAtStore(297),
        ReceivedProductConditionNotUniqueForBookmark(298),
        AddNotAllowedConditionAlreadyExists(299),
        ReceivedProductsExcelImport_InvalidLocationCode(300),
        ExchangeExcelImport_InvalidClassificationLevelXDescription(301),
        ExchangeExcelImport_InvalidColorDescription(302),
        ExchangeExcelImport_InvalidColorCode(303),
        ExchangeExcelImport_InvalidColorExternalCode(304),
        ExchangeExcelImport_InvalidColorShortDescription(305),
        DeleteReceivedProductNotAllowedPOIsClosed(306),
        DeleteSaleOrderRowNotAllowedOrderType(307),
        SaleOrder_NoReopenForStatusPO(308),
        CalculationRoundings_RangeOverlapsExistingRange(309),
        PropertyCombinationNotUnique(310),
        AddRowNotAllowedBecauseBlanketOrderType(311),
        RequiredPropertyPairOneNotSpecified(312),
        ProductTotalNetPriceGreaterThenSumOfRelatedProducts(313),
        InvalidPropertyReplacementProductLoop(314),
        InvalidPropertyValueBecauseOfReason(315),
        ExchangeExcelImport_InvalidPurchaseContentUnitDimension(316),
        ExchangeExcelImport_InvalidPurchaseContentUnitPackage(317),
        OrderAdviceAlreadyContainsProduct(318),
        OrderAdviceAlreadyProcessed(319),
        ProductIsNotAvailableAtStoreType(320),
        NoShelfManagementLicenseFound(321),
        MaximumProductListRowsToMixedMatchExceeded(322),
        CustomerCounterCancelled(323),
        InsufficientCustomerCounterCals(324),
        InsufficientArticleFeedSubscriptionCals(325),
        InvalidPropertyShouldBeEqualToRelatedRecord(326),
        SaleOrders_NegativePrePaymentBalance(327),
        CashDeclaration_RejectedPosTransactions(328),
        DeleteRecordNotAllowedBecause(329),
        AddRecordNotAllowedBecause(330),
        BulkResult_RecordsProcessed(331),
        BulkResult_RecordsSkippedBecause(332),
        LocalServicesNotAvailable(333),
        InsufficientMobileDeviceFeatureCals(334),
        MobileDeviceNotFound(335),
        MobileDeviceIsCancelled(336),
        ExternalHttpException(337),
        MissingPriCatMappingsException(338),
        Quote_NoDeleteForStatus(339),
        Quotes_VatFreeNotAllowedWithoutDebtor(340),
        Quotes_VatFreeNotAllowedWhenDebtorIsNoVatDebtor(341),
        Quotes_CustomerChangeNotAllowedDueToState(342),
        Scheduling_NoTargetMethodProvided(343),
        Scheduling_TypeNotDynamic(344),
        SaleOrders_StatusFinalNowAllowedBecauseOfOrderApproval(345),
        InvoiceSaleUpdateNotAllowed_InvoiceSaleHasBoundInvoice(346),
        Settings_SaleOrderFinalNotAllowedCombinedWithOrderApproval(347),
        ExchangeExcelImport_InvalidPurchaseStatusRowCode(348),
        ExchangeExcelImport_InvalidPurchaseStatusRowDescription(349),
        ExchangeExcelImport_InvalidVatCode(350),
        TaskPendingForContext(351),
        InvalidPropertyNoDateTimeValue(352),
        InvalidPropertyNoIntegralValue(353),
        BulkResult_RecordsSkippedBecauseProductsWithoutAmount(354),
        BulkResult_RecordsSkippedBecauseProductsWithoutPreferedSupplier(355),
        BulkResult_RecordsSkippedBecauseProductsWithoutAvailability(356),
        BulkResult_RecordsSkippedBecauseAnErroroccured(357),
        InvalidPurchaseOrderType(358),
        SyncPurchaseOrders_NotOrdered(359),
        SyncPurchaseOrders_AmountsChanged(360),
        SyncPurchaseOrders_NoSaleordersFound(361),
        PointsChangeNotAllowedOnLoyaltyCardType(362),
        PriceChangeNotAllowedOnLoyaltyCardType(363),
        PointsOrPriceChangeNotAllowedBecauseOfLoyaltyCardStatus(364),
        ReturnOfGoodsRows_UpdateNotAllowedBecauseOfReceivedProduct(365),
        Message_QuantityPriceBreakDescription_QPB_Price(366),
        Message_QuantityPriceBreakDescription_QPB_Percentage(367),
        Message_QuantityPriceBreakDescription_AdditionalSalePrice_Price(368),
        Message_QuantityPriceBreakDescription_AdditionalSalePrice_Percentage(369),
        Message_QuantityPriceBreakDescription_AdditionalSalePrice_TotalPrice(370),
        Message_QuantityPriceBreakDescription_QPB_TotalPrice(371),
        Message_QuantityPriceBreakDescription_QPB_SinglePcePrice(372),
        Message_QuantityPriceBreakDescription_QPB_SinglePcePercentage(373),
        Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePcePrice(374),
        Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePcePercentage(375),
        Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePceTotalPrice(376),
        Message_QuantityPriceBreakDescription_QPB_SinglePceTotalPrice(377),
        LoyaltyCardBalanceTranferdTo(378),
        LoyaltyCardBalanceTranferdFrom(379),
        LoyaltyCardBlockedBecauseItsTranferd(380),
        InsufficientMobileDevice_Cals(381),
        SameEdiUnknownBarcodeForShipmentAndInvoiceNotAllowed(382),
        AccountIsNotAllowToAccessMethod(383),
        CompanyDoesNotExist(384),
        NoAccess(385),
        UnknownException(386),
        BulkUpdateProductPriceProcessDescription(387),
        BulkUpdateProductPriceBlockedProcessDescription(388),
        BulkUpdateProductPreferredSupplierProcessDescription(389),
        BulkUpdateProgressUpdateProducts(390),
        BulkUpdateNoRightsGetProducts(391),
        BulkUpdateReportTitleUpdateProductPrice(392),
        BulkUpdateReportTitleUpdateProductsPriceBlocked(393),
        BulkUpdateReportTitleUpdateProductsMultiplePricing(394),
        BulkUpdateReportTitleUpdateProductsCancelledIndicator(395),
        BulkUpdateReportTitleUpdateProductsPreferredSupplier(396),
        BulkUpdateUnhandledException(397),
        BulkUpdateOperationFinished(398),
        BulkUpdateProductMultiplePriceProcessDescription(399),
        BulkUpdateProductCancelledProcessDescription(400),
        BulkUpdateOperationPending(401),
        BulkUpdateProductZeroStockProcessDescription(402),
        BulkUpdateReportTitleUpdateProductsZeroStock(403),
        BulkUpdateProgressUpdateProductsOnLocation(404),
        BulkUpdateProductsToProductListProcessDescription(405),
        BulkUpdateReportTitleProductsToProductList(406),
        BulkUpdateProductAssortmentProcessDescription(407),
        ReportTitleCalculateSalePrices(408),
        CalculateSalePricesProcessDescription(409),
        ReportTitleProcessWarehouseCounts(410),
        ReportTitleProductListAsciiFileImport(411),
        AsyncProcessCompleted(412),
        AsyncProcessException(413),
        AsyncProcessGlobalThreadException(414),
        AsyncProcessAborted(415),
        AsyncPopulateExchangeProducts_ReportTitle(416),
        AsyncPopulateExchangeProducts_ProgressDescription(417),
        AsyncPopulateExchangeBarcode_ProgressDescription(418),
        AsyncPopulateExchangeBarcode_ReportTitle(419),
        AsyncProcessExchangeProducts_ReportTitle(420),
        AsyncProcessExchangeProducts_ProgressDescription(421),
        AsyncProcessExchangeProducts_ExchangeProductNotFound(422),
        AsyncProcessExchangeProducts_DerivedOrganizationProductNotFound(423),
        AsyncBulkUpdatePurchaseSupplier_ReportTitle(424),
        AsyncBulkUpdatePurchaseSupplier_ProgressDescription(425),
        AsyncBulkUpdatePurchaseSupplier_ProcessDescription(426),
        AsyncBulkUpdatePurchasePreferredRowIndicator_ReportTitle(427),
        AsyncBulkUpdatePurchasePreferredRowIndicator_ProgressDescription(428),
        AsyncBulkUpdatePurchasePreferredRowIndicator_ProcessDescription(429),
        AsyncBulkUpdatePurchaseCancelledIndicator_ReportTitle(430),
        AsyncBulkUpdatePurchaseCancelledIndicator_ProgressDescription(431),
        AsyncBulkUpdatePurchaseCancelledIndicator_ProcessDescription(432),
        AsyncPopulateExchangePurchase_ReportTitle(433),
        AsyncPopulateExchangePurchase_ProgressDescription(434),
        AsyncProcessExchangePurchase_ReportTitle(435),
        AsyncProcessExchangePurchase_ProgressDescription(436),
        AsyncProcessExchangePurchase_ExchangePurchaseInfoNotFound(437),
        AsyncProcessExchangePurchase_DerivedOrganizationPurchaseInfoNotFound(438),
        AsyncProcess_ReCalculateStock_ProcessDescription(439),
        AsyncProcess_ReCalculateStock_ReportTitle(440),
        AsyncProcess_ReCalculateStock_RecalculatingStoreProductDateStocks(441),
        AsyncProcessInventoryRecords_ProgressDescription(442),
        AsyncProcessInventoryRecords_ReportTitle(443),
        AsyncAddExchangeProductsToProductList_ReportTitle(444),
        AsyncAddExchangeProductsToProductList_ProgressDescription(445),
        AsyncProcess_ReCalculateStock_RecalculatingStoreProducts(446),
        AsyncProcess_MoveAllStockToShop_ProcessDescription(447),
        AsyncProcess_MoveAllStockToShop_ReportTitle(448),
        Async_GeneratePurchaseOrders_ProcessDescription(449),
        Async_GeneratePurchaseOrders_ReportTitle(450),
        Async_CalculateAutoStock_ProcessDescription(451),
        Async_CalculateAutoStock_ReportTitle(452),
        Async_GenerateOrderAdvices_ProcessDescription(453),
        Async_GenerateOrderAdvices_ReportTitle(454),
        Async_ProcessOrderAdvice_ProcessDescription(455),
        Async_ProcessOrderAdvice_ReportTitle(456),
        Async_ProductListExcelImport_ProcessDescription(457),
        Async_ProductListExcelImport_ReportTitle(458),
        Async_StoreProductStockSettingsExcelImport_ReportTitle(459),
        Async_ProductListToOrderAdvice_ProcessDescription(460),
        Async_ProductListToOrderAdvice_ReportTitle(461),
        Async_UpdateShopServer_ProcessDescription(462),
        Async_UpdateShopServer_ReportTitle(463),
        Async_ProductListToWebShop_ProcessDescription(464),
        Async_ProductListToWebShop_ReportTitle(465),
        Async_ImportExcelToEchange_ProcessDescription(466),
        Async_ImportExcelToEchange_ReportTitle(467),
        AsyncExchangeImportPriCat_ReportTitle(468),
        AsyncExchangeImportPriCat_ProgressDescription(469),
        Async_ImportExcelToExchange_ProcessCancelNotHitPurcheaseRecordsDescription(470),
        Async_ClosePurchaseOrders_ProcessDescription(471),
        Async_ClosePurchaseOrders_ReportTitle(472),
        NoDeleteReferentialIntegrity(473);

        private int code;

        MessageCode(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static MessageCode fromString(String str) {
            if (str.equals("NotSpecified")) return NotSpecified;
            if (str.equals("PermanentAccountBan")) return PermanentAccountBan;
            if (str.equals("AccountNotApproved")) return AccountNotApproved;
            if (str.equals("AlreadyModifiedBySomeoneElse")) return AlreadyModifiedBySomeoneElse;
            if (str.equals("BusinessRuleNoIsDeleteAllowed")) return BusinessRuleNoIsDeleteAllowed;
            if (str.equals("CompanyLockedOut")) return CompanyLockedOut;
            if (str.equals("DatabaseProviderException")) return DatabaseProviderException;
            if (str.equals("GeneralException")) return GeneralException;
            if (str.equals("IllegalOperation")) return IllegalOperation;
            if (str.equals("IpRestriction")) return IpRestriction;
            if (str.equals("LoginFailed")) return LoginFailed;
            if (str.equals("LoginSuccessful")) return LoginSuccessful;
            if (str.equals("NoAddRights")) return NoAddRights;
            if (str.equals("NoAdministratorRights")) return NoAdministratorRights;
            if (str.equals("NoDeleteRights")) return NoDeleteRights;
            if (str.equals("NoPrimaryKeyOwner")) return NoPrimaryKeyOwner;
            if (str.equals("NoRetrieveRights")) return NoRetrieveRights;
            if (str.equals("NoUpdateRights")) return NoUpdateRights;
            if (str.equals("PasswordExpired")) return PasswordExpired;
            if (str.equals("PasswordFailed")) return PasswordFailed;
            if (str.equals("PermanentIpBan")) return PermanentIpBan;
            if (str.equals("RecordNotFound")) return RecordNotFound;
            if (str.equals("RecordsNotFound")) return RecordsNotFound;
            if (str.equals("SecurityException")) return SecurityException;
            if (str.equals("TemporaryIpBan")) return TemporaryIpBan;
            if (str.equals("TokenNotFound")) return TokenNotFound;
            if (str.equals("UserNotFound")) return UserNotFound;
            if (str.equals("WrongAccountType")) return WrongAccountType;
            if (str.equals("InvalidVatPercentage")) return InvalidVatPercentage;
            if (str.equals("XmlLoadError")) return XmlLoadError;
            if (str.equals("XmlParseError")) return XmlParseError;
            if (str.equals("NoStoreRights")) return NoStoreRights;
            if (str.equals("RecordAlreadyExists")) return RecordAlreadyExists;
            if (str.equals("TestAccountExpired")) return TestAccountExpired;
            if (str.equals("InvalidIpAddress")) return InvalidIpAddress;
            if (str.equals("InvalidPropertyContainsSpaces")) return InvalidPropertyContainsSpaces;
            if (str.equals("InvalidParameter1")) return InvalidParameter1;
            if (str.equals("InvalidParameter2")) return InvalidParameter2;
            if (str.equals("PasswordsIdentical")) return PasswordsIdentical;
            if (str.equals("PasswordNotStrongEnough")) return PasswordNotStrongEnough;
            if (str.equals("Cancelled")) return Cancelled;
            if (str.equals("RequiredPropertyNotSpecified")) return RequiredPropertyNotSpecified;
            if (str.equals("UniqueRequiredPropertyNotUnique"))
                return UniqueRequiredPropertyNotUnique;
            if (str.equals("CandidateKeyNotUnique")) return CandidateKeyNotUnique;
            if (str.equals("IncorrectCharacterInPassword")) return IncorrectCharacterInPassword;
            if (str.equals("InvalidExchangeRate")) return InvalidExchangeRate;
            if (str.equals("UpdateNotAllowedBusinessRule")) return UpdateNotAllowedBusinessRule;
            if (str.equals("InvalidId")) return InvalidId;
            if (str.equals("InvalidPropertyGreaterThan")) return InvalidPropertyGreaterThan;
            if (str.equals("InvalidPropertyBetween")) return InvalidPropertyBetween;
            if (str.equals("InvalidPropertyLowerThan")) return InvalidPropertyLowerThan;
            if (str.equals("InvalidPropertyEmpty")) return InvalidPropertyEmpty;
            if (str.equals("InvalidPropertyEmptyBecause")) return InvalidPropertyEmptyBecause;
            if (str.equals("InvalidPropertyCustom")) return InvalidPropertyCustom;
            if (str.equals("InvalidPropertyContainsPath")) return InvalidPropertyContainsPath;
            if (str.equals("NoParameterFilterProvided")) return NoParameterFilterProvided;
            if (str.equals("NotAllParametersProvided")) return NotAllParametersProvided;
            if (str.equals("RequiredParameterNotProvided")) return RequiredParameterNotProvided;
            if (str.equals("InvalidPropertyCombinationExactlyOneShouldBeProvided"))
                return InvalidPropertyCombinationExactlyOneShouldBeProvided;
            if (str.equals("InvalidPropertyValueBecause")) return InvalidPropertyValueBecause;
            if (str.equals("UpdateOfIsCustomerBoundNotAllowedBecauseOfBoundCustomers"))
                return UpdateOfIsCustomerBoundNotAllowedBecauseOfBoundCustomers;
            if (str.equals("CompanyNotFound")) return CompanyNotFound;
            if (str.equals("InvalidProperty")) return InvalidProperty;
            if (str.equals("InvalidPropertyGreaterOrEqualThan"))
                return InvalidPropertyGreaterOrEqualThan;
            if (str.equals("InvalidPropertyLowerOrEqualThan"))
                return InvalidPropertyLowerOrEqualThan;
            if (str.equals("InvalidPropertyUnequal")) return InvalidPropertyUnequal;
            if (str.equals("UpdateRecordNotAllowed")) return UpdateRecordNotAllowed;
            if (str.equals("CustomerBoundToOtherDebtor")) return CustomerBoundToOtherDebtor;
            if (str.equals("InvalidProductId")) return InvalidProductId;
            if (str.equals("InvalidVatId")) return InvalidVatId;
            if (str.equals("CustomerBoundToOtherSupplier")) return CustomerBoundToOtherSupplier;
            if (str.equals("InvalidDerivedRecordId")) return InvalidDerivedRecordId;
            if (str.equals("InvalidFileName")) return InvalidFileName;
            if (str.equals("NoOrganizationUpdateRights")) return NoOrganizationUpdateRights;
            if (str.equals("InvalidValueType")) return InvalidValueType;
            if (str.equals("TooManyRecords")) return TooManyRecords;
            if (str.equals("SettingNotFound")) return SettingNotFound;
            if (str.equals("NoFlagUpdateRights")) return NoFlagUpdateRights;
            if (str.equals("IncorrectSettingValue")) return IncorrectSettingValue;
            if (str.equals("InvalidLabelType")) return InvalidLabelType;
            if (str.equals("InvalidProductVatIdOnlyOnePerCountry"))
                return InvalidProductVatIdOnlyOnePerCountry;
            if (str.equals("InvalidForeignKey")) return InvalidForeignKey;
            if (str.equals("InvalidPropertyCombinationAtLeastOneShouldBeProvided"))
                return InvalidPropertyCombinationAtLeastOneShouldBeProvided;
            if (str.equals("IdRangeFull")) return IdRangeFull;
            if (str.equals("IdAlreadyInUse")) return IdAlreadyInUse;
            if (str.equals("TableNameColumnNameComboDoesNotExist"))
                return TableNameColumnNameComboDoesNotExist;
            if (str.equals("AdministrationIncomplete")) return AdministrationIncomplete;
            if (str.equals("InvalidPropertyEmptyGreaterThanEqual"))
                return InvalidPropertyEmptyGreaterThanEqual;
            if (str.equals("InvalidPropertyEmptyGreaterThan"))
                return InvalidPropertyEmptyGreaterThan;
            if (str.equals("NoRequiredParameterProvided")) return NoRequiredParameterProvided;
            if (str.equals("PosTransactionAlreadyProcessed")) return PosTransactionAlreadyProcessed;
            if (str.equals("InvalidPropertySelfReference")) return InvalidPropertySelfReference;
            if (str.equals("IncorrectBarcode")) return IncorrectBarcode;
            if (str.equals("SettingValueLevelNotPermitted")) return SettingValueLevelNotPermitted;
            if (str.equals("SettingValueLevelNotPermittedInsufficientRights"))
                return SettingValueLevelNotPermittedInsufficientRights;
            if (str.equals("TemporaryAccountBan")) return TemporaryAccountBan;
            if (str.equals("InvalidStatisticsData")) return InvalidStatisticsData;
            if (str.equals("InvalidReportSortText")) return InvalidReportSortText;
            if (str.equals("IllegalRelatedProductProductId")) return IllegalRelatedProductProductId;
            if (str.equals("IllegalRelatedProductRelatedProductId"))
                return IllegalRelatedProductRelatedProductId;
            if (str.equals("InvalidPropertyCharactersBetween"))
                return InvalidPropertyCharactersBetween;
            if (str.equals("InvalidPropertyEmptyOrCharactersBetween"))
                return InvalidPropertyEmptyOrCharactersBetween;
            if (str.equals("InvalidPropertyDecimalsBetween")) return InvalidPropertyDecimalsBetween;
            if (str.equals("RegistrationKeyAlreadyInUse")) return RegistrationKeyAlreadyInUse;
            if (str.equals("RegistrationKeyNotFound")) return RegistrationKeyNotFound;
            if (str.equals("eServicesException")) return eServicesException;
            if (str.equals("MissingAndUnrecognizedEmailPlaceholders"))
                return MissingAndUnrecognizedEmailPlaceholders;
            if (str.equals("MissingEmailPlaceholders")) return MissingEmailPlaceholders;
            if (str.equals("UnrecognizedEmailPlaceholders")) return UnrecognizedEmailPlaceholders;
            if (str.equals("InvalidImage")) return InvalidImage;
            if (str.equals("NonHeadOfficeUserCannotCallHeadOfficeFunction"))
                return NonHeadOfficeUserCannotCallHeadOfficeFunction;
            if (str.equals("LoginSuccessfulChangePassword")) return LoginSuccessfulChangePassword;
            if (str.equals("FunctionCallNotAllowed")) return FunctionCallNotAllowed;
            if (str.equals("CannotParseEmbeddedProductCodesForOrganizationProduct"))
                return CannotParseEmbeddedProductCodesForOrganizationProduct;
            if (str.equals("CompanyRecordAlreadyExists")) return CompanyRecordAlreadyExists;
            if (str.equals("InvalidXml")) return InvalidXml;
            if (str.equals("InvalidXmlCannotConvertToType")) return InvalidXmlCannotConvertToType;
            if (str.equals("InvalidXmlCannotFindRequiredElement"))
                return InvalidXmlCannotFindRequiredElement;
            if (str.equals("ReferencedThermalPrinterLanguageNotFound"))
                return ReferencedThermalPrinterLanguageNotFound;
            if (str.equals("PropertiesDoNotExist")) return PropertiesDoNotExist;
            if (str.equals("InvalidPropertyShouldHaveValueBecause"))
                return InvalidPropertyShouldHaveValueBecause;
            if (str.equals("GetCompaniesFunctionIncomplete")) return GetCompaniesFunctionIncomplete;
            if (str.equals("InvalidPropertyValue")) return InvalidPropertyValue;
            if (str.equals("ReferencedLanguageNotFound")) return ReferencedLanguageNotFound;
            if (str.equals("ReferencedIsoPackageNotFound")) return ReferencedIsoPackageNotFound;
            if (str.equals("ReferencedIsoDimensionNotFound")) return ReferencedIsoDimensionNotFound;
            if (str.equals("ReferencedIsoCountryNotFound")) return ReferencedIsoCountryNotFound;
            if (str.equals("ReferencedIsoCurrencyNotFound")) return ReferencedIsoCurrencyNotFound;
            if (str.equals("ReferencedBaseEmailTemplateNotFound"))
                return ReferencedBaseEmailTemplateNotFound;
            if (str.equals("RegistrationDisabled")) return RegistrationDisabled;
            if (str.equals("SettingValueRangeOverlaysHeadoffice"))
                return SettingValueRangeOverlaysHeadoffice;
            if (str.equals("SettingValueRangeOverlaysCompany"))
                return SettingValueRangeOverlaysCompany;
            if (str.equals("CannotSuggestSettingValueRange")) return CannotSuggestSettingValueRange;
            if (str.equals("DerivedCompanyRecordAlreadyExists"))
                return DerivedCompanyRecordAlreadyExists;
            if (str.equals("CannotRemoveDefaultFlag")) return CannotRemoveDefaultFlag;
            if (str.equals("InvalidEmailAddress")) return InvalidEmailAddress;
            if (str.equals("AccountExpired")) return AccountExpired;
            if (str.equals("UpdateRecordNotAllowedBecause")) return UpdateRecordNotAllowedBecause;
            if (str.equals("ModifyInvoiceSaleRowNotAllowedBecauseInvoiceIsFinal"))
                return ModifyInvoiceSaleRowNotAllowedBecauseInvoiceIsFinal;
            if (str.equals("AddInvoiceSaleRowNotAllowedBecauseDebtorIsBlocked"))
                return AddInvoiceSaleRowNotAllowedBecauseDebtorIsBlocked;
            if (str.equals("InvalidCalculatedProperty")) return InvalidCalculatedProperty;
            if (str.equals("ModifyInvoiceSaleRowNotAllowedBecauseInvoiceSaleIsApproved"))
                return ModifyInvoiceSaleRowNotAllowedBecauseInvoiceSaleIsApproved;
            if (str.equals("RequiredPropertyPairNotSpecified"))
                return RequiredPropertyPairNotSpecified;
            if (str.equals("RequiredPropertyPairBothSpecified"))
                return RequiredPropertyPairBothSpecified;
            if (str.equals("IncompletePurchaseOrderRows")) return IncompletePurchaseOrderRows;
            if (str.equals("InvalidPropertyNotEmptyBecause")) return InvalidPropertyNotEmptyBecause;
            if (str.equals("MaximumDebtorCreditLimitReached"))
                return MaximumDebtorCreditLimitReached;
            if (str.equals("OrderHasNoRows")) return OrderHasNoRows;
            if (str.equals("InvalidInvoiceSaleStateChange")) return InvalidInvoiceSaleStateChange;
            if (str.equals("DebtorNotBoundToSpecifiedCustomer"))
                return DebtorNotBoundToSpecifiedCustomer;
            if (str.equals("SaleRowVatDiffersFromSaleVat")) return SaleRowVatDiffersFromSaleVat;
            if (str.equals("InvalidStateTransition")) return InvalidStateTransition;
            if (str.equals("InvoiceHasUnapprovedInvoiceSales"))
                return InvoiceHasUnapprovedInvoiceSales;
            if (str.equals("CannotBindToInvoiceBecauseInvoiceIsAlreadyFinal"))
                return CannotBindToInvoiceBecauseInvoiceIsAlreadyFinal;
            if (str.equals("InvalidRegisterBookType")) return InvalidRegisterBookType;
            if (str.equals("InvalidPurchaseOrderRowIsNotClosed"))
                return InvalidPurchaseOrderRowIsNotClosed;
            if (str.equals("InvalidPurchaseOrderRowPOIsNotFinal"))
                return InvalidPurchaseOrderRowPOIsNotFinal;
            if (str.equals("InvalidInvoiceSaleStateChange_BoundInvoiceStatusNotNew"))
                return InvalidInvoiceSaleStateChange_BoundInvoiceStatusNotNew;
            if (str.equals("InvalidInvoiceSaleStateChange_InvoiceSaleApprovalRequired"))
                return InvalidInvoiceSaleStateChange_InvoiceSaleApprovalRequired;
            if (str.equals("InvalidInvoiceSaleStateChange_ModifyingPrintedInvoiceSalesNotAllowed"))
                return InvalidInvoiceSaleStateChange_ModifyingPrintedInvoiceSalesNotAllowed;
            if (str.equals("InvoiceUpdateNotAllowed_InvoiceHasBoundInvoiceSales"))
                return InvoiceUpdateNotAllowed_InvoiceHasBoundInvoiceSales;
            if (str.equals("InvoiceSaleCannotBeBoundToInvoiceBecausePropertyIsDifferent"))
                return InvoiceSaleCannotBeBoundToInvoiceBecausePropertyIsDifferent;
            if (str.equals("SettingValueInvoiceSaleApprovalRequiredNotAllowed"))
                return SettingValueInvoiceSaleApprovalRequiredNotAllowed;
            if (str.equals("InvoiceHasNewInvoiceSales")) return InvoiceHasNewInvoiceSales;
            if (str.equals("InvalidDiscountPriceCannotGiveMoreDiscountThanTheProductCosts"))
                return InvalidDiscountPriceCannotGiveMoreDiscountThanTheProductCosts;
            if (str.equals("InvalidCountryCodeForCountry")) return InvalidCountryCodeForCountry;
            if (str.equals("InvalidNationalPrefixForCountry"))
                return InvalidNationalPrefixForCountry;
            if (str.equals("InvalidPriceBarcodeLength")) return InvalidPriceBarcodeLength;
            if (str.equals("ProductPropertyShouldBeEmptyBecausoNotAFashionProduct"))
                return ProductPropertyShouldBeEmptyBecausoNotAFashionProduct;
            if (str.equals("ParentProductIsNotAFashionProduct"))
                return ParentProductIsNotAFashionProduct;
            if (str.equals("SizeTypeDoesNotMatchParentSizeType"))
                return SizeTypeDoesNotMatchParentSizeType;
            if (str.equals("SizeIsOfInvalidSizeType")) return SizeIsOfInvalidSizeType;
            if (str.equals("SizeAndColorCombinationShouldBeUniqueWithinFashionProduct"))
                return SizeAndColorCombinationShouldBeUniqueWithinFashionProduct;
            if (str.equals("ParentProductIsAChildProductItself"))
                return ParentProductIsAChildProductItself;
            if (str.equals("ModifyChildFashionProductNotAllowed"))
                return ModifyChildFashionProductNotAllowed;
            if (str.equals("DateTimeOverlap")) return DateTimeOverlap;
            if (str.equals("InvalidLicenseCode")) return InvalidLicenseCode;
            if (str.equals("WrongLicenseApplicationType")) return WrongLicenseApplicationType;
            if (str.equals("LicenseExpired")) return LicenseExpired;
            if (str.equals("eServicesUserNotFound")) return eServicesUserNotFound;
            if (str.equals("NoRightsOnStore")) return NoRightsOnStore;
            if (str.equals("LicenseNotFound")) return LicenseNotFound;
            if (str.equals("CompanyRecordAlreadyExistsOnExchangeProcess"))
                return CompanyRecordAlreadyExistsOnExchangeProcess;
            if (str.equals("InvalidLedgerType")) return InvalidLedgerType;
            if (str.equals("BalanceLedgerType")) return BalanceLedgerType;
            if (str.equals("InvalidPropertyValue2")) return InvalidPropertyValue2;
            if (str.equals("SettingNotSet")) return SettingNotSet;
            if (str.equals("InvalidPropertyLowerOrEqualThan2"))
                return InvalidPropertyLowerOrEqualThan2;
            if (str.equals("CashDeclarationDeleteFailedNotLastDeclaration"))
                return CashDeclarationDeleteFailedNotLastDeclaration;
            if (str.equals("ContractNumberNotUnique")) return ContractNumberNotUnique;
            if (str.equals("ContractNumberNotAvailable")) return ContractNumberNotAvailable;
            if (str.equals("NotAllowedToReopenPOAlreadyReceivedProducts"))
                return NotAllowedToReopenPOAlreadyReceivedProducts;
            if (str.equals("ProductIsNotAvailableAtStore")) return ProductIsNotAvailableAtStore;
            if (str.equals("ClaimNotPossibleProductIsAlreadyDerived"))
                return ClaimNotPossibleProductIsAlreadyDerived;
            if (str.equals("ScannerNotFound")) return ScannerNotFound;
            if (str.equals("ScannerIsCancelled")) return ScannerIsCancelled;
            if (str.equals("ExchangeExcelImport_InvalidAssortmentType"))
                return ExchangeExcelImport_InvalidAssortmentType;
            if (str.equals("ExchangeExcelImport_InvalidClassificationLevelXCode"))
                return ExchangeExcelImport_InvalidClassificationLevelXCode;
            if (str.equals("ExchangeExcelImport_InvalidProductCategoryCode"))
                return ExchangeExcelImport_InvalidProductCategoryCode;
            if (str.equals("ExchangeExcelImport_InvalidBarcodeType"))
                return ExchangeExcelImport_InvalidBarcodeType;
            if (str.equals("ExchangeExcelImport_InvalidSaleUnitDimension"))
                return ExchangeExcelImport_InvalidSaleUnitDimension;
            if (str.equals("ExchangeExcelImport_InvalidSaleUnitPackage"))
                return ExchangeExcelImport_InvalidSaleUnitPackage;
            if (str.equals("ExchangeExcelImport_InvalidSaleUnitCode"))
                return ExchangeExcelImport_InvalidSaleUnitCode;
            if (str.equals("ExchangeExcelImport_InvalidDimensionCode"))
                return ExchangeExcelImport_InvalidDimensionCode;
            if (str.equals("ExchangeExcelImport_InvalidBrandDescription"))
                return ExchangeExcelImport_InvalidBrandDescription;
            if (str.equals("ExchangeExcelImport_InvalidBrandCode"))
                return ExchangeExcelImport_InvalidBrandCode;
            if (str.equals("ExchangeExcelImport_InvalidBrandExternalCode"))
                return ExchangeExcelImport_InvalidBrandExternalCode;
            if (str.equals("ExchangeExcelImport_InvalidOrderUnitDimension"))
                return ExchangeExcelImport_InvalidOrderUnitDimension;
            if (str.equals("ExchangeExcelImport_InvalidOrderUnitPackage"))
                return ExchangeExcelImport_InvalidOrderUnitPackage;
            if (str.equals("ExchangeExcelImport_InvalidOrderUnitCode"))
                return ExchangeExcelImport_InvalidOrderUnitCode;
            if (str.equals("ExchangeExcelImport_PurchaseRequiredSupplier"))
                return ExchangeExcelImport_PurchaseRequiredSupplier;
            if (str.equals("ExchangeExcelImport_PurchaseRequiredPurchaseUnit"))
                return ExchangeExcelImport_PurchaseRequiredPurchaseUnit;
            if (str.equals("ExchangeExcelImport_DuplicateExternalCode"))
                return ExchangeExcelImport_DuplicateExternalCode;
            if (str.equals("ExchangeExcelImport_FilePathUnknownCheckConfiguration"))
                return ExchangeExcelImport_FilePathUnknownCheckConfiguration;
            if (str.equals("InvalidPropertyNoDecimalValue")) return InvalidPropertyNoDecimalValue;
            if (str.equals("InvalidPropertyNoNumericValue")) return InvalidPropertyNoNumericValue;
            if (str.equals("InvalidPropertyEqual")) return InvalidPropertyEqual;
            if (str.equals("EvaluationPeriodTooLong")) return EvaluationPeriodTooLong;
            if (str.equals("PurchaseOrderHasAlreadyBeenExported"))
                return PurchaseOrderHasAlreadyBeenExported;
            if (str.equals("InvalidPropertyContainsChar")) return InvalidPropertyContainsChar;
            if (str.equals("InsufficientPosTerminalsCals")) return InsufficientPosTerminalsCals;
            if (str.equals("InvalideServicesUsernameChecksum"))
                return InvalideServicesUsernameChecksum;
            if (str.equals("ProductGroupUpdateNotAllowedBecausePurchase"))
                return ProductGroupUpdateNotAllowedBecausePurchase;
            if (str.equals("AddPurchaseNotAllowedBecauseIsProductGroup"))
                return AddPurchaseNotAllowedBecauseIsProductGroup;
            if (str.equals("GenerateInvoiceJournals_MissingLedgerRelations"))
                return GenerateInvoiceJournals_MissingLedgerRelations;
            if (str.equals("InvalidPriceBarcodeOverlappingElements"))
                return InvalidPriceBarcodeOverlappingElements;
            if (str.equals("PurchaseOrder_NoDeleteForStatus"))
                return PurchaseOrder_NoDeleteForStatus;
            if (str.equals("AddRowNotAllowedBecauseStatusNotIsNew"))
                return AddRowNotAllowedBecauseStatusNotIsNew;
            if (str.equals("ExchangeExcelImport_BarcodeExistsOnDifferentProduct"))
                return ExchangeExcelImport_BarcodeExistsOnDifferentProduct;
            if (str.equals("InboundMessageAlreadyProcessed")) return InboundMessageAlreadyProcessed;
            if (str.equals("ServiceNotAvailable")) return ServiceNotAvailable;
            if (str.equals("InvalidPropertyValueBecause2")) return InvalidPropertyValueBecause2;
            if (str.equals("ReceiptPrinterProductListTitle")) return ReceiptPrinterProductListTitle;
            if (str.equals("ReceiptPrinterProductListDescription"))
                return ReceiptPrinterProductListDescription;
            if (str.equals("ReceiptPrinterProductListNumber"))
                return ReceiptPrinterProductListNumber;
            if (str.equals("ReceiptPrinterProductListTotal")) return ReceiptPrinterProductListTotal;
            if (str.equals("ReservationRow_DeleteNotAllowed"))
                return ReservationRow_DeleteNotAllowed;
            if (str.equals("InvalidDebtorId")) return InvalidDebtorId;
            if (str.equals("InvoiceSaleRows_NotAllowedToDeletePartOfAReservation"))
                return InvoiceSaleRows_NotAllowedToDeletePartOfAReservation;
            if (str.equals("PhoneNumbers_AreaCodeShouldNotStartWithZero"))
                return PhoneNumbers_AreaCodeShouldNotStartWithZero;
            if (str.equals("PurchaseOrders_NoDoubleProductAllowed"))
                return PurchaseOrders_NoDoubleProductAllowed;
            if (str.equals("SaleOrders_HasPendingPrepaymentRequest"))
                return SaleOrders_HasPendingPrepaymentRequest;
            if (str.equals("ReservationIsAlreadyProcessed")) return ReservationIsAlreadyProcessed;
            if (str.equals("SaleOrder_NoDeleteForStatus")) return SaleOrder_NoDeleteForStatus;
            if (str.equals("Reservation_DeleteNotAllowed")) return Reservation_DeleteNotAllowed;
            if (str.equals("NoDerivableField")) return NoDerivableField;
            if (str.equals("ShopServerStoreNumberNotUnique")) return ShopServerStoreNumberNotUnique;
            if (str.equals("BookmarkAlreadyProcessed")) return BookmarkAlreadyProcessed;
            if (str.equals("AdministrationExactExportIncomplete"))
                return AdministrationExactExportIncomplete;
            if (str.equals("AdministrationFinancialExportIncomplete"))
                return AdministrationFinancialExportIncomplete;
            if (str.equals("ExchangeExcelImport_InvalidProductCategoryExternalCode"))
                return ExchangeExcelImport_InvalidProductCategoryExternalCode;
            if (str.equals("QuantityPriceBreakDescription_AdditionalSalePrice_Percentage"))
                return QuantityPriceBreakDescription_AdditionalSalePrice_Percentage;
            if (str.equals("QuantityPriceBreakDescription_AdditionalSalePrice_Price"))
                return QuantityPriceBreakDescription_AdditionalSalePrice_Price;
            if (str.equals("QuantityPriceBreakDescription_AdditionalSalePrice_TotalPrice"))
                return QuantityPriceBreakDescription_AdditionalSalePrice_TotalPrice;
            if (str.equals("QuantityPriceBreakDescription_QPB_Percentage"))
                return QuantityPriceBreakDescription_QPB_Percentage;
            if (str.equals("QuantityPriceBreakDescription_QPB_Price"))
                return QuantityPriceBreakDescription_QPB_Price;
            if (str.equals("QuantityPriceBreakDescription_QPB_TotalPrice"))
                return QuantityPriceBreakDescription_QPB_TotalPrice;
            if (str.equals("XmlSchemaValidationFailed")) return XmlSchemaValidationFailed;
            if (str.equals("InvalidSettingValueBecauseOtherSetting"))
                return InvalidSettingValueBecauseOtherSetting;
            if (str.equals("PropertyCannotBeChangedDueToStateOfObject"))
                return PropertyCannotBeChangedDueToStateOfObject;
            if (str.equals("SaleOrders_CustomerChangeNotAllowedDueToState"))
                return SaleOrders_CustomerChangeNotAllowedDueToState;
            if (str.equals("SaleOrders_VatFreeNotAllowedWithoutDebtor"))
                return SaleOrders_VatFreeNotAllowedWithoutDebtor;
            if (str.equals("SaleOrders_VatFreeNotAllowedWhenDebtorIsNoVatDebtor"))
                return SaleOrders_VatFreeNotAllowedWhenDebtorIsNoVatDebtor;
            if (str.equals("ExchangeExcelImport_InvalidSupplierNumber"))
                return ExchangeExcelImport_InvalidSupplierNumber;
            if (str.equals("ExchangeExcelImport_InvalidExternalProductCode"))
                return ExchangeExcelImport_InvalidExternalProductCode;
            if (str.equals("MoveCashSaleAlreadyPartOfCashDeclaration"))
                return MoveCashSaleAlreadyPartOfCashDeclaration;
            if (str.equals("MoveCashSalePaymentTooHigh")) return MoveCashSalePaymentTooHigh;
            if (str.equals("MoveCashSaleDestinationPaymentTypeRequired"))
                return MoveCashSaleDestinationPaymentTypeRequired;
            if (str.equals("MoveCashSalePaymentAmountRequired"))
                return MoveCashSalePaymentAmountRequired;
            if (str.equals("MoveCashSaleSaleNotFound")) return MoveCashSaleSaleNotFound;
            if (str.equals("MoveCashSalePaymentNotFound")) return MoveCashSalePaymentNotFound;
            if (str.equals("MoveCashSaleInvalidOriginalPaymentType"))
                return MoveCashSaleInvalidOriginalPaymentType;
            if (str.equals("MoveCashSaleInvalidDestinationPaymentType"))
                return MoveCashSaleInvalidDestinationPaymentType;
            if (str.equals("DeleteNotAllowedBecauseOf")) return DeleteNotAllowedBecauseOf;
            if (str.equals("UpdateAssortmentNotAllowedIsInUse"))
                return UpdateAssortmentNotAllowedIsInUse;
            if (str.equals("NoPermissionToUpdateField")) return NoPermissionToUpdateField;
            if (str.equals("ArticleNotFoundByArticleNumber")) return ArticleNotFoundByArticleNumber;
            if (str.equals("ArticleNotFoundByBarcode")) return ArticleNotFoundByBarcode;
            if (str.equals("NotAllowedToAddGroupToMixedMatch"))
                return NotAllowedToAddGroupToMixedMatch;
            if (str.equals("UpdateMultiplePricingNotAllowedBecauseOfBarcodeWithPrice"))
                return UpdateMultiplePricingNotAllowedBecauseOfBarcodeWithPrice;
            if (str.equals("InsufficientEftTerminalsCals")) return InsufficientEftTerminalsCals;
            if (str.equals("RequiredPropertyPairAtLeastOneNotSpecified"))
                return RequiredPropertyPairAtLeastOneNotSpecified;
            if (str.equals("ReceiptPrinterQueueBustingPrescanTitle"))
                return ReceiptPrinterQueueBustingPrescanTitle;
            if (str.equals("ReceiptPrinterQueueBustingSaleNumber"))
                return ReceiptPrinterQueueBustingSaleNumber;
            if (str.equals("NoStockLicenseFound")) return NoStockLicenseFound;
            if (str.equals("ReceiptPrinterSaleOrderTitle")) return ReceiptPrinterSaleOrderTitle;
            if (str.equals("ReceiptPrinterSaleOrderDescription"))
                return ReceiptPrinterSaleOrderDescription;
            if (str.equals("ReceiptPrinterSaleOrderNumber")) return ReceiptPrinterSaleOrderNumber;
            if (str.equals("ReceiptPrinterReservationsTitle"))
                return ReceiptPrinterReservationsTitle;
            if (str.equals("ReceiptPrinterPrePaymentRequestsTitle"))
                return ReceiptPrinterPrePaymentRequestsTitle;
            if (str.equals("InsufficientOfflineStoreCals")) return InsufficientOfflineStoreCals;
            if (str.equals("ReceiptPrinterQueueBustingArticleCompositionTitle"))
                return ReceiptPrinterQueueBustingArticleCompositionTitle;
            if (str.equals("InvalidPropertyNotEqual")) return InvalidPropertyNotEqual;
            if (str.equals("ExchangeExcelImport_InvalidAssortmentCode"))
                return ExchangeExcelImport_InvalidAssortmentCode;
            if (str.equals("InvalidStatus")) return InvalidStatus;
            if (str.equals("JournalNotBalanced")) return JournalNotBalanced;
            if (str.equals("InvalidPropertyNoBooleanValue")) return InvalidPropertyNoBooleanValue;
            if (str.equals("BarcodeNotAvailableAtStore")) return BarcodeNotAvailableAtStore;
            if (str.equals("ReceivedProductConditionNotUniqueForBookmark"))
                return ReceivedProductConditionNotUniqueForBookmark;
            if (str.equals("AddNotAllowedConditionAlreadyExists"))
                return AddNotAllowedConditionAlreadyExists;
            if (str.equals("ReceivedProductsExcelImport_InvalidLocationCode"))
                return ReceivedProductsExcelImport_InvalidLocationCode;
            if (str.equals("ExchangeExcelImport_InvalidClassificationLevelXDescription"))
                return ExchangeExcelImport_InvalidClassificationLevelXDescription;
            if (str.equals("ExchangeExcelImport_InvalidColorDescription"))
                return ExchangeExcelImport_InvalidColorDescription;
            if (str.equals("ExchangeExcelImport_InvalidColorCode"))
                return ExchangeExcelImport_InvalidColorCode;
            if (str.equals("ExchangeExcelImport_InvalidColorExternalCode"))
                return ExchangeExcelImport_InvalidColorExternalCode;
            if (str.equals("ExchangeExcelImport_InvalidColorShortDescription"))
                return ExchangeExcelImport_InvalidColorShortDescription;
            if (str.equals("DeleteReceivedProductNotAllowedPOIsClosed"))
                return DeleteReceivedProductNotAllowedPOIsClosed;
            if (str.equals("DeleteSaleOrderRowNotAllowedOrderType"))
                return DeleteSaleOrderRowNotAllowedOrderType;
            if (str.equals("SaleOrder_NoReopenForStatusPO")) return SaleOrder_NoReopenForStatusPO;
            if (str.equals("CalculationRoundings_RangeOverlapsExistingRange"))
                return CalculationRoundings_RangeOverlapsExistingRange;
            if (str.equals("PropertyCombinationNotUnique")) return PropertyCombinationNotUnique;
            if (str.equals("AddRowNotAllowedBecauseBlanketOrderType"))
                return AddRowNotAllowedBecauseBlanketOrderType;
            if (str.equals("RequiredPropertyPairOneNotSpecified"))
                return RequiredPropertyPairOneNotSpecified;
            if (str.equals("ProductTotalNetPriceGreaterThenSumOfRelatedProducts"))
                return ProductTotalNetPriceGreaterThenSumOfRelatedProducts;
            if (str.equals("InvalidPropertyReplacementProductLoop"))
                return InvalidPropertyReplacementProductLoop;
            if (str.equals("InvalidPropertyValueBecauseOfReason"))
                return InvalidPropertyValueBecauseOfReason;
            if (str.equals("ExchangeExcelImport_InvalidPurchaseContentUnitDimension"))
                return ExchangeExcelImport_InvalidPurchaseContentUnitDimension;
            if (str.equals("ExchangeExcelImport_InvalidPurchaseContentUnitPackage"))
                return ExchangeExcelImport_InvalidPurchaseContentUnitPackage;
            if (str.equals("OrderAdviceAlreadyContainsProduct"))
                return OrderAdviceAlreadyContainsProduct;
            if (str.equals("OrderAdviceAlreadyProcessed")) return OrderAdviceAlreadyProcessed;
            if (str.equals("ProductIsNotAvailableAtStoreType"))
                return ProductIsNotAvailableAtStoreType;
            if (str.equals("NoShelfManagementLicenseFound")) return NoShelfManagementLicenseFound;
            if (str.equals("MaximumProductListRowsToMixedMatchExceeded"))
                return MaximumProductListRowsToMixedMatchExceeded;
            if (str.equals("CustomerCounterCancelled")) return CustomerCounterCancelled;
            if (str.equals("InsufficientCustomerCounterCals"))
                return InsufficientCustomerCounterCals;
            if (str.equals("InsufficientArticleFeedSubscriptionCals"))
                return InsufficientArticleFeedSubscriptionCals;
            if (str.equals("InvalidPropertyShouldBeEqualToRelatedRecord"))
                return InvalidPropertyShouldBeEqualToRelatedRecord;
            if (str.equals("SaleOrders_NegativePrePaymentBalance"))
                return SaleOrders_NegativePrePaymentBalance;
            if (str.equals("CashDeclaration_RejectedPosTransactions"))
                return CashDeclaration_RejectedPosTransactions;
            if (str.equals("DeleteRecordNotAllowedBecause")) return DeleteRecordNotAllowedBecause;
            if (str.equals("AddRecordNotAllowedBecause")) return AddRecordNotAllowedBecause;
            if (str.equals("BulkResult_RecordsProcessed")) return BulkResult_RecordsProcessed;
            if (str.equals("BulkResult_RecordsSkippedBecause"))
                return BulkResult_RecordsSkippedBecause;
            if (str.equals("LocalServicesNotAvailable")) return LocalServicesNotAvailable;
            if (str.equals("InsufficientMobileDeviceFeatureCals"))
                return InsufficientMobileDeviceFeatureCals;
            if (str.equals("MobileDeviceNotFound")) return MobileDeviceNotFound;
            if (str.equals("MobileDeviceIsCancelled")) return MobileDeviceIsCancelled;
            if (str.equals("ExternalHttpException")) return ExternalHttpException;
            if (str.equals("MissingPriCatMappingsException")) return MissingPriCatMappingsException;
            if (str.equals("Quote_NoDeleteForStatus")) return Quote_NoDeleteForStatus;
            if (str.equals("Quotes_VatFreeNotAllowedWithoutDebtor"))
                return Quotes_VatFreeNotAllowedWithoutDebtor;
            if (str.equals("Quotes_VatFreeNotAllowedWhenDebtorIsNoVatDebtor"))
                return Quotes_VatFreeNotAllowedWhenDebtorIsNoVatDebtor;
            if (str.equals("Quotes_CustomerChangeNotAllowedDueToState"))
                return Quotes_CustomerChangeNotAllowedDueToState;
            if (str.equals("Scheduling_NoTargetMethodProvided"))
                return Scheduling_NoTargetMethodProvided;
            if (str.equals("Scheduling_TypeNotDynamic")) return Scheduling_TypeNotDynamic;
            if (str.equals("SaleOrders_StatusFinalNowAllowedBecauseOfOrderApproval"))
                return SaleOrders_StatusFinalNowAllowedBecauseOfOrderApproval;
            if (str.equals("InvoiceSaleUpdateNotAllowed_InvoiceSaleHasBoundInvoice"))
                return InvoiceSaleUpdateNotAllowed_InvoiceSaleHasBoundInvoice;
            if (str.equals("Settings_SaleOrderFinalNotAllowedCombinedWithOrderApproval"))
                return Settings_SaleOrderFinalNotAllowedCombinedWithOrderApproval;
            if (str.equals("ExchangeExcelImport_InvalidPurchaseStatusRowCode"))
                return ExchangeExcelImport_InvalidPurchaseStatusRowCode;
            if (str.equals("ExchangeExcelImport_InvalidPurchaseStatusRowDescription"))
                return ExchangeExcelImport_InvalidPurchaseStatusRowDescription;
            if (str.equals("ExchangeExcelImport_InvalidVatCode"))
                return ExchangeExcelImport_InvalidVatCode;
            if (str.equals("TaskPendingForContext")) return TaskPendingForContext;
            if (str.equals("InvalidPropertyNoDateTimeValue")) return InvalidPropertyNoDateTimeValue;
            if (str.equals("InvalidPropertyNoIntegralValue")) return InvalidPropertyNoIntegralValue;
            if (str.equals("BulkResult_RecordsSkippedBecauseProductsWithoutAmount"))
                return BulkResult_RecordsSkippedBecauseProductsWithoutAmount;
            if (str.equals("BulkResult_RecordsSkippedBecauseProductsWithoutPreferedSupplier"))
                return BulkResult_RecordsSkippedBecauseProductsWithoutPreferedSupplier;
            if (str.equals("BulkResult_RecordsSkippedBecauseProductsWithoutAvailability"))
                return BulkResult_RecordsSkippedBecauseProductsWithoutAvailability;
            if (str.equals("BulkResult_RecordsSkippedBecauseAnErroroccured"))
                return BulkResult_RecordsSkippedBecauseAnErroroccured;
            if (str.equals("InvalidPurchaseOrderType")) return InvalidPurchaseOrderType;
            if (str.equals("SyncPurchaseOrders_NotOrdered")) return SyncPurchaseOrders_NotOrdered;
            if (str.equals("SyncPurchaseOrders_AmountsChanged"))
                return SyncPurchaseOrders_AmountsChanged;
            if (str.equals("SyncPurchaseOrders_NoSaleordersFound"))
                return SyncPurchaseOrders_NoSaleordersFound;
            if (str.equals("PointsChangeNotAllowedOnLoyaltyCardType"))
                return PointsChangeNotAllowedOnLoyaltyCardType;
            if (str.equals("PriceChangeNotAllowedOnLoyaltyCardType"))
                return PriceChangeNotAllowedOnLoyaltyCardType;
            if (str.equals("PointsOrPriceChangeNotAllowedBecauseOfLoyaltyCardStatus"))
                return PointsOrPriceChangeNotAllowedBecauseOfLoyaltyCardStatus;
            if (str.equals("ReturnOfGoodsRows_UpdateNotAllowedBecauseOfReceivedProduct"))
                return ReturnOfGoodsRows_UpdateNotAllowedBecauseOfReceivedProduct;
            if (str.equals("Message_QuantityPriceBreakDescription_QPB_Price"))
                return Message_QuantityPriceBreakDescription_QPB_Price;
            if (str.equals("Message_QuantityPriceBreakDescription_QPB_Percentage"))
                return Message_QuantityPriceBreakDescription_QPB_Percentage;
            if (str.equals("Message_QuantityPriceBreakDescription_AdditionalSalePrice_Price"))
                return Message_QuantityPriceBreakDescription_AdditionalSalePrice_Price;
            if (str.equals("Message_QuantityPriceBreakDescription_AdditionalSalePrice_Percentage"))
                return Message_QuantityPriceBreakDescription_AdditionalSalePrice_Percentage;
            if (str.equals("Message_QuantityPriceBreakDescription_AdditionalSalePrice_TotalPrice"))
                return Message_QuantityPriceBreakDescription_AdditionalSalePrice_TotalPrice;
            if (str.equals("Message_QuantityPriceBreakDescription_QPB_TotalPrice"))
                return Message_QuantityPriceBreakDescription_QPB_TotalPrice;
            if (str.equals("Message_QuantityPriceBreakDescription_QPB_SinglePcePrice"))
                return Message_QuantityPriceBreakDescription_QPB_SinglePcePrice;
            if (str.equals("Message_QuantityPriceBreakDescription_QPB_SinglePcePercentage"))
                return Message_QuantityPriceBreakDescription_QPB_SinglePcePercentage;
            if (str.equals("Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePcePrice"))
                return Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePcePrice;
            if (str.equals("Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePcePercentage"))
                return Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePcePercentage;
            if (str.equals("Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePceTotalPrice"))
                return Message_QuantityPriceBreakDescription_AdditionalSalePrice_SinglePceTotalPrice;
            if (str.equals("Message_QuantityPriceBreakDescription_QPB_SinglePceTotalPrice"))
                return Message_QuantityPriceBreakDescription_QPB_SinglePceTotalPrice;
            if (str.equals("LoyaltyCardBalanceTranferdTo")) return LoyaltyCardBalanceTranferdTo;
            if (str.equals("LoyaltyCardBalanceTranferdFrom")) return LoyaltyCardBalanceTranferdFrom;
            if (str.equals("LoyaltyCardBlockedBecauseItsTranferd"))
                return LoyaltyCardBlockedBecauseItsTranferd;
            if (str.equals("InsufficientMobileDevice_Cals")) return InsufficientMobileDevice_Cals;
            if (str.equals("SameEdiUnknownBarcodeForShipmentAndInvoiceNotAllowed"))
                return SameEdiUnknownBarcodeForShipmentAndInvoiceNotAllowed;
            if (str.equals("AccountIsNotAllowToAccessMethod"))
                return AccountIsNotAllowToAccessMethod;
            if (str.equals("CompanyDoesNotExist")) return CompanyDoesNotExist;
            if (str.equals("NoAccess")) return NoAccess;
            if (str.equals("UnknownException")) return UnknownException;
            if (str.equals("BulkUpdateProductPriceProcessDescription"))
                return BulkUpdateProductPriceProcessDescription;
            if (str.equals("BulkUpdateProductPriceBlockedProcessDescription"))
                return BulkUpdateProductPriceBlockedProcessDescription;
            if (str.equals("BulkUpdateProductPreferredSupplierProcessDescription"))
                return BulkUpdateProductPreferredSupplierProcessDescription;
            if (str.equals("BulkUpdateProgressUpdateProducts"))
                return BulkUpdateProgressUpdateProducts;
            if (str.equals("BulkUpdateNoRightsGetProducts")) return BulkUpdateNoRightsGetProducts;
            if (str.equals("BulkUpdateReportTitleUpdateProductPrice"))
                return BulkUpdateReportTitleUpdateProductPrice;
            if (str.equals("BulkUpdateReportTitleUpdateProductsPriceBlocked"))
                return BulkUpdateReportTitleUpdateProductsPriceBlocked;
            if (str.equals("BulkUpdateReportTitleUpdateProductsMultiplePricing"))
                return BulkUpdateReportTitleUpdateProductsMultiplePricing;
            if (str.equals("BulkUpdateReportTitleUpdateProductsCancelledIndicator"))
                return BulkUpdateReportTitleUpdateProductsCancelledIndicator;
            if (str.equals("BulkUpdateReportTitleUpdateProductsPreferredSupplier"))
                return BulkUpdateReportTitleUpdateProductsPreferredSupplier;
            if (str.equals("BulkUpdateUnhandledException")) return BulkUpdateUnhandledException;
            if (str.equals("BulkUpdateOperationFinished")) return BulkUpdateOperationFinished;
            if (str.equals("BulkUpdateProductMultiplePriceProcessDescription"))
                return BulkUpdateProductMultiplePriceProcessDescription;
            if (str.equals("BulkUpdateProductCancelledProcessDescription"))
                return BulkUpdateProductCancelledProcessDescription;
            if (str.equals("BulkUpdateOperationPending")) return BulkUpdateOperationPending;
            if (str.equals("BulkUpdateProductZeroStockProcessDescription"))
                return BulkUpdateProductZeroStockProcessDescription;
            if (str.equals("BulkUpdateReportTitleUpdateProductsZeroStock"))
                return BulkUpdateReportTitleUpdateProductsZeroStock;
            if (str.equals("BulkUpdateProgressUpdateProductsOnLocation"))
                return BulkUpdateProgressUpdateProductsOnLocation;
            if (str.equals("BulkUpdateProductsToProductListProcessDescription"))
                return BulkUpdateProductsToProductListProcessDescription;
            if (str.equals("BulkUpdateReportTitleProductsToProductList"))
                return BulkUpdateReportTitleProductsToProductList;
            if (str.equals("BulkUpdateProductAssortmentProcessDescription"))
                return BulkUpdateProductAssortmentProcessDescription;
            if (str.equals("ReportTitleCalculateSalePrices")) return ReportTitleCalculateSalePrices;
            if (str.equals("CalculateSalePricesProcessDescription"))
                return CalculateSalePricesProcessDescription;
            if (str.equals("ReportTitleProcessWarehouseCounts"))
                return ReportTitleProcessWarehouseCounts;
            if (str.equals("ReportTitleProductListAsciiFileImport"))
                return ReportTitleProductListAsciiFileImport;
            if (str.equals("AsyncProcessCompleted")) return AsyncProcessCompleted;
            if (str.equals("AsyncProcessException")) return AsyncProcessException;
            if (str.equals("AsyncProcessGlobalThreadException"))
                return AsyncProcessGlobalThreadException;
            if (str.equals("AsyncProcessAborted")) return AsyncProcessAborted;
            if (str.equals("AsyncPopulateExchangeProducts_ReportTitle"))
                return AsyncPopulateExchangeProducts_ReportTitle;
            if (str.equals("AsyncPopulateExchangeProducts_ProgressDescription"))
                return AsyncPopulateExchangeProducts_ProgressDescription;
            if (str.equals("AsyncPopulateExchangeBarcode_ProgressDescription"))
                return AsyncPopulateExchangeBarcode_ProgressDescription;
            if (str.equals("AsyncPopulateExchangeBarcode_ReportTitle"))
                return AsyncPopulateExchangeBarcode_ReportTitle;
            if (str.equals("AsyncProcessExchangeProducts_ReportTitle"))
                return AsyncProcessExchangeProducts_ReportTitle;
            if (str.equals("AsyncProcessExchangeProducts_ProgressDescription"))
                return AsyncProcessExchangeProducts_ProgressDescription;
            if (str.equals("AsyncProcessExchangeProducts_ExchangeProductNotFound"))
                return AsyncProcessExchangeProducts_ExchangeProductNotFound;
            if (str.equals("AsyncProcessExchangeProducts_DerivedOrganizationProductNotFound"))
                return AsyncProcessExchangeProducts_DerivedOrganizationProductNotFound;
            if (str.equals("AsyncBulkUpdatePurchaseSupplier_ReportTitle"))
                return AsyncBulkUpdatePurchaseSupplier_ReportTitle;
            if (str.equals("AsyncBulkUpdatePurchaseSupplier_ProgressDescription"))
                return AsyncBulkUpdatePurchaseSupplier_ProgressDescription;
            if (str.equals("AsyncBulkUpdatePurchaseSupplier_ProcessDescription"))
                return AsyncBulkUpdatePurchaseSupplier_ProcessDescription;
            if (str.equals("AsyncBulkUpdatePurchasePreferredRowIndicator_ReportTitle"))
                return AsyncBulkUpdatePurchasePreferredRowIndicator_ReportTitle;
            if (str.equals("AsyncBulkUpdatePurchasePreferredRowIndicator_ProgressDescription"))
                return AsyncBulkUpdatePurchasePreferredRowIndicator_ProgressDescription;
            if (str.equals("AsyncBulkUpdatePurchasePreferredRowIndicator_ProcessDescription"))
                return AsyncBulkUpdatePurchasePreferredRowIndicator_ProcessDescription;
            if (str.equals("AsyncBulkUpdatePurchaseCancelledIndicator_ReportTitle"))
                return AsyncBulkUpdatePurchaseCancelledIndicator_ReportTitle;
            if (str.equals("AsyncBulkUpdatePurchaseCancelledIndicator_ProgressDescription"))
                return AsyncBulkUpdatePurchaseCancelledIndicator_ProgressDescription;
            if (str.equals("AsyncBulkUpdatePurchaseCancelledIndicator_ProcessDescription"))
                return AsyncBulkUpdatePurchaseCancelledIndicator_ProcessDescription;
            if (str.equals("AsyncPopulateExchangePurchase_ReportTitle"))
                return AsyncPopulateExchangePurchase_ReportTitle;
            if (str.equals("AsyncPopulateExchangePurchase_ProgressDescription"))
                return AsyncPopulateExchangePurchase_ProgressDescription;
            if (str.equals("AsyncProcessExchangePurchase_ReportTitle"))
                return AsyncProcessExchangePurchase_ReportTitle;
            if (str.equals("AsyncProcessExchangePurchase_ProgressDescription"))
                return AsyncProcessExchangePurchase_ProgressDescription;
            if (str.equals("AsyncProcessExchangePurchase_ExchangePurchaseInfoNotFound"))
                return AsyncProcessExchangePurchase_ExchangePurchaseInfoNotFound;
            if (str.equals("AsyncProcessExchangePurchase_DerivedOrganizationPurchaseInfoNotFound"))
                return AsyncProcessExchangePurchase_DerivedOrganizationPurchaseInfoNotFound;
            if (str.equals("AsyncProcess_ReCalculateStock_ProcessDescription"))
                return AsyncProcess_ReCalculateStock_ProcessDescription;
            if (str.equals("AsyncProcess_ReCalculateStock_ReportTitle"))
                return AsyncProcess_ReCalculateStock_ReportTitle;
            if (str.equals("AsyncProcess_ReCalculateStock_RecalculatingStoreProductDateStocks"))
                return AsyncProcess_ReCalculateStock_RecalculatingStoreProductDateStocks;
            if (str.equals("AsyncProcessInventoryRecords_ProgressDescription"))
                return AsyncProcessInventoryRecords_ProgressDescription;
            if (str.equals("AsyncProcessInventoryRecords_ReportTitle"))
                return AsyncProcessInventoryRecords_ReportTitle;
            if (str.equals("AsyncAddExchangeProductsToProductList_ReportTitle"))
                return AsyncAddExchangeProductsToProductList_ReportTitle;
            if (str.equals("AsyncAddExchangeProductsToProductList_ProgressDescription"))
                return AsyncAddExchangeProductsToProductList_ProgressDescription;
            if (str.equals("AsyncProcess_ReCalculateStock_RecalculatingStoreProducts"))
                return AsyncProcess_ReCalculateStock_RecalculatingStoreProducts;
            if (str.equals("AsyncProcess_MoveAllStockToShop_ProcessDescription"))
                return AsyncProcess_MoveAllStockToShop_ProcessDescription;
            if (str.equals("AsyncProcess_MoveAllStockToShop_ReportTitle"))
                return AsyncProcess_MoveAllStockToShop_ReportTitle;
            if (str.equals("Async_GeneratePurchaseOrders_ProcessDescription"))
                return Async_GeneratePurchaseOrders_ProcessDescription;
            if (str.equals("Async_GeneratePurchaseOrders_ReportTitle"))
                return Async_GeneratePurchaseOrders_ReportTitle;
            if (str.equals("Async_CalculateAutoStock_ProcessDescription"))
                return Async_CalculateAutoStock_ProcessDescription;
            if (str.equals("Async_CalculateAutoStock_ReportTitle"))
                return Async_CalculateAutoStock_ReportTitle;
            if (str.equals("Async_GenerateOrderAdvices_ProcessDescription"))
                return Async_GenerateOrderAdvices_ProcessDescription;
            if (str.equals("Async_GenerateOrderAdvices_ReportTitle"))
                return Async_GenerateOrderAdvices_ReportTitle;
            if (str.equals("Async_ProcessOrderAdvice_ProcessDescription"))
                return Async_ProcessOrderAdvice_ProcessDescription;
            if (str.equals("Async_ProcessOrderAdvice_ReportTitle"))
                return Async_ProcessOrderAdvice_ReportTitle;
            if (str.equals("Async_ProductListExcelImport_ProcessDescription"))
                return Async_ProductListExcelImport_ProcessDescription;
            if (str.equals("Async_ProductListExcelImport_ReportTitle"))
                return Async_ProductListExcelImport_ReportTitle;
            if (str.equals("Async_StoreProductStockSettingsExcelImport_ReportTitle"))
                return Async_StoreProductStockSettingsExcelImport_ReportTitle;
            if (str.equals("Async_ProductListToOrderAdvice_ProcessDescription"))
                return Async_ProductListToOrderAdvice_ProcessDescription;
            if (str.equals("Async_ProductListToOrderAdvice_ReportTitle"))
                return Async_ProductListToOrderAdvice_ReportTitle;
            if (str.equals("Async_UpdateShopServer_ProcessDescription"))
                return Async_UpdateShopServer_ProcessDescription;
            if (str.equals("Async_UpdateShopServer_ReportTitle"))
                return Async_UpdateShopServer_ReportTitle;
            if (str.equals("Async_ProductListToWebShop_ProcessDescription"))
                return Async_ProductListToWebShop_ProcessDescription;
            if (str.equals("Async_ProductListToWebShop_ReportTitle"))
                return Async_ProductListToWebShop_ReportTitle;
            if (str.equals("Async_ImportExcelToEchange_ProcessDescription"))
                return Async_ImportExcelToEchange_ProcessDescription;
            if (str.equals("Async_ImportExcelToEchange_ReportTitle"))
                return Async_ImportExcelToEchange_ReportTitle;
            if (str.equals("AsyncExchangeImportPriCat_ReportTitle"))
                return AsyncExchangeImportPriCat_ReportTitle;
            if (str.equals("AsyncExchangeImportPriCat_ProgressDescription"))
                return AsyncExchangeImportPriCat_ProgressDescription;
            if (str.equals("Async_ImportExcelToExchange_ProcessCancelNotHitPurcheaseRecordsDescription"))
                return Async_ImportExcelToExchange_ProcessCancelNotHitPurcheaseRecordsDescription;
            if (str.equals("Async_ClosePurchaseOrders_ProcessDescription"))
                return Async_ClosePurchaseOrders_ProcessDescription;
            if (str.equals("Async_ClosePurchaseOrders_ReportTitle"))
                return Async_ClosePurchaseOrders_ReportTitle;
            if (str.equals("NoDeleteReferentialIntegrity")) return NoDeleteReferentialIntegrity;
            return null;
        }
    }

    public enum CustomerPriceType {
        NotSpecified(0),
        InclVat(1),
        ExclVat(2);

        private int code;

        CustomerPriceType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static CustomerPriceType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("InclVat"))
                return InclVat;
            if (str.equals("ExclVat"))
                return ExclVat;
            return null;
        }
    }

    public enum DefaultCommunicationType {
        NotSpecified(0),
        RetailLink(1),
        Email(2);

        private int code;

        DefaultCommunicationType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static DefaultCommunicationType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("RetailLink"))
                return RetailLink;
            if (str.equals("Email"))
                return Email;
            return null;
        }
    }

    public enum GS1EdiFormat {
        NotSpecified(0),
        EanCom(1),
        EdiXml(2),
        Codanet(3),
        NedFox(4);

        private int code;

        GS1EdiFormat(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static GS1EdiFormat fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("EanCom"))
                return EanCom;
            if (str.equals("EdiXml"))
                return EdiXml;
            if (str.equals("Codanet"))
                return Codanet;
            if (str.equals("NedFox"))
                return NedFox;
            return null;
        }
    }

    public enum SupplierType {
        NotSpecified(0),
        Own(1),
        FranchiseSupplier(2),
        CancelledFranchiseSupplier(3);

        private int code;

        SupplierType(int code) {
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        public static SupplierType fromString(String str) {
            if (str.equals("NotSpecified"))
                return NotSpecified;
            if (str.equals("Own"))
                return Own;
            if (str.equals("FranchiseSupplier"))
                return FranchiseSupplier;
            if (str.equals("CancelledFranchiseSupplier"))
                return CancelledFranchiseSupplier;
            return null;
        }
    }
}

