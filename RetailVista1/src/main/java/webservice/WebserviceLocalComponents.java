package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 9/8/2017 11:59:10 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import com.retailvistaapi.BuildConfig;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.kxml2.kdom.Element;

import CommonClass.APICommonClassNew;
import CommonClass.CommonUtils;
import CommonClass.StaticValues;

public class WebserviceLocalComponents {

    public String NAMESPACE = "http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents";
    public String url = "";
    public int timeOut = 18000;
    public IWsdl2CodeEvents eventHandler;
    public Retail3000AuthenticateToken retail3000AuthenticateTokenValue;
    public WS_Enums.SoapProtocolVersion soapVersion;

/*
    public WebserviceLocalComponents() {
    }
*/

    public WebserviceLocalComponents(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url + "/localcomponents.asmx";
    }

/*
    public WebserviceLocalComponents(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
*/

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void GetPrintersAsync(PrintersFilter filter) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPrintersAsync(filter, null);
    }

    public void GetPrintersAsync(final PrintersFilter filter, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewPrinterInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewPrinterInfo doInBackground(Void... params) {
                return GetPrinters(filter, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewPrinterInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetPrinters", result);
                }
            }
        }.execute();
    }

    public VectorViewPrinterInfo GetPrinters(PrintersFilter filter) {
        return GetPrinters(filter, null);
    }

    public VectorViewPrinterInfo GetPrinters(PrintersFilter filter, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents", "GetPrinters");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents", "filter", new PrintersFilter().getClass());
        soapReq.addProperty("filter", filter);
        soapEnvelope.setOutputSoapObject(soapReq);

        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents/GetPrinters", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewPrinterInfo resultVariable = new VectorViewPrinterInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


    public void GetLabelClassesAsync(LabelClassesFilter filter) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLabelClassesAsync(filter, null);
    }

    public void GetLabelClassesAsync(final LabelClassesFilter filter, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewLabelClassInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewLabelClassInfo doInBackground(Void... params) {
                return GetLabelClasses(filter, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewLabelClassInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetLabelClasses", result);
                }
            }
        }.execute();
    }

    public VectorViewLabelClassInfo GetLabelClasses(LabelClassesFilter filter) {
        return GetLabelClasses(filter, null);
    }

    public VectorViewLabelClassInfo GetLabelClasses(LabelClassesFilter filter, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents", "GetLabelClasses");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents", "filter", new LabelClassesFilter().getClass());
        soapReq.addProperty("filter", filter);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents/GetLabelClasses", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewLabelClassInfo resultVariable = new VectorViewLabelClassInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


    public void GetLabelDefinitionsAsync(WS_Enums.LabelType labelType, WS_Enums.BooleanFilter isCompanyLabelDefinitionsOnly, WS_Enums.BooleanFilter isCancelledOnly) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLabelDefinitionsAsync(labelType, isCompanyLabelDefinitionsOnly, isCancelledOnly, null);
    }

    public void GetLabelDefinitionsAsync(final WS_Enums.LabelType labelType, final WS_Enums.BooleanFilter isCompanyLabelDefinitionsOnly, final WS_Enums.BooleanFilter isCancelledOnly, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewLabelDefinitionInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewLabelDefinitionInfo doInBackground(Void... params) {
                return GetLabelDefinitions(labelType, isCompanyLabelDefinitionsOnly, isCancelledOnly, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewLabelDefinitionInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetLabelDefinitions", result);
                }
            }
        }.execute();
    }

    public VectorViewLabelDefinitionInfo GetLabelDefinitions(WS_Enums.LabelType labelType, WS_Enums.BooleanFilter isCompanyLabelDefinitionsOnly, WS_Enums.BooleanFilter isCancelledOnly) {
        return GetLabelDefinitions(labelType, isCompanyLabelDefinitionsOnly, isCancelledOnly, null);
    }

    public VectorViewLabelDefinitionInfo GetLabelDefinitions(WS_Enums.LabelType labelType, WS_Enums.BooleanFilter isCompanyLabelDefinitionsOnly, WS_Enums.BooleanFilter isCancelledOnly, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents", "GetLabelDefinitions");
        soapReq.addProperty("labelType", labelType.toString());
        soapReq.addProperty("isCompanyLabelDefinitionsOnly", isCompanyLabelDefinitionsOnly.toString());
        soapReq.addProperty("isCancelledOnly", isCancelledOnly.toString());

        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceLocalComponents/GetLabelDefinitions", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewLabelDefinitionInfo resultVariable = new VectorViewLabelDefinitionInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


}
