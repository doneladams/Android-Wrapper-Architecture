package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.lang.*;
import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class SaleOrderRowInfo implements KvmSerializable {
    public double remainingAmount;
    public int productId;
    public String description;
    public int saleOrderId;
    public int vatId;
    public double vatPercentage;
    public double pceGrossPrice;
    public double discountPrice;
    public double discountPercentage;
    public double amount;
    //    public double pceNetPrice;
    public double directReservationAmount;
    public WS_Enums.DiscountType discountType;
    public long barcode;

    /*    public int relatedSaleOrderRowId;

        public int brandId;
        public int scannerId;
        public int mixedMatchId;
        public int discountAgreementClassificationIdField;
        public int quantityPriceBreakId;
        public int promotionId;


        public int purchaseOrderRowId;

        public long barcode;


        public boolean isCancelled;
        public String note1;
        public String note2;

        public boolean vatRequired;
        public WS_Enums.DiscountType discountType;
        public boolean isNoDiscounts;
        public boolean isNoDiscountOnDiscount;
        public boolean isSale;
        public boolean isParentRow;
        public double pcePurchasePrice;

        public double totalGrossPrice;
        public double totalNetPrice;
        public double totalVat;
        public double weightedTotalNetPrice;
        public WS_Enums.SalePriceType priceType;

        public String approvalNote;
        public double approvedAmount;
        public int deliveryDays;
        public long conversionId;
        public int companyId;
        public int createdByUserId;
        public String createdDateTime;
        public int lastModifiedByUserId;
        public String lastModifiedDateTime;*/
    public int itemId = -1;

    public SaleOrderRowInfo() {
    }

    public SaleOrderRowInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("SaleOrderId")) {
            Object obj = soapObject.getProperty("SaleOrderId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleOrderId = (Integer) obj;
            }
        }
/*        if (soapObject.hasProperty("RelatedSaleOrderRowId")) {
            Object obj = soapObject.getProperty("RelatedSaleOrderRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                relatedSaleOrderRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                relatedSaleOrderRowId = (Integer) obj;
            }
        }*/
        if (soapObject.hasProperty("ProductId")) {
            Object obj = soapObject.getProperty("ProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productId = (Integer) obj;
            }
        }
/*
        if (soapObject.hasProperty("BrandId")) {
            Object obj = soapObject.getProperty("BrandId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                brandId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ScannerId")) {
            Object obj = soapObject.getProperty("ScannerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                scannerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                scannerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("MixedMatchId")) {
            Object obj = soapObject.getProperty("MixedMatchId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mixedMatchId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mixedMatchId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DiscountAgreementClassificationId")) {
            Object obj = soapObject.getProperty("DiscountAgreementClassificationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountAgreementClassificationIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountAgreementClassificationIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("QuantityPriceBreakId")) {
            Object obj = soapObject.getProperty("QuantityPriceBreakId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                quantityPriceBreakId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                quantityPriceBreakId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PromotionId")) {
            Object obj = soapObject.getProperty("PromotionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                promotionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                promotionId = (Integer) obj;
            }
        }
*/
        if (soapObject.hasProperty("VatId")) {
            Object obj = soapObject.getProperty("VatId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatPercentage")) {
            Object obj = soapObject.getProperty("VatPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatPercentage = (Double) obj;
            }
        }
/*        if (soapObject.hasProperty("PurchaseOrderRowId")) {
            Object obj = soapObject.getProperty("PurchaseOrderRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseOrderRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseOrderRowId = (Integer) obj;
            }
        }*/
        if (soapObject.hasProperty("Description")) {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                description = j.toString();
            } else if (obj != null && obj instanceof String) {
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("Barcode")) {
            Object obj = soapObject.getProperty("Barcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                barcode = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                barcode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Amount")) {
            Object obj = soapObject.getProperty("Amount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                amount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                amount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DirectReservationAmount")) {
            Object obj = soapObject.getProperty("DirectReservationAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                directReservationAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                directReservationAmount = (Double) obj;
            }
        }
/*
        if (soapObject.hasProperty("IsCancelled")) {
            Object obj = soapObject.getProperty("IsCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCancelled = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isCancelled = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Note1")) {
            Object obj = soapObject.getProperty("Note1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note2")) {
            Object obj = soapObject.getProperty("Note2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note2 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note2 = (String) obj;
            }
        }*/
        if (soapObject.hasProperty("DiscountPrice")) {
            Object obj = soapObject.getProperty("DiscountPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DiscountPercentage")) {
            Object obj = soapObject.getProperty("DiscountPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DiscountType")) {
            Object obj = soapObject.getProperty("DiscountType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountType = WS_Enums.DiscountType.fromString(j.toString());
            }
        }

/*        if (soapObject.hasProperty("VatRequired")) {
            Object obj = soapObject.getProperty("VatRequired");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatRequired = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                vatRequired = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("DiscountType")) {
            Object obj = soapObject.getProperty("DiscountType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountType = WS_Enums.DiscountType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsNoDiscounts")) {
            Object obj = soapObject.getProperty("IsNoDiscounts");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscounts = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscounts = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscountOnDiscount")) {
            Object obj = soapObject.getProperty("IsNoDiscountOnDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscountOnDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscountOnDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsSale")) {
            Object obj = soapObject.getProperty("IsSale");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isSale = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isSale = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsParentRow")) {
            Object obj = soapObject.getProperty("IsParentRow");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isParentRow = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isParentRow = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PcePurchasePrice")) {
            Object obj = soapObject.getProperty("PcePurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pcePurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pcePurchasePrice = (Double) obj;
            }
        }*/
        if (soapObject.hasProperty("PceGrossPrice")) {
            Object obj = soapObject.getProperty("PceGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pceGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pceGrossPrice = (Double) obj;
            }
        }
/*        if (soapObject.hasProperty("PceNetPrice")) {
            Object obj = soapObject.getProperty("PceNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pceNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pceNetPrice = (Double) obj;
            }
        }*/
/*        if (soapObject.hasProperty("TotalGrossPrice")) {
            Object obj = soapObject.getProperty("TotalGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalNetPrice")) {
            Object obj = soapObject.getProperty("TotalNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalVat")) {
            Object obj = soapObject.getProperty("TotalVat");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalVat = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalVat = (Double) obj;
            }
        }
        if (soapObject.hasProperty("WeightedTotalNetPrice")) {
            Object obj = soapObject.getProperty("WeightedTotalNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                weightedTotalNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                weightedTotalNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PriceType")) {
            Object obj = soapObject.getProperty("PriceType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                priceType = WS_Enums.SalePriceType.fromString(j.toString());
            }
        }*/
        if (soapObject.hasProperty("RemainingAmount")) {
            Object obj = soapObject.getProperty("RemainingAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                remainingAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                remainingAmount = (Double) obj;
            }
        }

/*        if (soapObject.hasProperty("ApprovalNote")) {
            Object obj = soapObject.getProperty("ApprovalNote");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                approvalNote = j.toString();
            } else if (obj != null && obj instanceof String) {
                approvalNote = (String) obj;
            }
        }
        if (soapObject.hasProperty("ApprovedAmount")) {
            Object obj = soapObject.getProperty("ApprovedAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                approvedAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                approvedAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DeliveryDays")) {
            Object obj = soapObject.getProperty("DeliveryDays");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                deliveryDays = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                deliveryDays = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ConversionId")) {
            Object obj = soapObject.getProperty("ConversionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                conversionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                conversionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId")) {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId")) {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime")) {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId")) {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }*/
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return saleOrderId;
            case 1:
                return productId;
            case 2:
                return vatId;
            case 3:
                return vatPercentage;
            case 4:
                return description;
            case 5:
                return amount;
            case 6:
                return pceGrossPrice;
            case 7:
                return discountPercentage;
            case 8:
                return itemId;
            case 9:
                return directReservationAmount;
            case 10:
                return discountType.toString();
            case 11:
                return discountPrice;
            case 12:
                return remainingAmount;
            case 13:
                return barcode;
     /*       case 1:
                return relatedSaleOrderRowId;*/

/*            case 3:
                return brandId;
            case 4:
                return scannerId;
            case 5:
                return mixedMatchId;
            case 6:
                return discountAgreementClassificationIdField;
            case 7:
                return quantityPriceBreakId;
            case 8:
                return promotionId;*/
            /*case 11:
                return purchaseOrderRowId;*/
/*            case 13:
                return barcode;*/
    /*
            case 16:
                return isCancelled;
            case 17:
                return note1;
            case 18:
                return note2;*/

   /*         case 21:
                return vatRequired;
            case 22:
                return discountType.toString();
            case 23:
                return isNoDiscounts;
            case 24:
                return isNoDiscountOnDiscount;
            case 25:
                return isSale;
            case 26:
                return isParentRow;
            case 27:
                return pcePurchasePrice;*/
 /*
            case 30:
                return totalGrossPrice;
            case 31:
                return totalNetPrice;
            case 32:
                return totalVat;
            case 33:
                return weightedTotalNetPrice;
            case 34:
                return priceType.toString();
            */

       /*     case 7:
                return deliveredAmount;
            case 8:
                return reservedAmount;*/
      /*      case 38:
                return approvalNote;
            case 39:
                return approvedAmount;
            case 40:
                return deliveryDays;
            case 41:
                return conversionId;
            case 42:
                return companyId;
            case 43:
                return createdByUserId;
            case 44:
                return createdDateTime;
            case 45:
                return lastModifiedByUserId;
            case 46:
                return lastModifiedDateTime;
            case 47:
                return itemId;*/
            /*case 11:
                return pceNetPrice;*/
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 14;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleOrderId";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductId";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "VatId";
                break;
            case 3:
                info.type = Double.class;
                info.name = "VatPercentage";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 5:
                info.type = Double.class;
                info.name = "Amount";
                break;
            case 6:
                info.type = Double.class;
                info.name = "PceGrossPrice";
                break;
            case 7:

                if (discountPercentage == 0 || discountPercentage == -1) {
                    info.type = Double.class;
                    info.name = "DiscountPercentage1";
                    break;
                } else {
                    info.type = Double.class;
                    info.name = "DiscountPercentage";
                    break;
                }
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
            case 9:
                info.type = Double.class;
                info.name = "DirectReservationAmount";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DiscountType";
                break;
            case 11:
                if (discountPrice == 0 || discountPrice == -1) {
                    info.type = Double.class;
                    info.name = "DiscountPrice1";
                    break;

                } else {
                    info.type = Double.class;
                    info.name = "DiscountPrice";
                    break;

                }
            case 12:
                info.type = Double.class;
                info.name = "RemainingAmount";
                break;
            case 13:
                info.type = Long.class;
                info.name = "Barcode";
                break;
            /*case 11:
                info.type = Double.class;
                info.name = "PceNetPrice";
                break;*/

/* case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseOrderRowId";
                break;*/
           /* case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RelatedSaleOrderRowId";
                break;*/
           /* case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "BrandId";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ScannerId";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "MixedMatchId";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DiscountAgreementClassificationId";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "QuantityPriceBreakId";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PromotionId";
                break;*/
           /* case 13:
                info.type = Long.class;
                info.name = "Barcode";
                break;*/
           /*
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCancelled";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note1";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note2";
                break;*/

           /* case 20:
                info.type = Double.class;
                info.name = "DiscountPercentage";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "VatRequired";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DiscountType";
                break;
            case 23:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscounts";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscountOnDiscount";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSale";
                break;
            case 26:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsParentRow";
                break;
            case 27:
                info.type = Double.class;
                info.name = "PcePurchasePrice";
                break;*/
            /*case 29:
                info.type = Double.class;
                info.name = "PceNetPrice";
                break;
            case 30:
                info.type = Double.class;
                info.name = "TotalGrossPrice";
                break;
            case 31:
                info.type = Double.class;
                info.name = "TotalNetPrice";
                break;
            case 32:
                info.type = Double.class;
                info.name = "TotalVat";
                break;
            case 33:
                info.type = Double.class;
                info.name = "WeightedTotalNetPrice";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PriceType";
                break;*/

      /*      case 7:
                if (deliveredAmount == -1) {
                    info.type = Double.class;
                    info.name = "DeliveredAmount1";
                    break;

                } else {
                    info.type = Double.class;
                    info.name = "DeliveredAmount";
                    break;

                }
            case 8:
                if (reservedAmount == -1) {
                    info.type = Double.class;
                    info.name = "ReservedAmount1";
                } else {
                    info.type = Double.class;
                    info.name = "ReservedAmount";
                }
                break;*/
/*            case 9:
                info.type = Double.class;
                info.name = "DiscountPrice";
                break;*/



           /* case 38:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ApprovalNote";
                break;
            case 39:
                info.type = Double.class;
                info.name = "ApprovedAmount";
                break;
            case 40:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DeliveryDays";
                break;
            case 41:
                info.type = Long.class;
                info.name = "ConversionId";
                break;
            case 42:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 43:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 44:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 45:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;*/
        }
    }

//    @Override //    public String getInnerText() { //        return null; //    } // // //    @Override //    public void setInnerText(String s) { //    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
