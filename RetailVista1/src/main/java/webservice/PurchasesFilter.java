package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/11/2017 5:10:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.lang.*;
import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class PurchasesFilter implements KvmSerializable {

    public int productId;
    public WS_Enums.BooleanFilter isActiveOnly;
    /*   public int supplierId;
    public String orderCode;
    public long purchaseUnitBarcode;
    public double orderMultiplier;
    public double minimumOrderQuantity;
    public int purchaseUnitDimensionId;
    public int purchaseUnitPackageIdField;
    public double purchaseUnitToPurchaseContentUnitFactor;
    public int purchaseContentUnitDimensionId;
    public int purchaseContentUnitPackageIdField;
    public double purchaseContentUnitToConsumerUnitFactor;
    public WS_Enums.BooleanFilter isPreferredSupplierRowOnly;
    public WS_Enums.BooleanFilter isAvailableForOrderingOnly;
    public WS_Enums.BooleanFilter isCancelledOnly;
    public WS_Enums.DataSource source;

    public int seasonProfileId;
    public int displayAssortmentForStoreTypeDifferentationId;
    public long collectionBarcode;
    public long collectionParentBarcode;
    public int itemId;
    public boolean useStrictModeForCandidateKeys;
    public boolean calculateProfit;*/

    public PurchasesFilter() {
    }

    public PurchasesFilter(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("ProductId")) {
            Object obj = soapObject.getProperty("ProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsActiveOnly")) {
            Object obj = soapObject.getProperty("IsActiveOnly");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isActiveOnly = WS_Enums.BooleanFilter.fromString(j.toString());
            }
        }
      /*  if (soapObject.hasProperty("SupplierId")) {
            Object obj = soapObject.getProperty("SupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                supplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                supplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OrderCode")) {
            Object obj = soapObject.getProperty("OrderCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                orderCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitBarcode")) {
            Object obj = soapObject.getProperty("PurchaseUnitBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitBarcode = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitBarcode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OrderMultiplier")) {
            Object obj = soapObject.getProperty("OrderMultiplier");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderMultiplier = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                orderMultiplier = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MinimumOrderQuantity")) {
            Object obj = soapObject.getProperty("MinimumOrderQuantity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                minimumOrderQuantity = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                minimumOrderQuantity = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitDimensionId")) {
            Object obj = soapObject.getProperty("PurchaseUnitDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitPackageId")) {
            Object obj = soapObject.getProperty("PurchaseUnitPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitToPurchaseContentUnitFactor")) {
            Object obj = soapObject.getProperty("PurchaseUnitToPurchaseContentUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitToPurchaseContentUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitToPurchaseContentUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitDimensionId")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseContentUnitDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitPackageId")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseContentUnitPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitToConsumerUnitFactor")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitToConsumerUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitToConsumerUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseContentUnitToConsumerUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsPreferredSupplierRowOnly")) {
            Object obj = soapObject.getProperty("IsPreferredSupplierRowOnly");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isPreferredSupplierRowOnly = WS_Enums.BooleanFilter.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsAvailableForOrderingOnly")) {
            Object obj = soapObject.getProperty("IsAvailableForOrderingOnly");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAvailableForOrderingOnly = WS_Enums.BooleanFilter.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsCancelledOnly")) {
            Object obj = soapObject.getProperty("IsCancelledOnly");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCancelledOnly = WS_Enums.BooleanFilter.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("Source")) {
            Object obj = soapObject.getProperty("Source");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                source = WS_Enums.DataSource.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("SeasonProfileId")) {
            Object obj = soapObject.getProperty("SeasonProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                seasonProfileId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                seasonProfileId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DisplayAssortmentForStoreTypeDifferentationId")) {
            Object obj = soapObject.getProperty("DisplayAssortmentForStoreTypeDifferentationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                displayAssortmentForStoreTypeDifferentationId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                displayAssortmentForStoreTypeDifferentationId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CollectionBarcode")) {
            Object obj = soapObject.getProperty("CollectionBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                collectionBarcode = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                collectionBarcode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CollectionParentBarcode")) {
            Object obj = soapObject.getProperty("CollectionParentBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                collectionParentBarcode = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                collectionParentBarcode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("UseStrictModeForCandidateKeys")) {
            Object obj = soapObject.getProperty("UseStrictModeForCandidateKeys");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                useStrictModeForCandidateKeys = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                useStrictModeForCandidateKeys = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("CalculateProfit")) {
            Object obj = soapObject.getProperty("CalculateProfit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculateProfit = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                calculateProfit = (Boolean) obj;
            }
        }*/
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return productId;
            case 1:
                return isActiveOnly.toString();
                /*case 1:
                return supplierId;
            case 2:
                return orderCode;
            case 3:
                return purchaseUnitBarcode;
            case 4:
                return orderMultiplier;
            case 5:
                return minimumOrderQuantity;
            case 6:
                return purchaseUnitDimensionId;
            case 7:
                return purchaseUnitPackageIdField;
            case 8:
                return purchaseUnitToPurchaseContentUnitFactor;
            case 9:
                return purchaseContentUnitDimensionId;
            case 10:
                return purchaseContentUnitPackageIdField;
            case 11:
                return purchaseContentUnitToConsumerUnitFactor;
            case 12:
                return isPreferredSupplierRowOnly.toString();
            case 13:
                return isAvailableForOrderingOnly.toString();
            case 14:
                return isCancelledOnly.toString();
            case 15:
                return source.toString();

            case 17:
                return seasonProfileId;
            case 18:
                return displayAssortmentForStoreTypeDifferentationId;
            case 19:
                return collectionBarcode;
            case 20:
                return collectionParentBarcode;
            case 21:
                return itemId;
            case 22:
                return useStrictModeForCandidateKeys;
            case 23:
                return calculateProfit;*/
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 2;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IsActiveOnly";
                break;
            /*case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SupplierId";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderCode";
                break;
            case 3:
                info.type = Long.class;
                info.name = "PurchaseUnitBarcode";
                break;
            case 4:
                info.type = Double.class;
                info.name = "OrderMultiplier";
                break;
            case 5:
                info.type = Double.class;
                info.name = "MinimumOrderQuantity";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseUnitDimensionId";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseUnitPackageId";
                break;
            case 8:
                info.type = Double.class;
                info.name = "PurchaseUnitToPurchaseContentUnitFactor";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseContentUnitDimensionId";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseContentUnitPackageId";
                break;
            case 11:
                info.type = Double.class;
                info.name = "PurchaseContentUnitToConsumerUnitFactor";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IsPreferredSupplierRowOnly";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IsAvailableForOrderingOnly";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IsCancelledOnly";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Source";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SeasonProfileId";
                break;
            case 18:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DisplayAssortmentForStoreTypeDifferentationId";
                break;
            case 19:
                info.type = Long.class;
                info.name = "CollectionBarcode";
                break;
            case 20:
                info.type = Long.class;
                info.name = "CollectionParentBarcode";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "UseStrictModeForCandidateKeys";
                break;
            case 23:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CalculateProfit";
                break;*/
        }
    }

//    @Override //    public String getInnerText() { //        return null; //    } // // //    @Override //    public void setInnerText(String s) { //    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
