package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/11/2017 5:10:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.lang.*;
import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ViewPurchaseInfo implements KvmSerializable {

    public long supplierNumber;
    public String supplierGeneralName;
    public double grossProfitPercentage;
    public double grossProfitPrice;
    public double netProfitPercentage;
    public double netProfitPrice;
    public double lowestSingleUnitPurchasePrice;
    public String purchaseUnitDimensionShortDescription;
    public String purchaseUnitDimensionDescription;
    public String purchaseUnitPackageShortDescriptionField;
    public String purchaseUnitPackageDescriptionField;
    public String purchaseContentUnitDimensionShortDescription;
    public String purchaseContentUnitPackageShortDescriptionField;
    public String purchaseContentUnitDimensionDescription;
    public String purchaseContentUnitPackageDescriptionField;
    public String telephone;
    public String fax;
    public String email;
    public String consumerUnit;
    public String purchaseAssortmentDescription;
    public String seasonProfileDescription;
    public String statusCode;
    public String statusDescription;
    public int collectionProductId;
    public int collectionParentProductId;
    public boolean isCollection;
    public boolean isAvailableForOrdering;
    public boolean isCancelled;
    public int defaultDeliveryDays;
    public String purchaseDetailInfo;
    public int productId;
    public int supplierId;
    public int purchaseStatusRowId;
    public String externalCode;
    public String orderCode;
    public long purchaseUnitBarcode;
    public double orderMultiplier;
    public double minimumOrderQuantity;
    public int purchaseUnitDimensionId;
    public int purchaseUnitPackageIdField;
    public double purchaseUnitToPurchaseContentUnitFactor;
    public int purchaseContentUnitDimensionId;
    public int purchaseContentUnitPackageIdField;
    public double purchaseContentUnitToConsumerUnitFactor;
    public double cbmPerSingleUnit;
    public double purchasePricePerAmount;
    public double grossPurchasePrice;
    public double purchasePrice;
    public boolean isNetNet;
    public double ownPurchasePrice;
    public String ownPurchasePriceNote;
    public WS_Enums.PurchasePriceType purchasePriceType;
    public String organizationReference;
    public String organizationModifiedDateTime;
    public String lastExchangeDateTime;
    public boolean isPreferredSupplierRow;
    public WS_Enums.DataSource source;
    public boolean isActive;
    public int seasonProfileId;
    public long collectionBarcode;
    public int collectionAmount;
    public long collectionParentBarcode;
    public double grossPriceReductionPercentage;
    public boolean isDerived;
    public int organizationId;
    public int companyId;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;

    public ViewPurchaseInfo() {
    }

    public ViewPurchaseInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("SupplierNumber")) {
            Object obj = soapObject.getProperty("SupplierNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                supplierNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                supplierNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SupplierGeneralName")) {
            Object obj = soapObject.getProperty("SupplierGeneralName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                supplierGeneralName = j.toString();
            } else if (obj != null && obj instanceof String) {
                supplierGeneralName = (String) obj;
            }
        }
        if (soapObject.hasProperty("GrossProfitPercentage")) {
            Object obj = soapObject.getProperty("GrossProfitPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossProfitPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossProfitPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossProfitPrice")) {
            Object obj = soapObject.getProperty("GrossProfitPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossProfitPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossProfitPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("NetProfitPercentage")) {
            Object obj = soapObject.getProperty("NetProfitPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                netProfitPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                netProfitPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("NetProfitPrice")) {
            Object obj = soapObject.getProperty("NetProfitPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                netProfitPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                netProfitPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LowestSingleUnitPurchasePrice")) {
            Object obj = soapObject.getProperty("LowestSingleUnitPurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lowestSingleUnitPurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lowestSingleUnitPurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitDimensionShortDescription")) {
            Object obj = soapObject.getProperty("PurchaseUnitDimensionShortDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitDimensionShortDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseUnitDimensionShortDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitDimensionDescription")) {
            Object obj = soapObject.getProperty("PurchaseUnitDimensionDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitDimensionDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseUnitDimensionDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitPackageShortDescription")) {
            Object obj = soapObject.getProperty("PurchaseUnitPackageShortDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitPackageShortDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseUnitPackageShortDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitPackageDescription")) {
            Object obj = soapObject.getProperty("PurchaseUnitPackageDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitPackageDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseUnitPackageDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitDimensionShortDescription")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitDimensionShortDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitDimensionShortDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseContentUnitDimensionShortDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitPackageShortDescription")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitPackageShortDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitPackageShortDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseContentUnitPackageShortDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitDimensionDescription")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitDimensionDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitDimensionDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseContentUnitDimensionDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitPackageDescription")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitPackageDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitPackageDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseContentUnitPackageDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("Telephone")) {
            Object obj = soapObject.getProperty("Telephone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                telephone = j.toString();
            } else if (obj != null && obj instanceof String) {
                telephone = (String) obj;
            }
        }
        if (soapObject.hasProperty("Fax")) {
            Object obj = soapObject.getProperty("Fax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                fax = j.toString();
            } else if (obj != null && obj instanceof String) {
                fax = (String) obj;
            }
        }
        if (soapObject.hasProperty("Email")) {
            Object obj = soapObject.getProperty("Email");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                email = j.toString();
            } else if (obj != null && obj instanceof String) {
                email = (String) obj;
            }
        }
        if (soapObject.hasProperty("ConsumerUnit")) {
            Object obj = soapObject.getProperty("ConsumerUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                consumerUnit = j.toString();
            } else if (obj != null && obj instanceof String) {
                consumerUnit = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseAssortmentDescription")) {
            Object obj = soapObject.getProperty("PurchaseAssortmentDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseAssortmentDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseAssortmentDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SeasonProfileDescription")) {
            Object obj = soapObject.getProperty("SeasonProfileDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                seasonProfileDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                seasonProfileDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("StatusCode")) {
            Object obj = soapObject.getProperty("StatusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                statusCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                statusCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("StatusDescription")) {
            Object obj = soapObject.getProperty("StatusDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                statusDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                statusDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("CollectionProductId")) {
            Object obj = soapObject.getProperty("CollectionProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                collectionProductId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                collectionProductId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CollectionParentProductId")) {
            Object obj = soapObject.getProperty("CollectionParentProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                collectionParentProductId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                collectionParentProductId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsCollection")) {
            Object obj = soapObject.getProperty("IsCollection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCollection = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isCollection = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAvailableForOrdering")) {
            Object obj = soapObject.getProperty("IsAvailableForOrdering");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAvailableForOrdering = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAvailableForOrdering = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsCancelled")) {
            Object obj = soapObject.getProperty("IsCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCancelled = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isCancelled = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("DefaultDeliveryDays")) {
            Object obj = soapObject.getProperty("DefaultDeliveryDays");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultDeliveryDays = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultDeliveryDays = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseDetailInfo")) {
            Object obj = soapObject.getProperty("PurchaseDetailInfo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseDetailInfo = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseDetailInfo = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductId")) {
            Object obj = soapObject.getProperty("ProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SupplierId")) {
            Object obj = soapObject.getProperty("SupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                supplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                supplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseStatusRowId")) {
            Object obj = soapObject.getProperty("PurchaseStatusRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseStatusRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseStatusRowId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ExternalCode")) {
            Object obj = soapObject.getProperty("ExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("OrderCode")) {
            Object obj = soapObject.getProperty("OrderCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                orderCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitBarcode")) {
            Object obj = soapObject.getProperty("PurchaseUnitBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitBarcode = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitBarcode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OrderMultiplier")) {
            Object obj = soapObject.getProperty("OrderMultiplier");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderMultiplier = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                orderMultiplier = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MinimumOrderQuantity")) {
            Object obj = soapObject.getProperty("MinimumOrderQuantity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                minimumOrderQuantity = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                minimumOrderQuantity = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitDimensionId")) {
            Object obj = soapObject.getProperty("PurchaseUnitDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitPackageId")) {
            Object obj = soapObject.getProperty("PurchaseUnitPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitToPurchaseContentUnitFactor")) {
            Object obj = soapObject.getProperty("PurchaseUnitToPurchaseContentUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitToPurchaseContentUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitToPurchaseContentUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitDimensionId")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseContentUnitDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitPackageId")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseContentUnitPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitToConsumerUnitFactor")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitToConsumerUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitToConsumerUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseContentUnitToConsumerUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("CbmPerSingleUnit")) {
            Object obj = soapObject.getProperty("CbmPerSingleUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cbmPerSingleUnit = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                cbmPerSingleUnit = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePricePerAmount")) {
            Object obj = soapObject.getProperty("PurchasePricePerAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePricePerAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchasePricePerAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossPurchasePrice")) {
            Object obj = soapObject.getProperty("GrossPurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePrice")) {
            Object obj = soapObject.getProperty("PurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsNetNet")) {
            Object obj = soapObject.getProperty("IsNetNet");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNetNet = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNetNet = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("OwnPurchasePrice")) {
            Object obj = soapObject.getProperty("OwnPurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ownPurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                ownPurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OwnPurchasePriceNote")) {
            Object obj = soapObject.getProperty("OwnPurchasePriceNote");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ownPurchasePriceNote = j.toString();
            } else if (obj != null && obj instanceof String) {
                ownPurchasePriceNote = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePriceType")) {
            Object obj = soapObject.getProperty("PurchasePriceType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePriceType = WS_Enums.PurchasePriceType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("OrganizationReference")) {
            Object obj = soapObject.getProperty("OrganizationReference");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                organizationReference = j.toString();
            } else if (obj != null && obj instanceof String) {
                organizationReference = (String) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationModifiedDateTime")) {
            Object obj = soapObject.getProperty("OrganizationModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                organizationModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                organizationModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastExchangeDateTime")) {
            Object obj = soapObject.getProperty("LastExchangeDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastExchangeDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastExchangeDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("IsPreferredSupplierRow")) {
            Object obj = soapObject.getProperty("IsPreferredSupplierRow");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isPreferredSupplierRow = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isPreferredSupplierRow = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Source")) {
            Object obj = soapObject.getProperty("Source");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                source = WS_Enums.DataSource.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsActive")) {
            Object obj = soapObject.getProperty("IsActive");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isActive = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isActive = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("SeasonProfileId")) {
            Object obj = soapObject.getProperty("SeasonProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                seasonProfileId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                seasonProfileId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CollectionBarcode")) {
            Object obj = soapObject.getProperty("CollectionBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                collectionBarcode = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                collectionBarcode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CollectionAmount")) {
            Object obj = soapObject.getProperty("CollectionAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                collectionAmount = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                collectionAmount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CollectionParentBarcode")) {
            Object obj = soapObject.getProperty("CollectionParentBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                collectionParentBarcode = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                collectionParentBarcode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("GrossPriceReductionPercentage")) {
            Object obj = soapObject.getProperty("GrossPriceReductionPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPriceReductionPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPriceReductionPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsDerived")) {
            Object obj = soapObject.getProperty("IsDerived");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isDerived = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isDerived = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationId")) {
            Object obj = soapObject.getProperty("OrganizationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                organizationId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                organizationId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId")) {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId")) {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime")) {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId")) {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return supplierNumber;
            case 1:
                return supplierGeneralName;
            case 2:
                return grossProfitPercentage;
            case 3:
                return grossProfitPrice;
            case 4:
                return netProfitPercentage;
            case 5:
                return netProfitPrice;
            case 6:
                return lowestSingleUnitPurchasePrice;
            case 7:
                return purchaseUnitDimensionShortDescription;
            case 8:
                return purchaseUnitDimensionDescription;
            case 9:
                return purchaseUnitPackageShortDescriptionField;
            case 10:
                return purchaseUnitPackageDescriptionField;
            case 11:
                return purchaseContentUnitDimensionShortDescription;
            case 12:
                return purchaseContentUnitPackageShortDescriptionField;
            case 13:
                return purchaseContentUnitDimensionDescription;
            case 14:
                return purchaseContentUnitPackageDescriptionField;
            case 15:
                return telephone;
            case 16:
                return fax;
            case 17:
                return email;
            case 18:
                return consumerUnit;
            case 19:
                return purchaseAssortmentDescription;
            case 20:
                return seasonProfileDescription;
            case 21:
                return statusCode;
            case 22:
                return statusDescription;
            case 23:
                return collectionProductId;
            case 24:
                return collectionParentProductId;
            case 25:
                return isCollection;
            case 26:
                return isAvailableForOrdering;
            case 27:
                return isCancelled;
            case 28:
                return defaultDeliveryDays;
            case 29:
                return purchaseDetailInfo;
            case 30:
                return productId;
            case 31:
                return supplierId;
            case 32:
                return purchaseStatusRowId;
            case 33:
                return externalCode;
            case 34:
                return orderCode;
            case 35:
                return purchaseUnitBarcode;
            case 36:
                return orderMultiplier;
            case 37:
                return minimumOrderQuantity;
            case 38:
                return purchaseUnitDimensionId;
            case 39:
                return purchaseUnitPackageIdField;
            case 40:
                return purchaseUnitToPurchaseContentUnitFactor;
            case 41:
                return purchaseContentUnitDimensionId;
            case 42:
                return purchaseContentUnitPackageIdField;
            case 43:
                return purchaseContentUnitToConsumerUnitFactor;
            case 44:
                return cbmPerSingleUnit;
            case 45:
                return purchasePricePerAmount;
            case 46:
                return grossPurchasePrice;
            case 47:
                return purchasePrice;
            case 48:
                return isNetNet;
            case 49:
                return ownPurchasePrice;
            case 50:
                return ownPurchasePriceNote;
            case 51:
                return purchasePriceType.toString();
            case 52:
                return organizationReference;
            case 53:
                return organizationModifiedDateTime;
            case 54:
                return lastExchangeDateTime;
            case 55:
                return isPreferredSupplierRow;
            case 56:
                return source.toString();
            case 57:
                return isActive;
            case 58:
                return seasonProfileId;
            case 59:
                return collectionBarcode;
            case 60:
                return collectionAmount;
            case 61:
                return collectionParentBarcode;
            case 62:
                return grossPriceReductionPercentage;
            case 63:
                return isDerived;
            case 64:
                return organizationId;
            case 65:
                return companyId;
            case 66:
                return createdByUserId;
            case 67:
                return createdDateTime;
            case 68:
                return lastModifiedByUserId;
            case 69:
                return lastModifiedDateTime;
            case 70:
                return itemId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 71;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = Long.class;
                info.name = "SupplierNumber";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SupplierGeneralName";
                break;
            case 2:
                info.type = Double.class;
                info.name = "GrossProfitPercentage";
                break;
            case 3:
                info.type = Double.class;
                info.name = "GrossProfitPrice";
                break;
            case 4:
                info.type = Double.class;
                info.name = "NetProfitPercentage";
                break;
            case 5:
                info.type = Double.class;
                info.name = "NetProfitPrice";
                break;
            case 6:
                info.type = Double.class;
                info.name = "LowestSingleUnitPurchasePrice";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseUnitDimensionShortDescription";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseUnitDimensionDescription";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseUnitPackageShortDescription";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseUnitPackageDescription";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseContentUnitDimensionShortDescription";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseContentUnitPackageShortDescription";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseContentUnitDimensionDescription";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseContentUnitPackageDescription";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Telephone";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Fax";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Email";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ConsumerUnit";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseAssortmentDescription";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SeasonProfileDescription";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StatusCode";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StatusDescription";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CollectionProductId";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CollectionParentProductId";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCollection";
                break;
            case 26:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAvailableForOrdering";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCancelled";
                break;
            case 28:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DefaultDeliveryDays";
                break;
            case 29:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseDetailInfo";
                break;
            case 30:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductId";
                break;
            case 31:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SupplierId";
                break;
            case 32:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseStatusRowId";
                break;
            case 33:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalCode";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderCode";
                break;
            case 35:
                info.type = Long.class;
                info.name = "PurchaseUnitBarcode";
                break;
            case 36:
                info.type = Double.class;
                info.name = "OrderMultiplier";
                break;
            case 37:
                info.type = Double.class;
                info.name = "MinimumOrderQuantity";
                break;
            case 38:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseUnitDimensionId";
                break;
            case 39:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseUnitPackageId";
                break;
            case 40:
                info.type = Double.class;
                info.name = "PurchaseUnitToPurchaseContentUnitFactor";
                break;
            case 41:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseContentUnitDimensionId";
                break;
            case 42:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseContentUnitPackageId";
                break;
            case 43:
                info.type = Double.class;
                info.name = "PurchaseContentUnitToConsumerUnitFactor";
                break;
            case 44:
                info.type = Double.class;
                info.name = "CbmPerSingleUnit";
                break;
            case 45:
                info.type = Double.class;
                info.name = "PurchasePricePerAmount";
                break;
            case 46:
                info.type = Double.class;
                info.name = "GrossPurchasePrice";
                break;
            case 47:
                info.type = Double.class;
                info.name = "PurchasePrice";
                break;
            case 48:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNetNet";
                break;
            case 49:
                info.type = Double.class;
                info.name = "OwnPurchasePrice";
                break;
            case 50:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OwnPurchasePriceNote";
                break;
            case 51:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchasePriceType";
                break;
            case 52:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrganizationReference";
                break;
            case 53:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrganizationModifiedDateTime";
                break;
            case 54:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastExchangeDateTime";
                break;
            case 55:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsPreferredSupplierRow";
                break;
            case 56:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Source";
                break;
            case 57:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsActive";
                break;
            case 58:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SeasonProfileId";
                break;
            case 59:
                info.type = Long.class;
                info.name = "CollectionBarcode";
                break;
            case 60:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CollectionAmount";
                break;
            case 61:
                info.type = Long.class;
                info.name = "CollectionParentBarcode";
                break;
            case 62:
                info.type = Double.class;
                info.name = "GrossPriceReductionPercentage";
                break;
            case 63:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsDerived";
                break;
            case 64:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OrganizationId";
                break;
            case 65:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 66:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 67:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 68:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 69:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 70:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }

//    @Override //    public String getInnerText() { //        return null; //    } // // //    @Override //    public void setInnerText(String s) { //    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
