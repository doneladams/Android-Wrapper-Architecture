package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/11/2017 5:10:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.Parcel;
import android.os.Parcelable;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class ViewProductInfoDiscount implements KvmSerializable, Parcelable {

    /*public long parentProductNumber;
    public String externalProductCode;
    public String externalProductDescription;
    public String externalProductNote1;
    public String classificationLevel1CodeField;
    public String classificationLevel1DescriptionField;
    public String classificationLevel2CodeField;
    public String classificationLevel2DescriptionField;
    public String classificationLevel3CodeField;
    public String classificationLevel3DescriptionField;
    public String classificationLevel4CodeField;
    public String classificationLevel4DescriptionField;
    public String classificationLevel5CodeField;
    public String classificationLevel5DescriptionField;
    public String brandCode;
    public String brandDescription;
    public String subBrandCode;
    public String subBrandDescription;
    public String contentIsoCode;
    public String contentIsoDescription;
    public String weightIsoDescription;
    public String sizeIsoDimensionDescription;
    public String sizeIsoDimensionPackageDescriptionField;
    public String productCategoryCode;
    public String productCategoryDescription;
    public boolean vatRequired;
    public int webshopClassificationIdField;
    public int defaultWebshopClassificationIdField;
    public String cashRegisterGroupCode;
    public String cashRegisterGroupShortDescription;
    public String cashRegisterGroupDescription;
    public long preferredSupplierNumber;
    public String preferredSupplierName;
    public String assortmentCode;
    public String assortmentDescription;
    public String articleGroupCode;
    public int vatId;
    public String vatCode;
    public String vatDescription;
    public double vatPercentage;
    public String saleUnitDimensionShortDescription;
    public String saleUnitDimensionDescription;
    public String saleUnitPackageShortDescriptionField;
    public String saleUnitPackageDescriptionField;
    public boolean isPurchaseAvailable;
    public long organizationProductNumber;
    public String colorDescription;
    public String sizeDescription;
    public String sizeTypeDescription;
    public String orderCode;
    public boolean isMaintainStock;
    public boolean doesMaintainStock;
    public double stock;
    public double freeStock;
    public double futureStock;
    public double openPurchaseOrders;
    public double openSaleOrders;
    public double openReservations;
    public double minimumStock;
    public double maximumStock;
    public WS_Enums.OrderMethod orderMethod;
    public double calculatedMinStock;
    public double calculatedMaxStock;
    public boolean manualMinMaxStock;
    public double purchaseUnitToPurchaseContentUnitFactor;
    public double orderMultiplier;
    public double minimumOrderQuantity = -1;
    public double grossPurchasePrice;
    public double purchasePrice;
    public double ownPurchasePrice;
    public int purchasePricePerAmount;
    public String ownPurchasePriceNote;
    public double margin;
    public double marginPercentage;
    public int defaultDeliveryDays;
    public int webshopProductItemId;
    public double storeGrossPrice;
    public double storeTypeGrossPrice;
    public String purchaseStatusRowDescription;
    public String purchaseStatusRowCode;
    public int cashRegisterGroupId;
    public WS_Enums.ProductState productState;
    public double appliedGrossPrice;
    public String productPosMessage;
    public boolean productPosMessageFound;
    public double grossPurchasePriceReductionPercentage;
    public int oldItemId;
    public int organizationId;
    public long productNumber;
    public long mainBarcode;
    public int barcodeTypeId;
    public String lastExchangeDateTime;
    public int saleLedgerId;
    public boolean isDerived;
    public int replacementProductId;
    public double advicePrice;
    public int articleGroupId;
    public int assortmentId;
    public int sizeTypeId;
    public int sizeId;
    public int colorId;
    public int warrantyId;
    public int transportClassIdField;
    public int labelClassIdField;
    public int locationClassIdField;
    public int brandId;
    public int subBrandId;
    public int posMessageId;
    public int disposalFeeId;
    public int productCombinationGroupId;
    public int classificationLevel1IdField;
    public int classificationLevel2IdField;
    public int classificationLevel3IdField;
    public int classificationLevel4IdField;
    public int classificationLevel5IdField;
    public int companyId;
    public double defaultSaleAmount;
    public double consumerUnitToSaleUnitFactor;
    public int saleUnitDimensionId;
    public int saleUnitPackageIdField;
    public String description;
    public String alternateDescription;
    public String posDescription;
    public String formattedDescription;
    public String exchangeRemarks;
    public String externalCode;
    public int externalProductId;
    public double grossPrice;
    public String information;
    public boolean isAllowMultiplePricing;
    public boolean isAllowPriceModification;
    public boolean isSale;
    public boolean isProductGroup;
    public boolean isConsignmentProduct;
    public boolean isScaleIntegration;
    public boolean isKitchenArticle;
    public boolean isCancelled;
    public boolean isTrackAndTraceProduct;
    public String note1;
    public String note2;
    public String note3;
    public String note4;
    public int plu;
    public int followupNumber;
    public int preferredSupplierId;
    public int productCategoryId;
    public int freeTableId;
    public String searchText;
    public int sizeIsoDimensionIdArticle;
    public double lengthArticle;
    public double heightArticle;
    public double widthArticle;
    public double depthArticle;
    public int sizeIsoDimensionIdPackageField;
    public double lengthPackageField;
    public double heightPackageField;
    public double widthPackageField;
    public double depthPackageField;
    public int contentIsoDimensionId;
    public int contentIsoPackageIdField;
    public double netContent;
    public int weightIsoDimensionId;
    public double netWeight;
    public double grossWeight;
    public String allowanceCode;
    public double allowanceAmount;
    public WS_Enums.MarkingCodeType markingCodeType;
    public boolean isAllowDiscountPercentageModification;
    public boolean isAskForPriceInPos;
    public boolean isAskForAmountInPos;
    public boolean isNoDiscountAgreementDiscount;
    public boolean isNoSavings;
    public boolean isNoDiscounts;
    public boolean isNoDiscountOnDiscount;
    public boolean isNoMixedMatchDiscount;
    public boolean isPriceZeroAllowed;
    public boolean isNoQuantityPriceBreakDiscount;
    public boolean isSerialAdministration;
    public boolean isAskForDescriptionInPos;
    public boolean isIncludeInStockValue;
    public String storageLocation;
    public WS_Enums.RelatedProductsType relatedProductsType;
    public int parentProductId;
    public String cbsCode;
    public boolean isGiftCard;
    public int giftCardTypeId;
    public boolean isCollection;
    public boolean printLabel;
    public boolean isPriceBlocked;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;*/
    public int itemId;
    /*private boolean isSelected;
    public String discountType = "";
    public double discountAmount = 0;
    public double newPrice = 0;
    public int alreadyAdded = 0;

    public boolean isSelected() {
        return isSelected;
    }

    public void setSelected(boolean selected) {
        isSelected = selected;
    }*/


    public ViewProductInfoDiscount() {
    }

    public ViewProductInfoDiscount(SoapObject soapObject) {
        if (soapObject == null)
            return;
        /*if (soapObject.hasProperty("ParentProductNumber")) {
            Object obj = soapObject.getProperty("ParentProductNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                parentProductNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                parentProductNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ExternalProductCode")) {
            Object obj = soapObject.getProperty("ExternalProductCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalProductCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalProductCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExternalProductDescription")) {
            Object obj = soapObject.getProperty("ExternalProductDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalProductDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalProductDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExternalProductNote1")) {
            Object obj = soapObject.getProperty("ExternalProductNote1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalProductNote1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalProductNote1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel1Code")) {
            Object obj = soapObject.getProperty("ClassificationLevel1Code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel1CodeField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel1CodeField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel1Description")) {
            Object obj = soapObject.getProperty("ClassificationLevel1Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel1DescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel1DescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel2Code")) {
            Object obj = soapObject.getProperty("ClassificationLevel2Code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel2CodeField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel2CodeField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel2Description")) {
            Object obj = soapObject.getProperty("ClassificationLevel2Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel2DescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel2DescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel3Code")) {
            Object obj = soapObject.getProperty("ClassificationLevel3Code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel3CodeField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel3CodeField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel3Description")) {
            Object obj = soapObject.getProperty("ClassificationLevel3Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel3DescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel3DescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel4Code")) {
            Object obj = soapObject.getProperty("ClassificationLevel4Code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel4CodeField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel4CodeField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel4Description")) {
            Object obj = soapObject.getProperty("ClassificationLevel4Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel4DescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel4DescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel5Code")) {
            Object obj = soapObject.getProperty("ClassificationLevel5Code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel5CodeField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel5CodeField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel5Description")) {
            Object obj = soapObject.getProperty("ClassificationLevel5Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel5DescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                classificationLevel5DescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("BrandCode")) {
            Object obj = soapObject.getProperty("BrandCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                brandCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("BrandDescription")) {
            Object obj = soapObject.getProperty("BrandDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                brandDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SubBrandCode")) {
            Object obj = soapObject.getProperty("SubBrandCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                subBrandCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                subBrandCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("SubBrandDescription")) {
            Object obj = soapObject.getProperty("SubBrandDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                subBrandDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                subBrandDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ContentIsoCode")) {
            Object obj = soapObject.getProperty("ContentIsoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                contentIsoCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                contentIsoCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ContentIsoDescription")) {
            Object obj = soapObject.getProperty("ContentIsoDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                contentIsoDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                contentIsoDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("WeightIsoDescription")) {
            Object obj = soapObject.getProperty("WeightIsoDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                weightIsoDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                weightIsoDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeIsoDimensionDescription")) {
            Object obj = soapObject.getProperty("SizeIsoDimensionDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeIsoDimensionDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                sizeIsoDimensionDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeIsoDimensionPackageDescription")) {
            Object obj = soapObject.getProperty("SizeIsoDimensionPackageDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeIsoDimensionPackageDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                sizeIsoDimensionPackageDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductCategoryCode")) {
            Object obj = soapObject.getProperty("ProductCategoryCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productCategoryCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                productCategoryCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductCategoryDescription")) {
            Object obj = soapObject.getProperty("ProductCategoryDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productCategoryDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                productCategoryDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("VatRequired")) {
            Object obj = soapObject.getProperty("VatRequired");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatRequired = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                vatRequired = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("WebshopClassificationId")) {
            Object obj = soapObject.getProperty("WebshopClassificationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                webshopClassificationIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                webshopClassificationIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DefaultWebshopClassificationId")) {
            Object obj = soapObject.getProperty("DefaultWebshopClassificationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultWebshopClassificationIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultWebshopClassificationIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CashRegisterGroupCode")) {
            Object obj = soapObject.getProperty("CashRegisterGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cashRegisterGroupCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                cashRegisterGroupCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("CashRegisterGroupShortDescription")) {
            Object obj = soapObject.getProperty("CashRegisterGroupShortDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cashRegisterGroupShortDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                cashRegisterGroupShortDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("CashRegisterGroupDescription")) {
            Object obj = soapObject.getProperty("CashRegisterGroupDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cashRegisterGroupDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                cashRegisterGroupDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierNumber")) {
            Object obj = soapObject.getProperty("PreferredSupplierNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                preferredSupplierNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierName")) {
            Object obj = soapObject.getProperty("PreferredSupplierName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierName = j.toString();
            } else if (obj != null && obj instanceof String) {
                preferredSupplierName = (String) obj;
            }
        }
        if (soapObject.hasProperty("AssortmentCode")) {
            Object obj = soapObject.getProperty("AssortmentCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                assortmentCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                assortmentCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("AssortmentDescription")) {
            Object obj = soapObject.getProperty("AssortmentDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                assortmentDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                assortmentDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ArticleGroupCode")) {
            Object obj = soapObject.getProperty("ArticleGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                articleGroupCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                articleGroupCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("VatId")) {
            Object obj = soapObject.getProperty("VatId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatCode")) {
            Object obj = soapObject.getProperty("VatCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                vatCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("VatDescription")) {
            Object obj = soapObject.getProperty("VatDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                vatDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("VatPercentage")) {
            Object obj = soapObject.getProperty("VatPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitDimensionShortDescription")) {
            Object obj = soapObject.getProperty("SaleUnitDimensionShortDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitDimensionShortDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleUnitDimensionShortDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitDimensionDescription")) {
            Object obj = soapObject.getProperty("SaleUnitDimensionDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitDimensionDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleUnitDimensionDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitPackageShortDescription")) {
            Object obj = soapObject.getProperty("SaleUnitPackageShortDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitPackageShortDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleUnitPackageShortDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitPackageDescription")) {
            Object obj = soapObject.getProperty("SaleUnitPackageDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitPackageDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleUnitPackageDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("IsPurchaseAvailable")) {
            Object obj = soapObject.getProperty("IsPurchaseAvailable");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isPurchaseAvailable = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isPurchaseAvailable = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationProductNumber")) {
            Object obj = soapObject.getProperty("OrganizationProductNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                organizationProductNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                organizationProductNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ColorDescription")) {
            Object obj = soapObject.getProperty("ColorDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                colorDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                colorDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeDescription")) {
            Object obj = soapObject.getProperty("SizeDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                sizeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeTypeDescription")) {
            Object obj = soapObject.getProperty("SizeTypeDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeTypeDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                sizeTypeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("OrderCode")) {
            Object obj = soapObject.getProperty("OrderCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                orderCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("IsMaintainStock")) {
            Object obj = soapObject.getProperty("IsMaintainStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isMaintainStock = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isMaintainStock = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("DoesMaintainStock")) {
            Object obj = soapObject.getProperty("DoesMaintainStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                doesMaintainStock = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                doesMaintainStock = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Stock")) {
            Object obj = soapObject.getProperty("Stock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                stock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                stock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FreeStock")) {
            Object obj = soapObject.getProperty("FreeStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                freeStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                freeStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FutureStock")) {
            Object obj = soapObject.getProperty("FutureStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                futureStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                futureStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenPurchaseOrders")) {
            Object obj = soapObject.getProperty("OpenPurchaseOrders");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openPurchaseOrders = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openPurchaseOrders = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenSaleOrders")) {
            Object obj = soapObject.getProperty("OpenSaleOrders");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openSaleOrders = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openSaleOrders = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenReservations")) {
            Object obj = soapObject.getProperty("OpenReservations");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openReservations = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openReservations = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MinimumStock")) {
            Object obj = soapObject.getProperty("MinimumStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                minimumStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                minimumStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MaximumStock")) {
            Object obj = soapObject.getProperty("MaximumStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                maximumStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                maximumStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OrderMethod")) {
            Object obj = soapObject.getProperty("OrderMethod");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderMethod = WS_Enums.OrderMethod.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("CalculatedMinStock")) {
            Object obj = soapObject.getProperty("CalculatedMinStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculatedMinStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                calculatedMinStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("CalculatedMaxStock")) {
            Object obj = soapObject.getProperty("CalculatedMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculatedMaxStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                calculatedMaxStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ManualMinMaxStock")) {
            Object obj = soapObject.getProperty("ManualMinMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                manualMinMaxStock = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                manualMinMaxStock = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitToPurchaseContentUnitFactor")) {
            Object obj = soapObject.getProperty("PurchaseUnitToPurchaseContentUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitToPurchaseContentUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitToPurchaseContentUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OrderMultiplier")) {
            Object obj = soapObject.getProperty("OrderMultiplier");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderMultiplier = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                orderMultiplier = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MinimumOrderQuantity")) {
            Object obj = soapObject.getProperty("MinimumOrderQuantity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                minimumOrderQuantity = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                minimumOrderQuantity = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossPurchasePrice")) {
            Object obj = soapObject.getProperty("GrossPurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePrice")) {
            Object obj = soapObject.getProperty("PurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OwnPurchasePrice")) {
            Object obj = soapObject.getProperty("OwnPurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ownPurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                ownPurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePricePerAmount")) {
            Object obj = soapObject.getProperty("PurchasePricePerAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePricePerAmount = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchasePricePerAmount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OwnPurchasePriceNote")) {
            Object obj = soapObject.getProperty("OwnPurchasePriceNote");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ownPurchasePriceNote = j.toString();
            } else if (obj != null && obj instanceof String) {
                ownPurchasePriceNote = (String) obj;
            }
        }
        if (soapObject.hasProperty("Margin")) {
            Object obj = soapObject.getProperty("Margin");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                margin = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                margin = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MarginPercentage")) {
            Object obj = soapObject.getProperty("MarginPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                marginPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                marginPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DefaultDeliveryDays")) {
            Object obj = soapObject.getProperty("DefaultDeliveryDays");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultDeliveryDays = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultDeliveryDays = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("WebshopProductItemId")) {
            Object obj = soapObject.getProperty("WebshopProductItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                webshopProductItemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                webshopProductItemId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StoreGrossPrice")) {
            Object obj = soapObject.getProperty("StoreGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storeGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                storeGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("StoreTypeGrossPrice")) {
            Object obj = soapObject.getProperty("StoreTypeGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storeTypeGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                storeTypeGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseStatusRowDescription")) {
            Object obj = soapObject.getProperty("PurchaseStatusRowDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseStatusRowDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseStatusRowDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseStatusRowCode")) {
            Object obj = soapObject.getProperty("PurchaseStatusRowCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseStatusRowCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseStatusRowCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("CashRegisterGroupId")) {
            Object obj = soapObject.getProperty("CashRegisterGroupId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cashRegisterGroupId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                cashRegisterGroupId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductState")) {
            Object obj = soapObject.getProperty("ProductState");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productState = WS_Enums.ProductState.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("AppliedGrossPrice")) {
            Object obj = soapObject.getProperty("AppliedGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                appliedGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                appliedGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ProductPosMessage")) {
            Object obj = soapObject.getProperty("ProductPosMessage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productPosMessage = j.toString();
            } else if (obj != null && obj instanceof String) {
                productPosMessage = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductPosMessageFound")) {
            Object obj = soapObject.getProperty("ProductPosMessageFound");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productPosMessageFound = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                productPosMessageFound = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("GrossPurchasePriceReductionPercentage")) {
            Object obj = soapObject.getProperty("GrossPurchasePriceReductionPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPurchasePriceReductionPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPurchasePriceReductionPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OldItemId")) {
            Object obj = soapObject.getProperty("OldItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                oldItemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                oldItemId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationId")) {
            Object obj = soapObject.getProperty("OrganizationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                organizationId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                organizationId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductNumber")) {
            Object obj = soapObject.getProperty("ProductNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("MainBarcode")) {
            Object obj = soapObject.getProperty("MainBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mainBarcode = Long.parseLong(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mainBarcode = (Long) obj;
            }
        }
        if (soapObject.hasProperty("BarcodeTypeId")) {
            Object obj = soapObject.getProperty("BarcodeTypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                barcodeTypeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                barcodeTypeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastExchangeDateTime")) {
            Object obj = soapObject.getProperty("LastExchangeDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastExchangeDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastExchangeDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleLedgerId")) {
            Object obj = soapObject.getProperty("SaleLedgerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleLedgerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleLedgerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsDerived")) {
            Object obj = soapObject.getProperty("IsDerived");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isDerived = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isDerived = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ReplacementProductId")) {
            Object obj = soapObject.getProperty("ReplacementProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                replacementProductId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                replacementProductId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("AdvicePrice")) {
            Object obj = soapObject.getProperty("AdvicePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                advicePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                advicePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ArticleGroupId")) {
            Object obj = soapObject.getProperty("ArticleGroupId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                articleGroupId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                articleGroupId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("AssortmentId")) {
            Object obj = soapObject.getProperty("AssortmentId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                assortmentId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                assortmentId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SizeTypeId")) {
            Object obj = soapObject.getProperty("SizeTypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeTypeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                sizeTypeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SizeId")) {
            Object obj = soapObject.getProperty("SizeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                sizeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ColorId")) {
            Object obj = soapObject.getProperty("ColorId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                colorId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                colorId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("WarrantyId")) {
            Object obj = soapObject.getProperty("WarrantyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                warrantyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                warrantyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TransportClassId")) {
            Object obj = soapObject.getProperty("TransportClassId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                transportClassIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                transportClassIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LabelClassId")) {
            Object obj = soapObject.getProperty("LabelClassId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                labelClassIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                labelClassIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LocationClassId")) {
            Object obj = soapObject.getProperty("LocationClassId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                locationClassIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                locationClassIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("BrandId")) {
            Object obj = soapObject.getProperty("BrandId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                brandId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SubBrandId")) {
            Object obj = soapObject.getProperty("SubBrandId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                subBrandId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                subBrandId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PosMessageId")) {
            Object obj = soapObject.getProperty("PosMessageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                posMessageId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                posMessageId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DisposalFeeId")) {
            Object obj = soapObject.getProperty("DisposalFeeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                disposalFeeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                disposalFeeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductCombinationGroupId")) {
            Object obj = soapObject.getProperty("ProductCombinationGroupId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productCombinationGroupId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productCombinationGroupId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel1Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel1Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel1IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel1IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel2Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel2Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel2IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel2IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel3Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel3Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel3IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel3IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel4Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel4Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel4IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel4IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel5Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel5Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel5IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel5IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId")) {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DefaultSaleAmount")) {
            Object obj = soapObject.getProperty("DefaultSaleAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultSaleAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultSaleAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ConsumerUnitToSaleUnitFactor")) {
            Object obj = soapObject.getProperty("ConsumerUnitToSaleUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                consumerUnitToSaleUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                consumerUnitToSaleUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitDimensionId")) {
            Object obj = soapObject.getProperty("SaleUnitDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleUnitDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitPackageId")) {
            Object obj = soapObject.getProperty("SaleUnitPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleUnitPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Description")) {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                description = j.toString();
            } else if (obj != null && obj instanceof String) {
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("AlternateDescription")) {
            Object obj = soapObject.getProperty("AlternateDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                alternateDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                alternateDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("PosDescription")) {
            Object obj = soapObject.getProperty("PosDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                posDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                posDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("FormattedDescription")) {
            Object obj = soapObject.getProperty("FormattedDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                formattedDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                formattedDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExchangeRemarks")) {
            Object obj = soapObject.getProperty("ExchangeRemarks");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                exchangeRemarks = j.toString();
            } else if (obj != null && obj instanceof String) {
                exchangeRemarks = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExternalCode")) {
            Object obj = soapObject.getProperty("ExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExternalProductId")) {
            Object obj = soapObject.getProperty("ExternalProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalProductId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                externalProductId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("GrossPrice")) {
            Object obj = soapObject.getProperty("GrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Information")) {
            Object obj = soapObject.getProperty("Information");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                information = j.toString();
            } else if (obj != null && obj instanceof String) {
                information = (String) obj;
            }
        }
        if (soapObject.hasProperty("IsAllowMultiplePricing")) {
            Object obj = soapObject.getProperty("IsAllowMultiplePricing");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAllowMultiplePricing = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAllowMultiplePricing = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAllowPriceModification")) {
            Object obj = soapObject.getProperty("IsAllowPriceModification");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAllowPriceModification = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAllowPriceModification = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsSale")) {
            Object obj = soapObject.getProperty("IsSale");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isSale = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isSale = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsProductGroup")) {
            Object obj = soapObject.getProperty("IsProductGroup");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isProductGroup = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isProductGroup = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsConsignmentProduct")) {
            Object obj = soapObject.getProperty("IsConsignmentProduct");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isConsignmentProduct = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isConsignmentProduct = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsScaleIntegration")) {
            Object obj = soapObject.getProperty("IsScaleIntegration");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isScaleIntegration = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isScaleIntegration = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsKitchenArticle")) {
            Object obj = soapObject.getProperty("IsKitchenArticle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isKitchenArticle = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isKitchenArticle = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsCancelled")) {
            Object obj = soapObject.getProperty("IsCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCancelled = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isCancelled = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsTrackAndTraceProduct")) {
            Object obj = soapObject.getProperty("IsTrackAndTraceProduct");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isTrackAndTraceProduct = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isTrackAndTraceProduct = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Note1")) {
            Object obj = soapObject.getProperty("Note1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note2")) {
            Object obj = soapObject.getProperty("Note2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note2 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note3")) {
            Object obj = soapObject.getProperty("Note3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note3 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note4")) {
            Object obj = soapObject.getProperty("Note4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note4 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note4 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Plu")) {
            Object obj = soapObject.getProperty("Plu");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                plu = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                plu = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("FollowupNumber")) {
            Object obj = soapObject.getProperty("FollowupNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                followupNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                followupNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierId")) {
            Object obj = soapObject.getProperty("PreferredSupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                preferredSupplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductCategoryId")) {
            Object obj = soapObject.getProperty("ProductCategoryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productCategoryId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productCategoryId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("FreeTableId")) {
            Object obj = soapObject.getProperty("FreeTableId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                freeTableId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                freeTableId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SearchText")) {
            Object obj = soapObject.getProperty("SearchText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                searchText = j.toString();
            } else if (obj != null && obj instanceof String) {
                searchText = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeIsoDimensionIdArticle")) {
            Object obj = soapObject.getProperty("SizeIsoDimensionIdArticle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeIsoDimensionIdArticle = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                sizeIsoDimensionIdArticle = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LengthArticle")) {
            Object obj = soapObject.getProperty("LengthArticle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lengthArticle = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lengthArticle = (Double) obj;
            }
        }
        if (soapObject.hasProperty("HeightArticle")) {
            Object obj = soapObject.getProperty("HeightArticle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                heightArticle = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                heightArticle = (Double) obj;
            }
        }
        if (soapObject.hasProperty("WidthArticle")) {
            Object obj = soapObject.getProperty("WidthArticle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                widthArticle = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                widthArticle = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DepthArticle")) {
            Object obj = soapObject.getProperty("DepthArticle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                depthArticle = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                depthArticle = (Double) obj;
            }
        }
        if (soapObject.hasProperty("SizeIsoDimensionIdPackage")) {
            Object obj = soapObject.getProperty("SizeIsoDimensionIdPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeIsoDimensionIdPackageField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                sizeIsoDimensionIdPackageField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LengthPackage")) {
            Object obj = soapObject.getProperty("LengthPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lengthPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lengthPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("HeightPackage")) {
            Object obj = soapObject.getProperty("HeightPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                heightPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                heightPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("WidthPackage")) {
            Object obj = soapObject.getProperty("WidthPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                widthPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                widthPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DepthPackage")) {
            Object obj = soapObject.getProperty("DepthPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                depthPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                depthPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ContentIsoDimensionId")) {
            Object obj = soapObject.getProperty("ContentIsoDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                contentIsoDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                contentIsoDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ContentIsoPackageId")) {
            Object obj = soapObject.getProperty("ContentIsoPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                contentIsoPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                contentIsoPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NetContent")) {
            Object obj = soapObject.getProperty("NetContent");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                netContent = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                netContent = (Double) obj;
            }
        }
        if (soapObject.hasProperty("WeightIsoDimensionId")) {
            Object obj = soapObject.getProperty("WeightIsoDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                weightIsoDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                weightIsoDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NetWeight")) {
            Object obj = soapObject.getProperty("NetWeight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                netWeight = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                netWeight = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossWeight")) {
            Object obj = soapObject.getProperty("GrossWeight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossWeight = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossWeight = (Double) obj;
            }
        }
        if (soapObject.hasProperty("AllowanceCode")) {
            Object obj = soapObject.getProperty("AllowanceCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                allowanceCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                allowanceCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("AllowanceAmount")) {
            Object obj = soapObject.getProperty("AllowanceAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                allowanceAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                allowanceAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MarkingCodeType")) {
            Object obj = soapObject.getProperty("MarkingCodeType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                markingCodeType = WS_Enums.MarkingCodeType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsAllowDiscountPercentageModification")) {
            Object obj = soapObject.getProperty("IsAllowDiscountPercentageModification");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAllowDiscountPercentageModification = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAllowDiscountPercentageModification = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAskForPriceInPos")) {
            Object obj = soapObject.getProperty("IsAskForPriceInPos");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAskForPriceInPos = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAskForPriceInPos = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAskForAmountInPos")) {
            Object obj = soapObject.getProperty("IsAskForAmountInPos");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAskForAmountInPos = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAskForAmountInPos = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscountAgreementDiscount")) {
            Object obj = soapObject.getProperty("IsNoDiscountAgreementDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscountAgreementDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscountAgreementDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoSavings")) {
            Object obj = soapObject.getProperty("IsNoSavings");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoSavings = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoSavings = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscounts")) {
            Object obj = soapObject.getProperty("IsNoDiscounts");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscounts = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscounts = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscountOnDiscount")) {
            Object obj = soapObject.getProperty("IsNoDiscountOnDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscountOnDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscountOnDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoMixedMatchDiscount")) {
            Object obj = soapObject.getProperty("IsNoMixedMatchDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoMixedMatchDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoMixedMatchDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsPriceZeroAllowed")) {
            Object obj = soapObject.getProperty("IsPriceZeroAllowed");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isPriceZeroAllowed = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isPriceZeroAllowed = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoQuantityPriceBreakDiscount")) {
            Object obj = soapObject.getProperty("IsNoQuantityPriceBreakDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoQuantityPriceBreakDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoQuantityPriceBreakDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsSerialAdministration")) {
            Object obj = soapObject.getProperty("IsSerialAdministration");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isSerialAdministration = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isSerialAdministration = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAskForDescriptionInPos")) {
            Object obj = soapObject.getProperty("IsAskForDescriptionInPos");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAskForDescriptionInPos = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAskForDescriptionInPos = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsIncludeInStockValue")) {
            Object obj = soapObject.getProperty("IsIncludeInStockValue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isIncludeInStockValue = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isIncludeInStockValue = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("StorageLocation")) {
            Object obj = soapObject.getProperty("StorageLocation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storageLocation = j.toString();
            } else if (obj != null && obj instanceof String) {
                storageLocation = (String) obj;
            }
        }
        if (soapObject.hasProperty("RelatedProductsType")) {
            Object obj = soapObject.getProperty("RelatedProductsType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                relatedProductsType = WS_Enums.RelatedProductsType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("ParentProductId")) {
            Object obj = soapObject.getProperty("ParentProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                parentProductId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                parentProductId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CbsCode")) {
            Object obj = soapObject.getProperty("CbsCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cbsCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                cbsCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("IsGiftCard")) {
            Object obj = soapObject.getProperty("IsGiftCard");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isGiftCard = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isGiftCard = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("GiftCardTypeId")) {
            Object obj = soapObject.getProperty("GiftCardTypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                giftCardTypeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                giftCardTypeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsCollection")) {
            Object obj = soapObject.getProperty("IsCollection");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCollection = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isCollection = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PrintLabel")) {
            Object obj = soapObject.getProperty("PrintLabel");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                printLabel = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                printLabel = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsPriceBlocked")) {
            Object obj = soapObject.getProperty("IsPriceBlocked");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isPriceBlocked = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isPriceBlocked = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId")) {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime")) {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId")) {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }*/
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            /*case 0:
                return parentProductNumber;
            case 1:
                return externalProductCode;
            case 2:
                return externalProductDescription;
            case 3:
                return externalProductNote1;
            case 4:
                return classificationLevel1CodeField;
            case 5:
                return classificationLevel1DescriptionField;
            case 6:
                return classificationLevel2CodeField;
            case 7:
                return classificationLevel2DescriptionField;
            case 8:
                return classificationLevel3CodeField;
            case 9:
                return classificationLevel3DescriptionField;
            case 10:
                return classificationLevel4CodeField;
            case 11:
                return classificationLevel4DescriptionField;
            case 12:
                return classificationLevel5CodeField;
            case 13:
                return classificationLevel5DescriptionField;
            case 14:
                return brandCode;
            case 15:
                return brandDescription;
            case 16:
                return subBrandCode;
            case 17:
                return subBrandDescription;
            case 18:
                return contentIsoCode;
            case 19:
                return contentIsoDescription;
            case 20:
                return weightIsoDescription;
            case 21:
                return sizeIsoDimensionDescription;
            case 22:
                return sizeIsoDimensionPackageDescriptionField;
            case 23:
                return productCategoryCode;
            case 24:
                return productCategoryDescription;
            case 25:
                return vatRequired;
            case 26:
                return webshopClassificationIdField;
            case 27:
                return defaultWebshopClassificationIdField;
            case 28:
                return cashRegisterGroupCode;
            case 29:
                return cashRegisterGroupShortDescription;
            case 30:
                return cashRegisterGroupDescription;
            case 31:
                return preferredSupplierNumber;
            case 32:
                return preferredSupplierName;
            case 33:
                return assortmentCode;
            case 34:
                return assortmentDescription;
            case 35:
                return articleGroupCode;
            case 36:
                return vatId;
            case 37:
                return vatCode;
            case 38:
                return vatDescription;
            case 39:
                return vatPercentage;
            case 40:
                return saleUnitDimensionShortDescription;
            case 41:
                return saleUnitDimensionDescription;
            case 42:
                return saleUnitPackageShortDescriptionField;
            case 43:
                return saleUnitPackageDescriptionField;
            case 44:
                return isPurchaseAvailable;
            case 45:
                return organizationProductNumber;
            case 46:
                return colorDescription;
            case 47:
                return sizeDescription;
            case 48:
                return sizeTypeDescription;
            case 49:
                return orderCode;
            case 50:
                return isMaintainStock;
            case 51:
                return doesMaintainStock;
            case 52:
                return stock;
            case 53:
                return freeStock;
            case 54:
                return futureStock;
            case 55:
                return openPurchaseOrders;
            case 56:
                return openSaleOrders;
            case 57:
                return openReservations;
            case 58:
                return minimumStock;
            case 59:
                return maximumStock;
            case 60:
                return orderMethod.toString();
            case 61:
                return calculatedMinStock;
            case 62:
                return calculatedMaxStock;
            case 63:
                return manualMinMaxStock;
            case 64:
                return purchaseUnitToPurchaseContentUnitFactor;
            case 65:
                return orderMultiplier;
            case 66:
                return minimumOrderQuantity;
            case 67:
                return grossPurchasePrice;
            case 68:
                return purchasePrice;
            case 69:
                return ownPurchasePrice;
            case 70:
                return purchasePricePerAmount;
            case 71:
                return ownPurchasePriceNote;
            case 72:
                return margin;
            case 73:
                return marginPercentage;
            case 74:
                return defaultDeliveryDays;
            case 75:
                return webshopProductItemId;
            case 76:
                return storeGrossPrice;
            case 77:
                return storeTypeGrossPrice;
            case 78:
                return purchaseStatusRowDescription;
            case 79:
                return purchaseStatusRowCode;
            case 80:
                return cashRegisterGroupId;
            case 81:
                return productState.toString();
            case 82:
                return appliedGrossPrice;
            case 83:
                return productPosMessage;
            case 84:
                return productPosMessageFound;
            case 85:
                return grossPurchasePriceReductionPercentage;
            case 86:
                return oldItemId;
            case 87:
                return organizationId;
            case 88:
                return productNumber;
            case 89:
                return mainBarcode;
            case 90:
                return barcodeTypeId;
            case 91:
                return lastExchangeDateTime;
            case 92:
                return saleLedgerId;
            case 93:
                return isDerived;
            case 94:
                return replacementProductId;
            case 95:
                return advicePrice;
            case 96:
                return articleGroupId;
            case 97:
                return assortmentId;
            case 98:
                return sizeTypeId;
            case 99:
                return sizeId;
            case 100:
                return colorId;
            case 101:
                return warrantyId;
            case 102:
                return transportClassIdField;
            case 103:
                return labelClassIdField;
            case 104:
                return locationClassIdField;
            case 105:
                return brandId;
            case 106:
                return subBrandId;
            case 107:
                return posMessageId;
            case 108:
                return disposalFeeId;
            case 109:
                return productCombinationGroupId;
            case 110:
                return classificationLevel1IdField;
            case 111:
                return classificationLevel2IdField;
            case 112:
                return classificationLevel3IdField;
            case 113:
                return classificationLevel4IdField;
            case 114:
                return classificationLevel5IdField;
            case 115:
                return companyId;
            case 116:
                return defaultSaleAmount;
            case 117:
                return consumerUnitToSaleUnitFactor;
            case 118:
                return saleUnitDimensionId;
            case 119:
                return saleUnitPackageIdField;
            case 120:
                return description;
            case 121:
                return alternateDescription;
            case 122:
                return posDescription;
            case 123:
                return formattedDescription;
            case 124:
                return exchangeRemarks;
            case 125:
                return externalCode;
            case 126:
                return externalProductId;
            case 127:
                return grossPrice;
            case 128:
                return information;
            case 129:
                return isAllowMultiplePricing;
            case 130:
                return isAllowPriceModification;
            case 131:
                return isSale;
            case 132:
                return isProductGroup;
            case 133:
                return isConsignmentProduct;
            case 134:
                return isScaleIntegration;
            case 135:
                return isKitchenArticle;
            case 136:
                return isCancelled;
            case 137:
                return isTrackAndTraceProduct;
            case 138:
                return note1;
            case 139:
                return note2;
            case 140:
                return note3;
            case 141:
                return note4;
            case 142:
                return plu;
            case 143:
                return followupNumber;
            case 144:
                return preferredSupplierId;
            case 145:
                return productCategoryId;
            case 146:
                return freeTableId;
            case 147:
                return searchText;
            case 148:
                return sizeIsoDimensionIdArticle;
            case 149:
                return lengthArticle;
            case 150:
                return heightArticle;
            case 151:
                return widthArticle;
            case 152:
                return depthArticle;
            case 153:
                return sizeIsoDimensionIdPackageField;
            case 154:
                return lengthPackageField;
            case 155:
                return heightPackageField;
            case 156:
                return widthPackageField;
            case 157:
                return depthPackageField;
            case 158:
                return contentIsoDimensionId;
            case 159:
                return contentIsoPackageIdField;
            case 160:
                return netContent;
            case 161:
                return weightIsoDimensionId;
            case 162:
                return netWeight;
            case 163:
                return grossWeight;
            case 164:
                return allowanceCode;
            case 165:
                return allowanceAmount;
            case 166:
                return markingCodeType.toString();
            case 167:
                return isAllowDiscountPercentageModification;
            case 168:
                return isAskForPriceInPos;
            case 169:
                return isAskForAmountInPos;
            case 170:
                return isNoDiscountAgreementDiscount;
            case 171:
                return isNoSavings;
            case 172:
                return isNoDiscounts;
            case 173:
                return isNoDiscountOnDiscount;
            case 174:
                return isNoMixedMatchDiscount;
            case 175:
                return isPriceZeroAllowed;
            case 176:
                return isNoQuantityPriceBreakDiscount;
            case 177:
                return isSerialAdministration;
            case 178:
                return isAskForDescriptionInPos;
            case 179:
                return isIncludeInStockValue;
            case 180:
                return storageLocation;
            case 181:
                return relatedProductsType.toString();
            case 182:
                return parentProductId;
            case 183:
                return cbsCode;
            case 184:
                return isGiftCard;
            case 185:
                return giftCardTypeId;
            case 186:
                return isCollection;
            case 187:
                return printLabel;
            case 188:
                return isPriceBlocked;
            case 189:
                return createdByUserId;
            case 190:
                return createdDateTime;
            case 191:
                return lastModifiedByUserId;
            case 192:
                return lastModifiedDateTime;*/
            case 0:
                return itemId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 1;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            /*case 0:
                info.type = Long.class;
                info.name = "ParentProductNumber";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalProductCode";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalProductDescription";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalProductNote1";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel1Code";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel1Description";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel2Code";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel2Description";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel3Code";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel3Description";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel4Code";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel4Description";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel5Code";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClassificationLevel5Description";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "BrandCode";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "BrandDescription";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SubBrandCode";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SubBrandDescription";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ContentIsoCode";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ContentIsoDescription";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "WeightIsoDescription";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SizeIsoDimensionDescription";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SizeIsoDimensionPackageDescription";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductCategoryCode";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductCategoryDescription";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "VatRequired";
                break;
            case 26:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "WebshopClassificationId";
                break;
            case 27:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DefaultWebshopClassificationId";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CashRegisterGroupCode";
                break;
            case 29:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CashRegisterGroupShortDescription";
                break;
            case 30:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CashRegisterGroupDescription";
                break;
            case 31:
                info.type = Long.class;
                info.name = "PreferredSupplierNumber";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PreferredSupplierName";
                break;
            case 33:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AssortmentCode";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AssortmentDescription";
                break;
            case 35:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ArticleGroupCode";
                break;
            case 36:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "VatId";
                break;
            case 37:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "VatCode";
                break;
            case 38:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "VatDescription";
                break;
            case 39:
                info.type = Double.class;
                info.name = "VatPercentage";
                break;
            case 40:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleUnitDimensionShortDescription";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleUnitDimensionDescription";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleUnitPackageShortDescription";
                break;
            case 43:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleUnitPackageDescription";
                break;
            case 44:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsPurchaseAvailable";
                break;
            case 45:
                info.type = Long.class;
                info.name = "OrganizationProductNumber";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ColorDescription";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SizeDescription";
                break;
            case 48:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SizeTypeDescription";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderCode";
                break;
            case 50:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsMaintainStock";
                break;
            case 51:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DoesMaintainStock";
                break;
            case 52:
                info.type = Double.class;
                info.name = "Stock";
                break;
            case 53:
                info.type = Double.class;
                info.name = "FreeStock";
                break;
            case 54:
                info.type = Double.class;
                info.name = "FutureStock";
                break;
            case 55:
                info.type = Double.class;
                info.name = "OpenPurchaseOrders";
                break;
            case 56:
                info.type = Double.class;
                info.name = "OpenSaleOrders";
                break;
            case 57:
                info.type = Double.class;
                info.name = "OpenReservations";
                break;
            case 58:
                info.type = Double.class;
                info.name = "MinimumStock";
                break;
            case 59:
                info.type = Double.class;
                info.name = "MaximumStock";
                break;
            case 60:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderMethod";
                break;
            case 61:
                info.type = Double.class;
                info.name = "CalculatedMinStock";
                break;
            case 62:
                info.type = Double.class;
                info.name = "CalculatedMaxStock";
                break;
            case 63:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ManualMinMaxStock";
                break;
            case 64:
                info.type = Double.class;
                info.name = "PurchaseUnitToPurchaseContentUnitFactor";
                break;
            case 65:
                info.type = Double.class;
                info.name = "OrderMultiplier";
                break;
            case 66:
                info.type = Double.class;
                info.name = "MinimumOrderQuantity";
                break;
            case 67:
                info.type = Double.class;
                info.name = "GrossPurchasePrice";
                break;
            case 68:
                info.type = Double.class;
                info.name = "PurchasePrice";
                break;
            case 69:
                info.type = Double.class;
                info.name = "OwnPurchasePrice";
                break;
            case 70:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchasePricePerAmount";
                break;
            case 71:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OwnPurchasePriceNote";
                break;
            case 72:
                info.type = Double.class;
                info.name = "Margin";
                break;
            case 73:
                info.type = Double.class;
                info.name = "MarginPercentage";
                break;
            case 74:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DefaultDeliveryDays";
                break;
            case 75:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "WebshopProductItemId";
                break;
            case 76:
                info.type = Double.class;
                info.name = "StoreGrossPrice";
                break;
            case 77:
                info.type = Double.class;
                info.name = "StoreTypeGrossPrice";
                break;
            case 78:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseStatusRowDescription";
                break;
            case 79:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseStatusRowCode";
                break;
            case 80:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CashRegisterGroupId";
                break;
            case 81:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductState";
                break;
            case 82:
                info.type = Double.class;
                info.name = "AppliedGrossPrice";
                break;
            case 83:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductPosMessage";
                break;
            case 84:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ProductPosMessageFound";
                break;
            case 85:
                info.type = Double.class;
                info.name = "GrossPurchasePriceReductionPercentage";
                break;
            case 86:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OldItemId";
                break;
            case 87:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OrganizationId";
                break;
            case 88:
                info.type = Long.class;
                info.name = "ProductNumber";
                break;
            case 89:
                info.type = Long.class;
                info.name = "MainBarcode";
                break;
            case 90:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "BarcodeTypeId";
                break;
            case 91:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastExchangeDateTime";
                break;
            case 92:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleLedgerId";
                break;
            case 93:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsDerived";
                break;
            case 94:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ReplacementProductId";
                break;
            case 95:
                info.type = Double.class;
                info.name = "AdvicePrice";
                break;
            case 96:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ArticleGroupId";
                break;
            case 97:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "AssortmentId";
                break;
            case 98:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SizeTypeId";
                break;
            case 99:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SizeId";
                break;
            case 100:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ColorId";
                break;
            case 101:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "WarrantyId";
                break;
            case 102:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "TransportClassId";
                break;
            case 103:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LabelClassId";
                break;
            case 104:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LocationClassId";
                break;
            case 105:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "BrandId";
                break;
            case 106:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SubBrandId";
                break;
            case 107:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PosMessageId";
                break;
            case 108:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DisposalFeeId";
                break;
            case 109:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductCombinationGroupId";
                break;
            case 110:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel1Id";
                break;
            case 111:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel2Id";
                break;
            case 112:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel3Id";
                break;
            case 113:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel4Id";
                break;
            case 114:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel5Id";
                break;
            case 115:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 116:
                info.type = Double.class;
                info.name = "DefaultSaleAmount";
                break;
            case 117:
                info.type = Double.class;
                info.name = "ConsumerUnitToSaleUnitFactor";
                break;
            case 118:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleUnitDimensionId";
                break;
            case 119:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleUnitPackageId";
                break;
            case 120:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 121:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AlternateDescription";
                break;
            case 122:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PosDescription";
                break;
            case 123:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "FormattedDescription";
                break;
            case 124:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExchangeRemarks";
                break;
            case 125:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalCode";
                break;
            case 126:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ExternalProductId";
                break;
            case 127:
                info.type = Double.class;
                info.name = "GrossPrice";
                break;
            case 128:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Information";
                break;
            case 129:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAllowMultiplePricing";
                break;
            case 130:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAllowPriceModification";
                break;
            case 131:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSale";
                break;
            case 132:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsProductGroup";
                break;
            case 133:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsConsignmentProduct";
                break;
            case 134:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsScaleIntegration";
                break;
            case 135:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsKitchenArticle";
                break;
            case 136:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCancelled";
                break;
            case 137:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsTrackAndTraceProduct";
                break;
            case 138:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note1";
                break;
            case 139:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note2";
                break;
            case 140:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note3";
                break;
            case 141:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note4";
                break;
            case 142:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Plu";
                break;
            case 143:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "FollowupNumber";
                break;
            case 144:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PreferredSupplierId";
                break;
            case 145:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductCategoryId";
                break;
            case 146:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "FreeTableId";
                break;
            case 147:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SearchText";
                break;
            case 148:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SizeIsoDimensionIdArticle";
                break;
            case 149:
                info.type = Double.class;
                info.name = "LengthArticle";
                break;
            case 150:
                info.type = Double.class;
                info.name = "HeightArticle";
                break;
            case 151:
                info.type = Double.class;
                info.name = "WidthArticle";
                break;
            case 152:
                info.type = Double.class;
                info.name = "DepthArticle";
                break;
            case 153:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SizeIsoDimensionIdPackage";
                break;
            case 154:
                info.type = Double.class;
                info.name = "LengthPackage";
                break;
            case 155:
                info.type = Double.class;
                info.name = "HeightPackage";
                break;
            case 156:
                info.type = Double.class;
                info.name = "WidthPackage";
                break;
            case 157:
                info.type = Double.class;
                info.name = "DepthPackage";
                break;
            case 158:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ContentIsoDimensionId";
                break;
            case 159:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ContentIsoPackageId";
                break;
            case 160:
                info.type = Double.class;
                info.name = "NetContent";
                break;
            case 161:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "WeightIsoDimensionId";
                break;
            case 162:
                info.type = Double.class;
                info.name = "NetWeight";
                break;
            case 163:
                info.type = Double.class;
                info.name = "GrossWeight";
                break;
            case 164:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AllowanceCode";
                break;
            case 165:
                info.type = Double.class;
                info.name = "AllowanceAmount";
                break;
            case 166:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "MarkingCodeType";
                break;
            case 167:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAllowDiscountPercentageModification";
                break;
            case 168:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAskForPriceInPos";
                break;
            case 169:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAskForAmountInPos";
                break;
            case 170:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscountAgreementDiscount";
                break;
            case 171:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoSavings";
                break;
            case 172:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscounts";
                break;
            case 173:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscountOnDiscount";
                break;
            case 174:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoMixedMatchDiscount";
                break;
            case 175:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsPriceZeroAllowed";
                break;
            case 176:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoQuantityPriceBreakDiscount";
                break;
            case 177:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSerialAdministration";
                break;
            case 178:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAskForDescriptionInPos";
                break;
            case 179:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsIncludeInStockValue";
                break;
            case 180:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StorageLocation";
                break;
            case 181:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RelatedProductsType";
                break;
            case 182:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ParentProductId";
                break;
            case 183:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CbsCode";
                break;
            case 184:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsGiftCard";
                break;
            case 185:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "GiftCardTypeId";
                break;
            case 186:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCollection";
                break;
            case 187:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "PrintLabel";
                break;
            case 188:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsPriceBlocked";
                break;
            case 189:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 190:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 191:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 192:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;*/
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }

//    @Override
//    public String getInnerText() {
//        return null;
//    }
//
//
//    @Override
//    public void setInnerText(String s) {
//    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {

    }
}
