package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/11/2017 5:10:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;
import android.util.Log;

import com.retailvistaapi.BuildConfig;

import CommonClass.CommonUtils;
import CommonClass.StaticValues;
import webservice.WS_Enums.*;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.kxml2.kdom.Element;

import java.util.List;

import CommonClass.APICommonClassNew;

public class WebserviceProductComponents {

    public String NAMESPACE = "http://retail3000.net/Retail3000Webservice/WebserviceProductComponents";
    public String url = "";
    public int timeOut = 30000;
    public IWsdl2CodeEvents eventHandler;
    public Retail3000AuthenticateToken retail3000AuthenticateTokenValue;
    public SoapProtocolVersion soapVersion;

    /*public WebserviceProductComponents() {
    }

    public WebserviceProductComponents(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }
*/
    public WebserviceProductComponents(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url + "/productcomponents.asmx";
    }

    /*   public WebserviceProductComponents(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
           this.eventHandler = eventHandler;
           this.url = url;
           this.setTimeOut(timeOutInSeconds);
       }
   */
    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void GetProductsAsync(ProductsFilter filter, int offset, int recordCount, String orderBy) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProductsAsync(filter, offset, recordCount, orderBy, null);
    }

    public AsyncTask<Void, Void, VectorViewProductInfo> GetProductsAsync(final ProductsFilter filter, final int offset, final int recordCount, final String orderBy, final ModelClass.Retail3000AuthenticateToken userData) throws Exception {

        AsyncTask<Void, Void, VectorViewProductInfo> APICall = new AsyncTask<Void, Void, VectorViewProductInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewProductInfo doInBackground(Void... params) {
                return GetProduct(filter, offset, recordCount, orderBy, "", userData);
            }

            @Override
            protected void onPostExecute(VectorViewProductInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetProducts", result);
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        }.execute();
        return APICall;
    }

    public VectorViewProductInfo GetProduct(ProductsFilter filter, int offset, int recordCount, String by, String orderBy, ModelClass.Retail3000AuthenticateToken userData) {

        return GetProducts(filter, offset, recordCount, orderBy, null, userData);
    }

    public VectorViewProductInfo GetProducts(ProductsFilter filter, int offset, int recordCount, String orderBy, List<HeaderProperty> headers, ModelClass.Retail3000AuthenticateToken userData) {

        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        if (userData != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, userData);
        }
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetProducts");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "filter", new ProductsFilter().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("filter", filter);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("recordCount", recordCount);
        soapReq.addProperty("orderBy", null);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {

            httpTransport.debug = BuildConfig.DEBUG;
            if (headers != null) {
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetProducts", soapEnvelope, headers);
            } else {
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetProducts", soapEnvelope, APICommonClassNew.buildAuthToken(userData));
            }
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewProductInfo resultVariable = new VectorViewProductInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void AddBarcodeAsync(BarcodeInfo barcode, boolean isAutoClaim) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddBarcodeAsync(barcode, isAutoClaim, null);
    }

    public void AddBarcodeAsync(final BarcodeInfo barcode, final boolean isAutoClaim, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return AddBarcode(barcode, isAutoClaim, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddBarcode", result);
                }
            }
        }.execute();
    }

    public int AddBarcode(BarcodeInfo barcode, boolean isAutoClaim) {
        return AddBarcode(barcode, isAutoClaim, null);
    }

    public int AddBarcode(BarcodeInfo barcode, boolean isAutoClaim, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "AddBarcode");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "barcode", new BarcodeInfo().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("barcode", barcode);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapEnvelope.setOutputSoapObject(soapReq);

        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/AddBarcode", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GetModifiedBarcodesAsync(String lastSynchronizationDateTime, BooleanFilter isPriceBarcodesOnly, int offset, int recordCount) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetModifiedBarcodesAsync(lastSynchronizationDateTime, isPriceBarcodesOnly, offset, recordCount, null);
    }

    public void GetModifiedBarcodesAsync(final String lastSynchronizationDateTime, final BooleanFilter isPriceBarcodesOnly, final int offset, final int recordCount, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorModifiedBarcodeInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorModifiedBarcodeInfo doInBackground(Void... params) {
                return GetModifiedBarcodes(lastSynchronizationDateTime, isPriceBarcodesOnly, offset, recordCount, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorModifiedBarcodeInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetModifiedBarcodes", result);
                }
            }
        }.execute();
    }

    public VectorModifiedBarcodeInfo GetModifiedBarcodes(String lastSynchronizationDateTime, BooleanFilter isPriceBarcodesOnly, int offset, int recordCount) {
        return GetModifiedBarcodes(lastSynchronizationDateTime, isPriceBarcodesOnly, offset, recordCount, null);
    }

    public VectorModifiedBarcodeInfo GetModifiedBarcodes(String lastSynchronizationDateTime, BooleanFilter isPriceBarcodesOnly, int offset, int recordCount, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetModifiedBarcodes");
        soapReq.addProperty("lastSynchronizationDateTime", lastSynchronizationDateTime);
        soapReq.addProperty("isPriceBarcodesOnly", isPriceBarcodesOnly.toString());
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("recordCount", recordCount);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }

        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetModifiedBarcodes", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorModifiedBarcodeInfo resultVariable = new VectorModifiedBarcodeInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void PrintProductLabelAsync(int productId, int barcodeId, int amount, boolean isPrintStockAmount, boolean isPrintPrices, double grossPrice, String note, int labelClassIdField, int labelDefinitionId, int thermalPrinterId, boolean isPrintFashionSeries, boolean isReturnPrinterDataField) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PrintProductLabelAsync(productId, barcodeId, amount, isPrintStockAmount, isPrintPrices, grossPrice, note, labelClassIdField, labelDefinitionId, thermalPrinterId, isPrintFashionSeries, isReturnPrinterDataField, null);
    }

    public void PrintProductLabelAsync(final int productId, final int barcodeId, final int amount, final boolean isPrintStockAmount, final boolean isPrintPrices, final double grossPrice, final String note, final int labelClassIdField, final int labelDefinitionId, final int thermalPrinterId, final boolean isPrintFashionSeries, final boolean isReturnPrinterDataField, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, PrintResponse>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected PrintResponse doInBackground(Void... params) {
                return PrintProductLabel(productId, barcodeId, amount, isPrintStockAmount, isPrintPrices, grossPrice, note, labelClassIdField, labelDefinitionId, thermalPrinterId, isPrintFashionSeries, isReturnPrinterDataField, authenticateToken);
            }

            @Override
            protected void onPostExecute(PrintResponse result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("PrintProductLabel", result);
                }
            }
        }.execute();
    }

    public PrintResponse PrintProductLabel(int productId, int barcodeId, int amount, boolean isPrintStockAmount, boolean isPrintPrices, double grossPrice, String note, int labelClassIdField, int labelDefinitionId, int thermalPrinterId, boolean isPrintFashionSeries, boolean isReturnPrinterDataField) {
        return PrintProductLabel(productId, barcodeId, amount, isPrintStockAmount, isPrintPrices, grossPrice, note, labelClassIdField, labelDefinitionId, thermalPrinterId, isPrintFashionSeries, isReturnPrinterDataField, null);
    }

    public PrintResponse PrintProductLabel(int productId, int barcodeId, int amount, boolean isPrintStockAmount, boolean isPrintPrices, double grossPrice, String note, int labelClassIdField, int labelDefinitionId, int thermalPrinterId, boolean isPrintFashionSeries, boolean isReturnPrinterDataField, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "PrintProductLabel");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("productId", productId);
        soapReq.addProperty("barcodeId", barcodeId);
        soapReq.addProperty("amount", amount);
//        soapReq.addProperty("labelClassId", labelClassIdField);
        soapReq.addProperty("labelDefinitionId", labelDefinitionId);
        soapReq.addProperty("thermalPrinterId", thermalPrinterId);
        soapReq.addProperty("isPrintStockAmount", false);
        soapReq.addProperty("isPrintPrices", isPrintPrices);
        soapReq.addProperty("grossPrice", grossPrice);

/*        soapReq.addProperty("barcodeId", barcodeId);

        soapReq.addProperty("isPrintStockAmount", isPrintStockAmount);
        soapReq.addProperty("isPrintPrices", isPrintPrices);
        soapReq.addProperty("grossPrice", grossPrice);
        soapReq.addProperty("note", note);
        soapReq.addProperty("isPrintFashionSeries", isPrintFashionSeries);
        soapReq.addProperty("isReturnPrinterData", isReturnPrinterDataField);*/

        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }

        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/PrintProductLabel", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    PrintResponse resultVariable = new PrintResponse(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


    public void AddProductsAsync(VectorProductInfo products, VectorProductCountryVatInfo productCountryVats, VectorStoreProductInfo storeProducts, VectorStoreTypeProductInfo storeTypeProducts, VectorBarcodeInfo barcodes, VectorPurchaseInfo purchaseInfos, boolean isAutoClaim) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddProductsAsync(products, productCountryVats, storeProducts, storeTypeProducts, barcodes, purchaseInfos, isAutoClaim, null);
    }

    public void AddProductsAsync(final VectorProductInfo products, final VectorProductCountryVatInfo productCountryVats, final VectorStoreProductInfo storeProducts, final VectorStoreTypeProductInfo storeTypeProducts, final VectorBarcodeInfo barcodes, final VectorPurchaseInfo purchaseInfos, final boolean isAutoClaim, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return AddProducts(products, productCountryVats, storeProducts, storeTypeProducts, barcodes, purchaseInfos, isAutoClaim, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddProducts", result);
                }
            }
        }.execute();
    }

    public int AddProducts(VectorProductInfo products, VectorProductCountryVatInfo productCountryVats, VectorStoreProductInfo storeProducts, VectorStoreTypeProductInfo storeTypeProducts, VectorBarcodeInfo barcodes, VectorPurchaseInfo purchaseInfos, boolean isAutoClaim) {
        return AddProducts(products, productCountryVats, storeProducts, storeTypeProducts, barcodes, purchaseInfos, isAutoClaim, null);
    }

    public int AddProducts(VectorProductInfo products, VectorProductCountryVatInfo productCountryVats, VectorStoreProductInfo storeProducts, VectorStoreTypeProductInfo storeTypeProducts, VectorBarcodeInfo barcodes, VectorPurchaseInfo purchaseInfos, boolean isAutoClaim, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "AddProducts");
        soapReq.addProperty("products", products);
        soapReq.addProperty("productCountryVats", productCountryVats);
        soapReq.addProperty("storeProducts", storeProducts);
        soapReq.addProperty("storeTypeProducts", storeTypeProducts);
        soapReq.addProperty("barcodes", barcodes);
        soapReq.addProperty("purchaseInfos", purchaseInfos);
        soapReq.addProperty("isAutoClaim", isAutoClaim);


        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }

        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/AddProducts", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GetModifiedProductsAsync(String lastSynchronizationDateTime, int supplierId, int preferredSupplierId, int brandId, int classificationLevel1IdField, int productCategoryId, int cashRegisterGroupId, boolean isIncludePurchaseAndBarcode, int offset, int recordCount) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetModifiedProductsAsync(lastSynchronizationDateTime, supplierId, preferredSupplierId, brandId, classificationLevel1IdField, productCategoryId, cashRegisterGroupId, isIncludePurchaseAndBarcode, offset, recordCount, null);
    }

    public void GetModifiedProductsAsync(final String lastSynchronizationDateTime, final int supplierId, final int preferredSupplierId, final int brandId, final int classificationLevel1IdField, final int productCategoryId, final int cashRegisterGroupId, final boolean isIncludePurchaseAndBarcode, final int offset, final int recordCount, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorModifiedProductInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorModifiedProductInfo doInBackground(Void... params) {
                return GetModifiedProducts(lastSynchronizationDateTime, supplierId, preferredSupplierId, brandId, classificationLevel1IdField, productCategoryId, cashRegisterGroupId, isIncludePurchaseAndBarcode, offset, recordCount, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorModifiedProductInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetModifiedProducts", result);
                }
            }
        }.execute();
    }

    public VectorModifiedProductInfo GetModifiedProducts(String lastSynchronizationDateTime, int supplierId, int preferredSupplierId, int brandId, int classificationLevel1IdField, int productCategoryId, int cashRegisterGroupId, boolean isIncludePurchaseAndBarcode, int offset, int recordCount) {
        return GetModifiedProducts(lastSynchronizationDateTime, supplierId, preferredSupplierId, brandId, classificationLevel1IdField, productCategoryId, cashRegisterGroupId, isIncludePurchaseAndBarcode, offset, recordCount, null);
    }

    public VectorModifiedProductInfo GetModifiedProducts(String lastSynchronizationDateTime, int supplierId, int preferredSupplierId, int brandId, int classificationLevel1IdField, int productCategoryId, int cashRegisterGroupId, boolean isIncludePurchaseAndBarcode, int offset, int recordCount, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetModifiedProducts");
        soapReq.addProperty("lastSynchronizationDateTime", lastSynchronizationDateTime);
        soapReq.addProperty("supplierId", supplierId);
        soapReq.addProperty("preferredSupplierId", preferredSupplierId);
        soapReq.addProperty("brandId", brandId);
        soapReq.addProperty("classificationLevel1Id", classificationLevel1IdField);
        soapReq.addProperty("productCategoryId", productCategoryId);
        soapReq.addProperty("cashRegisterGroupId", cashRegisterGroupId);
        soapReq.addProperty("isIncludePurchaseAndBarcode", isIncludePurchaseAndBarcode);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("recordCount", recordCount);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetModifiedProducts", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorModifiedProductInfo resultVariable = new VectorModifiedProductInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetUniqueBarcodeAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUniqueBarcodeAsync(null);
    }

    public void GetUniqueBarcodeAsync(final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return GetUniqueBarcode(authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUniqueBarcode", result);
                }
            }
        }.execute();
    }

    public long GetUniqueBarcode() {
        return GetUniqueBarcode(null);
    }

    public long GetUniqueBarcode(ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetUniqueBarcode");
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetUniqueBarcode", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        long resultVariable = Long.parseLong(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        long resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void AddProductAsync(ProductInfo product, ProductCountryVatInfo productCountryVat, boolean isMaintainStock, boolean isAutoClaim) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddProductAsync(product, productCountryVat, isMaintainStock, isAutoClaim, null);
    }

    public void AddProductAsync(final ProductInfo product, final ProductCountryVatInfo productCountryVat, final boolean isMaintainStock, final boolean isAutoClaim, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return AddProduct(product, productCountryVat, isMaintainStock, isAutoClaim, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddProduct", result);
                }
            }
        }.execute();
    }

    public int AddProduct(ProductInfo product, ProductCountryVatInfo productCountryVat, boolean isMaintainStock, boolean isAutoClaim) {
        return AddProduct(product, productCountryVat, isMaintainStock, isAutoClaim, null);
    }

    public int AddProduct(ProductInfo product, ProductCountryVatInfo productCountryVat, boolean isMaintainStock, boolean isAutoClaim, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "AddProduct");
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "product", new ProductInfo().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "productCountryVat", new ProductCountryVatInfo().getClass());
        soapReq.addProperty("product", product);
        soapReq.addProperty("productCountryVat", productCountryVat);
        soapReq.addProperty("isMaintainStock", isMaintainStock);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/AddProduct", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void UpdateProductAsync(ProductInfo product, boolean isAutoClaim, boolean isForceUpdate) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateProductAsync(product, isAutoClaim, isForceUpdate, null);
    }

    public void UpdateProductAsync(final ProductInfo product, final boolean isAutoClaim, final boolean isForceUpdate, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return UpdateProduct(product, isAutoClaim, isForceUpdate, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateProduct", result);
                }
            }
        }.execute();
    }

    public int UpdateProduct(ProductInfo product, boolean isAutoClaim, boolean isForceUpdate) {
        return UpdateProduct(product, isAutoClaim, isForceUpdate, null);
    }

    public int UpdateProduct(ProductInfo product, boolean isAutoClaim, boolean isForceUpdate, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "UpdateProduct");
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "product", new ProductInfo().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("product", product);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapReq.addProperty("isForceUpdate", isForceUpdate);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/UpdateProduct", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    /*   public void UpdateProductExtendedAsync(ExtendedProductInfo extendedProduct) throws Exception{
           if (this.eventHandler == null)
               throw new Exception("Async Methods Requires IWsdl2CodeEvents");
           UpdateProductExtendedAsync(extendedProduct, null);
       }

       public void UpdateProductExtendedAsync(final ExtendedProductInfo extendedProduct,final List<HeaderProperty> headers) throws Exception{

           new AsyncTask<Void, Void, Number>(){
               @Override
               protected void onPreExecute() {
                   eventHandler.Wsdl2CodeStartedRequest();
               };
               @Override
               protected Number doInBackground(Void... params) {
                   return UpdateProductExtended(extendedProduct, headers);
               }
               @Override
               protected void onPostExecute(Number result)
               {
                   eventHandler.Wsdl2CodeEndedRequest();
                   if (result != null){
                       eventHandler.Wsdl2CodeFinished("UpdateProductExtended", result);
                   }
               }
           }.execute();
       }

       public int UpdateProductExtended(ExtendedProductInfo extendedProduct){
           return UpdateProductExtended(extendedProduct, null);
       }

       public int UpdateProductExtended(ExtendedProductInfo extendedProduct,List<HeaderProperty> headers){
           SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
           soapEnvelope.implicitTypes = true;
           soapEnvelope.dotNet = true;
           SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents","UpdateProductExtended");
           soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents","extendedProduct",new ExtendedProductInfo().getClass());
           MarshalFloat marshalFloat = new MarshalFloat();
           marshalFloat.register(soapEnvelope);
           soapReq.addProperty("extendedProduct",extendedProduct);
           soapEnvelope.setOutputSoapObject(soapReq);
           HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
           try{
               if (headers!=null){
                   httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/UpdateProductExtended", soapEnvelope,headers);
               }else{
                   httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/UpdateProductExtended", soapEnvelope);
               }
               Object retObj = soapEnvelope.bodyIn;
               if (retObj instanceof SoapFault){
                   SoapFault fault = (SoapFault)retObj;
                   Exception ex = new Exception(fault.faultstring);
                   if (eventHandler != null)
                       eventHandler.Wsdl2CodeFinishedWithException(ex);
               }else{
                   SoapObject result=(SoapObject)retObj;
                   if (result.getPropertyCount() > 0){
                       Object obj = result.getProperty(0);
                       if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                           SoapPrimitive j =(SoapPrimitive) obj;
                           int resultVariable = Integer.parseInt(j.toString());
                           return resultVariable;
                       }else if (obj!= null && obj instanceof Number){
                           int resultVariable = (Integer) obj;
                           return resultVariable;
                       }
                   }
               }
           }catch (Exception e) {
               if (eventHandler != null)
                   eventHandler.Wsdl2CodeFinishedWithException(e);
               e.printStackTrace();
           }
           return -1;
       }*/
    public void DeleteProductAsync(int itemId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteProductAsync(itemId, null);
    }

    public void DeleteProductAsync(final int itemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return DeleteProduct(itemId, authenticateToken);
            }

            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DeleteProduct", result);
                }
            }
        }.execute();
    }

    public boolean DeleteProduct(int itemId) {
        return DeleteProduct(itemId, null);
    }

    public boolean DeleteProduct(int itemId, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "DeleteProduct");
        soapReq.addProperty("itemId", itemId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/DeleteProduct", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void GetProductActiveDiscountInfoAsync(ViewProductInfo product, int countryId, int storeId, boolean isAlsoReturnAmountsField) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProductActiveDiscountInfoAsync(product, countryId, storeId, isAlsoReturnAmountsField, null);
    }

    public void GetProductActiveDiscountInfoAsync(final ViewProductInfo product, final int countryId, final int storeId, final boolean isAlsoReturnAmountsField, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, DiscountProductInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected DiscountProductInfo doInBackground(Void... params) {
                return GetProductActiveDiscountInfo(product, countryId, storeId, isAlsoReturnAmountsField, authenticateToken);
            }

            @Override
            protected void onPostExecute(DiscountProductInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetProductActiveDiscountInfo", result);
                }
            }
        }.execute();
    }

    public DiscountProductInfo GetProductActiveDiscountInfo(ViewProductInfo product, int countryId, int storeId, boolean isAlsoReturnAmountsField) {
        return GetProductActiveDiscountInfo(product, countryId, storeId, isAlsoReturnAmountsField, null);
    }

    public DiscountProductInfo GetProductActiveDiscountInfo(ViewProductInfo product, int countryId, int storeId, boolean isAlsoReturnAmountsField, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetProductActiveDiscountInfo");
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "product", new ViewProductInfo().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("product", product);
   /*     soapReq.addProperty("countryId", countryId);
        soapReq.addProperty("storeId", storeId);
        soapReq.addProperty("isAlsoReturnAmounts", isAlsoReturnAmountsField);*/
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetProductActiveDiscountInfo", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    DiscountProductInfo resultVariable = new DiscountProductInfo(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetProductActiveDiscountInfoAsync(ViewProductInfoDiscount product, int countryId, int storeId, boolean isAlsoReturnAmountsField) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProductActiveDiscountInfoAsync(product, countryId, storeId, isAlsoReturnAmountsField, null);
    }

    public void GetProductActiveDiscountInfoAsync(final ViewProductInfoDiscount product, final int countryId, final int storeId, final boolean isAlsoReturnAmountsField, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, DiscountProductInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected DiscountProductInfo doInBackground(Void... params) {
                return GetProductActiveDiscountInfo(product, countryId, storeId, isAlsoReturnAmountsField, authenticateToken);
            }

            @Override
            protected void onPostExecute(DiscountProductInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetProductActiveDiscountInfo", result);
                }
            }
        }.execute();
    }

    public DiscountProductInfo GetProductActiveDiscountInfo(ViewProductInfoDiscount product, int countryId, int storeId, boolean isAlsoReturnAmountsField) {
        return GetProductActiveDiscountInfo(product, countryId, storeId, isAlsoReturnAmountsField, null);
    }

    public DiscountProductInfo GetProductActiveDiscountInfo(ViewProductInfoDiscount product, int countryId, int storeId, boolean isAlsoReturnAmountsField, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetProductActiveDiscountInfo");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "product", new ViewProductInfo().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("product", product);
        //soapReq.addProperty("countryId",countryId);
        // soapReq.addProperty("storeId",storeId);
        // soapReq.addProperty("isAlsoReturnAmounts",isAlsoReturnAmountsField);

        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }

        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            /*if (headers!=null){
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetProductActiveDiscountInfo", soapEnvelope,headers);
            }else{*/
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetProductActiveDiscountInfo", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            //  }
            java.lang.Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    java.lang.Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    DiscountProductInfo resultVariable = new DiscountProductInfo(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetBarcodesAsync(int productId, WS_Enums.SearchProductState productState, long barcode, int skipItemId, int offset, int recordCount) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetBarcodesAsync(productId, productState, barcode, skipItemId, offset, recordCount, null);
    }

    public void GetBarcodesAsync(final int productId, final WS_Enums.SearchProductState productState, final long barcode, final int skipItemId, final int offset, final int recordCount, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewBarcodeInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewBarcodeInfo doInBackground(Void... params) {
                return GetBarcodes(productId, productState, barcode, skipItemId, offset, recordCount, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewBarcodeInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetBarcodes", result);
                }
            }
        }.execute();
    }

    public VectorViewBarcodeInfo GetBarcodes(int productId, WS_Enums.SearchProductState productState, long barcode, int skipItemId, int offset, int recordCount) {
        return GetBarcodes(productId, productState, barcode, skipItemId, offset, recordCount, null);
    }

    public VectorViewBarcodeInfo GetBarcodes(int productId, WS_Enums.SearchProductState productState, long barcode, int skipItemId, int offset, int recordCount, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetBarcodes");
        soapReq.addProperty("productId", productId);
        // soapReq.addProperty("productState", productState.toString());
        soapReq.addProperty("barcode", barcode);
        //  soapReq.addProperty("skipItemId", skipItemId);
        // soapReq.addProperty("offset", offset);
        //soapReq.addProperty("recordCount", recordCount);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetBarcodes", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewBarcodeInfo resultVariable = new VectorViewBarcodeInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetRelatedProductsAsync(int productId, int relatedProductId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRelatedProductsAsync(productId, relatedProductId, null);
    }

    public void GetRelatedProductsAsync(final int productId, final int relatedProductId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewRelatedProductInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewRelatedProductInfo doInBackground(Void... params) {
                return GetRelatedProducts(productId, relatedProductId, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewRelatedProductInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetRelatedProducts", result);
                }
            }
        }.execute();
    }

    public VectorViewRelatedProductInfo GetRelatedProducts(int productId, int relatedProductId) {
        return GetRelatedProducts(productId, relatedProductId, null);
    }

    public VectorViewRelatedProductInfo GetRelatedProducts(int productId, int relatedProductId, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetRelatedProducts");
        soapReq.addProperty("productId", productId);
        soapReq.addProperty("relatedProductId", relatedProductId);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetRelatedProducts", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            java.lang.Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    java.lang.Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewRelatedProductInfo resultVariable = new VectorViewRelatedProductInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetStoreProductLocationsAsync(StoreProductLocationsFilter filter) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStoreProductLocationsAsync(filter, null);
    }

    public void GetStoreProductLocationsAsync(final StoreProductLocationsFilter filter, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewStoreProductLocationInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewStoreProductLocationInfo doInBackground(Void... params) {
                return GetStoreProductLocations(filter, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewStoreProductLocationInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetStoreProductLocations", result);
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        }.execute();
    }

    public VectorViewStoreProductLocationInfo GetStoreProductLocations(StoreProductLocationsFilter filter) {
        return GetStoreProductLocations(filter, null);
    }

    public VectorViewStoreProductLocationInfo GetStoreProductLocations(StoreProductLocationsFilter filter, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetStoreProductLocations");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "filter", new StoreProductLocationsFilter().getClass());
        soapReq.addProperty("filter", filter);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetStoreProductLocations", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            java.lang.Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    java.lang.Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewStoreProductLocationInfo resultVariable = new VectorViewStoreProductLocationInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetStoreProductLocationsNewAsync(final GetStoreProductLocationsRequest filter, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {


        new AsyncTask<Void, Void, VectorViewStoreProductLocationInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewStoreProductLocationInfo doInBackground(Void... params) {
                return GetStoreProductLocationsNew(filter, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewStoreProductLocationInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetStoreProductLocations", result);
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        }.execute();
    }

    public VectorViewStoreProductLocationInfo GetStoreProductLocationsNew(GetStoreProductLocationsRequest filter) {
        return GetStoreProductLocationsNew(filter, null);
    }

    public VectorViewStoreProductLocationInfo GetStoreProductLocationsNew(GetStoreProductLocationsRequest filter, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetStoreProductLocations");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "filter", new StoreProductLocationsFilter().getClass());
        soapReq.addProperty("request", filter);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetStoreProductLocations", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            java.lang.Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    java.lang.Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewStoreProductLocationInfo resultVariable = new VectorViewStoreProductLocationInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


    public void GetPurchasesAsync(PurchasesFilter filter, int offset, int maxRecords) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPurchasesAsync(filter, offset, maxRecords, null);
    }

    public void GetPurchasesAsync(final PurchasesFilter filter, final int offset, final int maxRecords, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewPurchaseInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewPurchaseInfo doInBackground(Void... params) {
                return GetPurchases(filter, offset, maxRecords, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewPurchaseInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetPurchases", result);
                }
            }
        }.execute();
    }

    public VectorViewPurchaseInfo GetPurchases(PurchasesFilter filter, int offset, int maxRecords) {
        return GetPurchases(filter, offset, maxRecords, null);
    }

    public VectorViewPurchaseInfo GetPurchases(PurchasesFilter filter, int offset, int maxRecords, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetPurchases");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "filter", new PurchasesFilter().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("filter", filter);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("maxRecords", maxRecords);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetPurchases", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            java.lang.Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    java.lang.Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewPurchaseInfo resultVariable = new VectorViewPurchaseInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetStoreProductsByFilterAsync(final StoreProductsFilter filter, final int offset, final int maxRecords, final String orderBy, final int skipItemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewStoreProductInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewStoreProductInfo doInBackground(Void... params) {
                return GetStoreProductsByFilter(filter, offset, maxRecords, orderBy, skipItemId, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewStoreProductInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetStoreProductsByFilter", result);
                }
            }
        }.execute();
    }

    public VectorViewStoreProductInfo GetStoreProductsByFilter(StoreProductsFilter filter, int offset, int maxRecords, String orderBy, int skipItemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "GetStoreProductsByFilter");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents", "filter", new StoreProductsFilter().getClass());
        soapReq.addProperty("filter", filter);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("maxRecords", maxRecords);
        soapReq.addProperty("orderBy", orderBy);
        //    soapReq.addProperty("skipItemId", skipItemId);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceProductComponents/GetStoreProductsByFilter", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewStoreProductInfo resultVariable = new VectorViewStoreProductInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

}
