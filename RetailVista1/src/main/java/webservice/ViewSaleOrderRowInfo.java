package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import webservice.WS_Enums.*;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ViewSaleOrderRowInfo implements KvmSerializable {

    public int saleOrderNumber;
    public String saleOrderPrintedDateTime;
    public String saleOrderCreatedDateTime;
    public long customerNumber;
    public String customerName;
    public long productNumber;
    public String productDescription;
    public double mainBarcode;
    public String brandDescription;
    public String vatDescription;
    public double stock;
    public double freeStock;
    public double futureStock;
    public int scannerNumber;
    public WS_Enums.SaleOrderStatus saleOrderStatus;
    public SaleOrderType saleOrderType;
    public int saleOrderClassIdField;
    public String saleOrderExpectedDeliveryDate;
    public String saleOrderUtmostDeliveryDate;
    public String saleOrderClassDescriptionField;
    public String orderCode;
    public int plu;
    public double calculatedPurchaseUnitConsumerUnits;
    public double orderedPurchaseUnits;
    public double purchaseUnitCbmPerSingleUnit;
    public double purchaseUnitTotalOrderedCbm;
    public int preferredSupplierId;
    public boolean deviantInterbrancheOrdering;
    public String vatCode;
    public int saleOrderId;
    public int relatedSaleOrderRowId;
    public int productId;
    public int brandId;
    public int scannerId;
    public int mixedMatchId;
    public int discountAgreementClassificationIdField;
    public int quantityPriceBreakId;
    public int promotionId;
    public int vatId;
    public double vatPercentage;
    public int purchaseOrderRowId;
    public String description;
    public long barcode;
    public double amount;
    public double directReservationAmount;
    public boolean isCancelled;
    public String note1;
    public String note2;
    public double discountPrice;
    public double discountPercentage;
    public boolean vatRequired;
    public DiscountType discountType;
    public boolean isNoDiscounts;
    public boolean isNoDiscountOnDiscount;
    public boolean isSale;
    public boolean isParentRow;
    public double pcePurchasePrice;
    public double pceGrossPrice;
    public double pceNetPrice;
    public double totalGrossPrice;
    public double totalNetPrice;
    public double totalVat;
    public double weightedTotalNetPrice;
    public SalePriceType priceType;
    public double remainingAmount;
    public double deliveredAmount;
    public double reservedAmount;
    public String approvalNote;
    public double approvedAmount;
    public int deliveryDays;
    public long conversionId;
    public int companyId;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;

    public ViewSaleOrderRowInfo() {
    }

    public ViewSaleOrderRowInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("SaleOrderNumber")) {
            Object obj = soapObject.getProperty("SaleOrderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleOrderNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderPrintedDateTime")) {
            Object obj = soapObject.getProperty("SaleOrderPrintedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderPrintedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleOrderPrintedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderCreatedDateTime")) {
            Object obj = soapObject.getProperty("SaleOrderCreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderCreatedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleOrderCreatedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("CustomerNumber")) {
            Object obj = soapObject.getProperty("CustomerNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                customerNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                customerNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CustomerName")) {
            Object obj = soapObject.getProperty("CustomerName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                customerName = j.toString();
            } else if (obj != null && obj instanceof String) {
                customerName = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductNumber")) {
            Object obj = soapObject.getProperty("ProductNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductDescription")) {
            Object obj = soapObject.getProperty("ProductDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                productDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("MainBarcode")) {
            Object obj = soapObject.getProperty("MainBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mainBarcode = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mainBarcode = (Double) obj;
            }
        }
        if (soapObject.hasProperty("BrandDescription")) {
            Object obj = soapObject.getProperty("BrandDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                brandDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("VatDescription")) {
            Object obj = soapObject.getProperty("VatDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                vatDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("Stock")) {
            Object obj = soapObject.getProperty("Stock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                stock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                stock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FreeStock")) {
            Object obj = soapObject.getProperty("FreeStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                freeStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                freeStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FutureStock")) {
            Object obj = soapObject.getProperty("FutureStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                futureStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                futureStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ScannerNumber")) {
            Object obj = soapObject.getProperty("ScannerNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                scannerNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                scannerNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderStatus")) {
            Object obj = soapObject.getProperty("SaleOrderStatus");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderStatus = WS_Enums.SaleOrderStatus.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("SaleOrderType")) {
            Object obj = soapObject.getProperty("SaleOrderType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderType = SaleOrderType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("SaleOrderClassId")) {
            Object obj = soapObject.getProperty("SaleOrderClassId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderClassIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleOrderClassIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderExpectedDeliveryDate")) {
            Object obj = soapObject.getProperty("SaleOrderExpectedDeliveryDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderExpectedDeliveryDate = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleOrderExpectedDeliveryDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderUtmostDeliveryDate")) {
            Object obj = soapObject.getProperty("SaleOrderUtmostDeliveryDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderUtmostDeliveryDate = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleOrderUtmostDeliveryDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderClassDescription")) {
            Object obj = soapObject.getProperty("SaleOrderClassDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderClassDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleOrderClassDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("OrderCode")) {
            Object obj = soapObject.getProperty("OrderCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                orderCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("Plu")) {
            Object obj = soapObject.getProperty("Plu");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                plu = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                plu = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CalculatedPurchaseUnitConsumerUnits")) {
            Object obj = soapObject.getProperty("CalculatedPurchaseUnitConsumerUnits");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculatedPurchaseUnitConsumerUnits = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                calculatedPurchaseUnitConsumerUnits = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OrderedPurchaseUnits")) {
            Object obj = soapObject.getProperty("OrderedPurchaseUnits");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderedPurchaseUnits = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                orderedPurchaseUnits = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitCbmPerSingleUnit")) {
            Object obj = soapObject.getProperty("PurchaseUnitCbmPerSingleUnit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitCbmPerSingleUnit = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitCbmPerSingleUnit = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitTotalOrderedCbm")) {
            Object obj = soapObject.getProperty("PurchaseUnitTotalOrderedCbm");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitTotalOrderedCbm = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitTotalOrderedCbm = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierId")) {
            Object obj = soapObject.getProperty("PreferredSupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                preferredSupplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DeviantInterbrancheOrdering")) {
            Object obj = soapObject.getProperty("DeviantInterbrancheOrdering");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                deviantInterbrancheOrdering = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                deviantInterbrancheOrdering = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("VatCode")) {
            Object obj = soapObject.getProperty("VatCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                vatCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderId")) {
            Object obj = soapObject.getProperty("SaleOrderId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleOrderId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("RelatedSaleOrderRowId")) {
            Object obj = soapObject.getProperty("RelatedSaleOrderRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                relatedSaleOrderRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                relatedSaleOrderRowId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductId")) {
            Object obj = soapObject.getProperty("ProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("BrandId")) {
            Object obj = soapObject.getProperty("BrandId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                brandId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ScannerId")) {
            Object obj = soapObject.getProperty("ScannerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                scannerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                scannerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("MixedMatchId")) {
            Object obj = soapObject.getProperty("MixedMatchId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mixedMatchId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mixedMatchId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DiscountAgreementClassificationId")) {
            Object obj = soapObject.getProperty("DiscountAgreementClassificationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountAgreementClassificationIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountAgreementClassificationIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("QuantityPriceBreakId")) {
            Object obj = soapObject.getProperty("QuantityPriceBreakId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                quantityPriceBreakId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                quantityPriceBreakId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PromotionId")) {
            Object obj = soapObject.getProperty("PromotionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                promotionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                promotionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatId")) {
            Object obj = soapObject.getProperty("VatId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatPercentage")) {
            Object obj = soapObject.getProperty("VatPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseOrderRowId")) {
            Object obj = soapObject.getProperty("PurchaseOrderRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseOrderRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseOrderRowId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Description")) {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                description = j.toString();
            } else if (obj != null && obj instanceof String) {
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("Barcode")) {
            Object obj = soapObject.getProperty("Barcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                barcode = Long.parseLong(j.toString());
            } else if (obj != null && obj instanceof Number) {
                barcode = (Long) obj;
            }
        }
        if (soapObject.hasProperty("Amount")) {
            Object obj = soapObject.getProperty("Amount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                amount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                amount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DirectReservationAmount")) {
            Object obj = soapObject.getProperty("DirectReservationAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                directReservationAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                directReservationAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsCancelled")) {
            Object obj = soapObject.getProperty("IsCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCancelled = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isCancelled = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Note1")) {
            Object obj = soapObject.getProperty("Note1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note2")) {
            Object obj = soapObject.getProperty("Note2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note2 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("DiscountPrice")) {
            Object obj = soapObject.getProperty("DiscountPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DiscountPercentage")) {
            Object obj = soapObject.getProperty("DiscountPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("VatRequired")) {
            Object obj = soapObject.getProperty("VatRequired");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatRequired = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                vatRequired = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("DiscountType")) {
            Object obj = soapObject.getProperty("DiscountType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountType = DiscountType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsNoDiscounts")) {
            Object obj = soapObject.getProperty("IsNoDiscounts");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscounts = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscounts = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscountOnDiscount")) {
            Object obj = soapObject.getProperty("IsNoDiscountOnDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscountOnDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscountOnDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsSale")) {
            Object obj = soapObject.getProperty("IsSale");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isSale = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isSale = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsParentRow")) {
            Object obj = soapObject.getProperty("IsParentRow");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isParentRow = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isParentRow = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PcePurchasePrice")) {
            Object obj = soapObject.getProperty("PcePurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pcePurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pcePurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PceGrossPrice")) {
            Object obj = soapObject.getProperty("PceGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pceGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pceGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PceNetPrice")) {
            Object obj = soapObject.getProperty("PceNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pceNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pceNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalGrossPrice")) {
            Object obj = soapObject.getProperty("TotalGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalNetPrice")) {
            Object obj = soapObject.getProperty("TotalNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalVat")) {
            Object obj = soapObject.getProperty("TotalVat");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalVat = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalVat = (Double) obj;
            }
        }
        if (soapObject.hasProperty("WeightedTotalNetPrice")) {
            Object obj = soapObject.getProperty("WeightedTotalNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                weightedTotalNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                weightedTotalNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PriceType")) {
            Object obj = soapObject.getProperty("PriceType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                priceType = SalePriceType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("RemainingAmount")) {
            Object obj = soapObject.getProperty("RemainingAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                remainingAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                remainingAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DeliveredAmount")) {
            Object obj = soapObject.getProperty("DeliveredAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                deliveredAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                deliveredAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ReservedAmount")) {
            Object obj = soapObject.getProperty("ReservedAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                reservedAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                reservedAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ApprovalNote")) {
            Object obj = soapObject.getProperty("ApprovalNote");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                approvalNote = j.toString();
            } else if (obj != null && obj instanceof String) {
                approvalNote = (String) obj;
            }
        }
        if (soapObject.hasProperty("ApprovedAmount")) {
            Object obj = soapObject.getProperty("ApprovedAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                approvedAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                approvedAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DeliveryDays")) {
            Object obj = soapObject.getProperty("DeliveryDays");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                deliveryDays = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                deliveryDays = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ConversionId")) {
            Object obj = soapObject.getProperty("ConversionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                conversionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                conversionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId")) {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId")) {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime")) {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId")) {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return saleOrderNumber;
            case 1:
                return saleOrderPrintedDateTime;
            case 2:
                return saleOrderCreatedDateTime;
            case 3:
                return customerNumber;
            case 4:
                return customerName;
            case 5:
                return productNumber;
            case 6:
                return productDescription;
            case 7:
                return mainBarcode;
            case 8:
                return brandDescription;
            case 9:
                return vatDescription;
            case 10:
                return stock;
            case 11:
                return freeStock;
            case 12:
                return futureStock;
            case 13:
                return scannerNumber;
            case 14:
                return saleOrderStatus.toString();
            case 15:
                return saleOrderType.toString();
            case 16:
                return saleOrderClassIdField;
            case 17:
                return saleOrderExpectedDeliveryDate;
            case 18:
                return saleOrderUtmostDeliveryDate;
            case 19:
                return saleOrderClassDescriptionField;
            case 20:
                return orderCode;
            case 21:
                return plu;
            case 22:
                return calculatedPurchaseUnitConsumerUnits;
            case 23:
                return orderedPurchaseUnits;
            case 24:
                return purchaseUnitCbmPerSingleUnit;
            case 25:
                return purchaseUnitTotalOrderedCbm;
            case 26:
                return preferredSupplierId;
            case 27:
                return deviantInterbrancheOrdering;
            case 28:
                return vatCode;
            case 29:
                return saleOrderId;
            case 30:
                return relatedSaleOrderRowId;
            case 31:
                return productId;
            case 32:
                return brandId;
            case 33:
                return scannerId;
            case 34:
                return mixedMatchId;
            case 35:
                return discountAgreementClassificationIdField;
            case 36:
                return quantityPriceBreakId;
            case 37:
                return promotionId;
            case 38:
                return vatId;
            case 39:
                return vatPercentage;
            case 40:
                return purchaseOrderRowId;
            case 41:
                return description;
            case 42:
                return barcode;
            case 43:
                return amount;
            case 44:
                return directReservationAmount;
            case 45:
                return isCancelled;
            case 46:
                return note1;
            case 47:
                return note2;
            case 48:
                return discountPrice;
            case 49:
                return discountPercentage;
            case 50:
                return vatRequired;
            case 51:
                return discountType.toString();
            case 52:
                return isNoDiscounts;
            case 53:
                return isNoDiscountOnDiscount;
            case 54:
                return isSale;
            case 55:
                return isParentRow;
            case 56:
                return pcePurchasePrice;
            case 57:
                return pceGrossPrice;
            case 58:
                return pceNetPrice;
            case 59:
                return totalGrossPrice;
            case 60:
                return totalNetPrice;
            case 61:
                return totalVat;
            case 62:
                return weightedTotalNetPrice;
            case 63:
                return priceType.toString();
            case 64:
                return remainingAmount;
            case 65:
                return deliveredAmount;
            case 66:
                return reservedAmount;
            case 67:
                return approvalNote;
            case 68:
                return approvedAmount;
            case 69:
                return deliveryDays;
            case 70:
                return conversionId;
            case 71:
                return companyId;
            case 72:
                return createdByUserId;
            case 73:
                return createdDateTime;
            case 74:
                return lastModifiedByUserId;
            case 75:
                return lastModifiedDateTime;
            case 76:
                return itemId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 77;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleOrderNumber";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderPrintedDateTime";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderCreatedDateTime";
                break;
            case 3:
                info.type = Long.class;
                info.name = "CustomerNumber";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerName";
                break;
            case 5:
                info.type = Long.class;
                info.name = "ProductNumber";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductDescription";
                break;
            case 7:
                info.type = Long.class;
                info.name = "MainBarcode";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "BrandDescription";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "VatDescription";
                break;
            case 10:
                info.type = Double.class;
                info.name = "Stock";
                break;
            case 11:
                info.type = Double.class;
                info.name = "FreeStock";
                break;
            case 12:
                info.type = Double.class;
                info.name = "FutureStock";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ScannerNumber";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderStatus";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderType";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleOrderClassId";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderExpectedDeliveryDate";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderUtmostDeliveryDate";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderClassDescription";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderCode";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Plu";
                break;
            case 22:
                info.type = Double.class;
                info.name = "CalculatedPurchaseUnitConsumerUnits";
                break;
            case 23:
                info.type = Double.class;
                info.name = "OrderedPurchaseUnits";
                break;
            case 24:
                info.type = Double.class;
                info.name = "PurchaseUnitCbmPerSingleUnit";
                break;
            case 25:
                info.type = Double.class;
                info.name = "PurchaseUnitTotalOrderedCbm";
                break;
            case 26:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PreferredSupplierId";
                break;
            case 27:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DeviantInterbrancheOrdering";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "VatCode";
                break;
            case 29:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleOrderId";
                break;
            case 30:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RelatedSaleOrderRowId";
                break;
            case 31:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductId";
                break;
            case 32:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "BrandId";
                break;
            case 33:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ScannerId";
                break;
            case 34:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "MixedMatchId";
                break;
            case 35:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DiscountAgreementClassificationId";
                break;
            case 36:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "QuantityPriceBreakId";
                break;
            case 37:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PromotionId";
                break;
            case 38:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "VatId";
                break;
            case 39:
                info.type = Double.class;
                info.name = "VatPercentage";
                break;
            case 40:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseOrderRowId";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 42:
                info.type = Long.class;
                info.name = "Barcode";
                break;
            case 43:
                info.type = Double.class;
                info.name = "Amount";
                break;
            case 44:
                info.type = Double.class;
                info.name = "DirectReservationAmount";
                break;
            case 45:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCancelled";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note1";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note2";
                break;
            case 48:
                info.type = Double.class;
                info.name = "DiscountPrice";
                break;
            case 49:
                info.type = Double.class;
                info.name = "DiscountPercentage";
                break;
            case 50:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "VatRequired";
                break;
            case 51:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DiscountType";
                break;
            case 52:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscounts";
                break;
            case 53:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscountOnDiscount";
                break;
            case 54:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSale";
                break;
            case 55:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsParentRow";
                break;
            case 56:
                info.type = Double.class;
                info.name = "PcePurchasePrice";
                break;
            case 57:
                info.type = Double.class;
                info.name = "PceGrossPrice";
                break;
            case 58:
                info.type = Double.class;
                info.name = "PceNetPrice";
                break;
            case 59:
                info.type = Double.class;
                info.name = "TotalGrossPrice";
                break;
            case 60:
                info.type = Double.class;
                info.name = "TotalNetPrice";
                break;
            case 61:
                info.type = Double.class;
                info.name = "TotalVat";
                break;
            case 62:
                info.type = Double.class;
                info.name = "WeightedTotalNetPrice";
                break;
            case 63:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PriceType";
                break;
            case 64:
                info.type = Double.class;
                info.name = "RemainingAmount";
                break;
            case 65:
                info.type = Double.class;
                info.name = "DeliveredAmount";
                break;
            case 66:
                info.type = Double.class;
                info.name = "ReservedAmount";
                break;
            case 67:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ApprovalNote";
                break;
            case 68:
                info.type = Double.class;
                info.name = "ApprovedAmount";
                break;
            case 69:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DeliveryDays";
                break;
            case 70:
                info.type = Long.class;
                info.name = "ConversionId";
                break;
            case 71:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 72:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 73:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 74:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 75:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 76:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
