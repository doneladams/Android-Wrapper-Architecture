package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 9/11/2018 7:29:45 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ViewStoreProductInfo implements KvmSerializable {

    public int storeNumber;
    public String storeDescription;
    public long productNumber;
    public String externalCode;
    public long mainBarcode;
    public String productDescription;
    public int productCategoryId;
    public String defaultPickLocationCode;
    public double combinationStock;
    public double combinationFreeStock;
    public double grossProfitPrice;
    public double grossProfitPercentage;
    public String preferredSupplierGeneralName;
    public long preferredSupplierNumber;
    public int preferredSupplierId;
    public double appliedGrossPrice;
    public double purchasePricePerAmount;
    public double grossPurchasePrice;
    public double purchasePrice;
    public double ownPurchasePrice;
    public double purchaseUnitToPurchaseContentUnitFactor;
    public double purchaseContentUnitToConsumerUnitFactor;
    public double minimumOrderQuantity;
    public WS_Enums.PurchasePriceType purchasePriceType;
    public int purchaseStatusRowId;
    public String orderCode;
    public boolean doesMaintainStock;
    public int defaultDeliveryDays;
    public boolean stockedItem;
    public double appliedPcePurchasePrice;
    public double stock;
    public int storeId;
    public int productId;
    public int defaultPickLocationLevel5Id;
    public double grossPrice;
    public boolean isMaintainStock;
    public double shopStock;
    public double freeStock;
    public double futureStock;
    public double locationsStock;
    public double openPurchaseOrders;
    public double openSaleOrders;
    public double openReservations;
    public double openReturnsField;
    public double minimumStock;
    public double maximumStock;
    public WS_Enums.OrderMethod orderMethod;
    public int lastCashSaleRowId;
    public int lastInvoiceSaleRowId;
    public String lastStockChangeDateTime;
    public double avgFifoPcePurchasePrice;
    public int alternatePreferredSupplierId;
    public double calculatedMinStock;
    public double calculatedMaxStock;
    public double limitCalculatedMinStock;
    public double limitCalculatedMaxStock;
    public boolean ignoreAutoStockValues;
    public String autoStockLog;
    public int autoStockMinStockPercentage;
    public int autoStockMaxStockPercentage;
    public boolean manualMinMaxStock;
    public double lastCalculatedAutoStockTotalSaleAmount;
    public int lastCalculatedAutoStockSaleDays;
    public String lastCalculatedAutoStockOldestSaleDateTime;
    public int companyId;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;

    public ViewStoreProductInfo() {
    }

    public ViewStoreProductInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("StoreNumber")) {
            Object obj = soapObject.getProperty("StoreNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storeNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                storeNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StoreDescription")) {
            Object obj = soapObject.getProperty("StoreDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storeDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                storeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductNumber")) {
            Object obj = soapObject.getProperty("ProductNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ExternalCode")) {
            Object obj = soapObject.getProperty("ExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("MainBarcode")) {
            Object obj = soapObject.getProperty("MainBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mainBarcode = Long.parseLong(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mainBarcode = (Long) obj;
            }
        }
        if (soapObject.hasProperty("ProductDescription")) {
            Object obj = soapObject.getProperty("ProductDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                productDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductCategoryId")) {
            Object obj = soapObject.getProperty("ProductCategoryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productCategoryId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productCategoryId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DefaultPickLocationCode")) {
            Object obj = soapObject.getProperty("DefaultPickLocationCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultPickLocationCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                defaultPickLocationCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("CombinationStock")) {
            Object obj = soapObject.getProperty("CombinationStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                combinationStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                combinationStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("CombinationFreeStock")) {
            Object obj = soapObject.getProperty("CombinationFreeStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                combinationFreeStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                combinationFreeStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossProfitPrice")) {
            Object obj = soapObject.getProperty("GrossProfitPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossProfitPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossProfitPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossProfitPercentage")) {
            Object obj = soapObject.getProperty("GrossProfitPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossProfitPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossProfitPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierGeneralName")) {
            Object obj = soapObject.getProperty("PreferredSupplierGeneralName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierGeneralName = j.toString();
            } else if (obj != null && obj instanceof String) {
                preferredSupplierGeneralName = (String) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierNumber")) {
            Object obj = soapObject.getProperty("PreferredSupplierNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                preferredSupplierNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierId")) {
            Object obj = soapObject.getProperty("PreferredSupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                preferredSupplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("AppliedGrossPrice")) {
            Object obj = soapObject.getProperty("AppliedGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                appliedGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                appliedGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePricePerAmount")) {
            Object obj = soapObject.getProperty("PurchasePricePerAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePricePerAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchasePricePerAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossPurchasePrice")) {
            Object obj = soapObject.getProperty("GrossPurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePrice")) {
            Object obj = soapObject.getProperty("PurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OwnPurchasePrice")) {
            Object obj = soapObject.getProperty("OwnPurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ownPurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                ownPurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseUnitToPurchaseContentUnitFactor")) {
            Object obj = soapObject.getProperty("PurchaseUnitToPurchaseContentUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseUnitToPurchaseContentUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseUnitToPurchaseContentUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseContentUnitToConsumerUnitFactor")) {
            Object obj = soapObject.getProperty("PurchaseContentUnitToConsumerUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseContentUnitToConsumerUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseContentUnitToConsumerUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MinimumOrderQuantity")) {
            Object obj = soapObject.getProperty("MinimumOrderQuantity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                minimumOrderQuantity = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                minimumOrderQuantity = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePriceType")) {
            Object obj = soapObject.getProperty("PurchasePriceType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePriceType = WS_Enums.PurchasePriceType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("PurchaseStatusRowId")) {
            Object obj = soapObject.getProperty("PurchaseStatusRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseStatusRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchaseStatusRowId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OrderCode")) {
            Object obj = soapObject.getProperty("OrderCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                orderCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("DoesMaintainStock")) {
            Object obj = soapObject.getProperty("DoesMaintainStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                doesMaintainStock = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                doesMaintainStock = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("DefaultDeliveryDays")) {
            Object obj = soapObject.getProperty("DefaultDeliveryDays");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultDeliveryDays = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultDeliveryDays = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StockedItem")) {
            Object obj = soapObject.getProperty("StockedItem");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                stockedItem = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                stockedItem = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("AppliedPcePurchasePrice")) {
            Object obj = soapObject.getProperty("AppliedPcePurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                appliedPcePurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                appliedPcePurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Stock")) {
            Object obj = soapObject.getProperty("Stock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                stock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                stock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("StoreId")) {
            Object obj = soapObject.getProperty("StoreId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                storeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductId")) {
            Object obj = soapObject.getProperty("ProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DefaultPickLocationLevel5Id")) {
            Object obj = soapObject.getProperty("DefaultPickLocationLevel5Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultPickLocationLevel5Id = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultPickLocationLevel5Id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("GrossPrice")) {
            Object obj = soapObject.getProperty("GrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsMaintainStock")) {
            Object obj = soapObject.getProperty("IsMaintainStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isMaintainStock = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isMaintainStock = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ShopStock")) {
            Object obj = soapObject.getProperty("ShopStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shopStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                shopStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FreeStock")) {
            Object obj = soapObject.getProperty("FreeStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                freeStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                freeStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FutureStock")) {
            Object obj = soapObject.getProperty("FutureStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                futureStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                futureStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LocationsStock")) {
            Object obj = soapObject.getProperty("LocationsStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                locationsStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                locationsStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenPurchaseOrders")) {
            Object obj = soapObject.getProperty("OpenPurchaseOrders");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openPurchaseOrders = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openPurchaseOrders = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenSaleOrders")) {
            Object obj = soapObject.getProperty("OpenSaleOrders");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openSaleOrders = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openSaleOrders = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenReservations")) {
            Object obj = soapObject.getProperty("OpenReservations");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openReservations = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openReservations = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenReturns")) {
            Object obj = soapObject.getProperty("OpenReturns");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openReturnsField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openReturnsField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MinimumStock")) {
            Object obj = soapObject.getProperty("MinimumStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                minimumStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                minimumStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MaximumStock")) {
            Object obj = soapObject.getProperty("MaximumStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                maximumStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                maximumStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OrderMethod")) {
            Object obj = soapObject.getProperty("OrderMethod");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderMethod = WS_Enums.OrderMethod.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("LastCashSaleRowId")) {
            Object obj = soapObject.getProperty("LastCashSaleRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastCashSaleRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastCashSaleRowId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastInvoiceSaleRowId")) {
            Object obj = soapObject.getProperty("LastInvoiceSaleRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastInvoiceSaleRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastInvoiceSaleRowId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastStockChangeDateTime")) {
            Object obj = soapObject.getProperty("LastStockChangeDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastStockChangeDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastStockChangeDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("AvgFifoPcePurchasePrice")) {
            Object obj = soapObject.getProperty("AvgFifoPcePurchasePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                avgFifoPcePurchasePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                avgFifoPcePurchasePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("AlternatePreferredSupplierId")) {
            Object obj = soapObject.getProperty("AlternatePreferredSupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                alternatePreferredSupplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                alternatePreferredSupplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CalculatedMinStock")) {
            Object obj = soapObject.getProperty("CalculatedMinStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculatedMinStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                calculatedMinStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("CalculatedMaxStock")) {
            Object obj = soapObject.getProperty("CalculatedMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculatedMaxStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                calculatedMaxStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LimitCalculatedMinStock")) {
            Object obj = soapObject.getProperty("LimitCalculatedMinStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                limitCalculatedMinStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                limitCalculatedMinStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LimitCalculatedMaxStock")) {
            Object obj = soapObject.getProperty("LimitCalculatedMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                limitCalculatedMaxStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                limitCalculatedMaxStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IgnoreAutoStockValues")) {
            Object obj = soapObject.getProperty("IgnoreAutoStockValues");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ignoreAutoStockValues = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                ignoreAutoStockValues = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("AutoStockLog")) {
            Object obj = soapObject.getProperty("AutoStockLog");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                autoStockLog = j.toString();
            } else if (obj != null && obj instanceof String) {
                autoStockLog = (String) obj;
            }
        }
        if (soapObject.hasProperty("AutoStockMinStockPercentage")) {
            Object obj = soapObject.getProperty("AutoStockMinStockPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                autoStockMinStockPercentage = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                autoStockMinStockPercentage = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("AutoStockMaxStockPercentage")) {
            Object obj = soapObject.getProperty("AutoStockMaxStockPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                autoStockMaxStockPercentage = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                autoStockMaxStockPercentage = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ManualMinMaxStock")) {
            Object obj = soapObject.getProperty("ManualMinMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                manualMinMaxStock = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                manualMinMaxStock = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("LastCalculatedAutoStockTotalSaleAmount")) {
            Object obj = soapObject.getProperty("LastCalculatedAutoStockTotalSaleAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastCalculatedAutoStockTotalSaleAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastCalculatedAutoStockTotalSaleAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LastCalculatedAutoStockSaleDays")) {
            Object obj = soapObject.getProperty("LastCalculatedAutoStockSaleDays");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastCalculatedAutoStockSaleDays = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastCalculatedAutoStockSaleDays = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastCalculatedAutoStockOldestSaleDateTime")) {
            Object obj = soapObject.getProperty("LastCalculatedAutoStockOldestSaleDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastCalculatedAutoStockOldestSaleDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastCalculatedAutoStockOldestSaleDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId")) {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId")) {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime")) {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId")) {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return storeNumber;
            case 1:
                return storeDescription;
            case 2:
                return productNumber;
            case 3:
                return externalCode;
            case 4:
                return mainBarcode;
            case 5:
                return productDescription;
            case 6:
                return productCategoryId;
            case 7:
                return defaultPickLocationCode;
            case 8:
                return combinationStock;
            case 9:
                return combinationFreeStock;
            case 10:
                return grossProfitPrice;
            case 11:
                return grossProfitPercentage;
            case 12:
                return preferredSupplierGeneralName;
            case 13:
                return preferredSupplierNumber;
            case 14:
                return preferredSupplierId;
            case 15:
                return appliedGrossPrice;
            case 16:
                return purchasePricePerAmount;
            case 17:
                return grossPurchasePrice;
            case 18:
                return purchasePrice;
            case 19:
                return ownPurchasePrice;
            case 20:
                return purchaseUnitToPurchaseContentUnitFactor;
            case 21:
                return purchaseContentUnitToConsumerUnitFactor;
            case 22:
                return minimumOrderQuantity;
            case 23:
                return purchasePriceType.toString();
            case 24:
                return purchaseStatusRowId;
            case 25:
                return orderCode;
            case 26:
                return doesMaintainStock;
            case 27:
                return defaultDeliveryDays;
            case 28:
                return stockedItem;
            case 29:
                return appliedPcePurchasePrice;
            case 30:
                return stock;
            case 31:
                return storeId;
            case 32:
                return productId;
            case 33:
                return defaultPickLocationLevel5Id;
            case 34:
                return grossPrice;
            case 35:
                return isMaintainStock;
            case 36:
                return shopStock;
            case 37:
                return freeStock;
            case 38:
                return futureStock;
            case 39:
                return locationsStock;
            case 40:
                return openPurchaseOrders;
            case 41:
                return openSaleOrders;
            case 42:
                return openReservations;
            case 43:
                return openReturnsField;
            case 44:
                return minimumStock;
            case 45:
                return maximumStock;
            case 46:
                return orderMethod.toString();
            case 47:
                return lastCashSaleRowId;
            case 48:
                return lastInvoiceSaleRowId;
            case 49:
                return lastStockChangeDateTime;
            case 50:
                return avgFifoPcePurchasePrice;
            case 51:
                return alternatePreferredSupplierId;
            case 52:
                return calculatedMinStock;
            case 53:
                return calculatedMaxStock;
            case 54:
                return limitCalculatedMinStock;
            case 55:
                return limitCalculatedMaxStock;
            case 56:
                return ignoreAutoStockValues;
            case 57:
                return autoStockLog;
            case 58:
                return autoStockMinStockPercentage;
            case 59:
                return autoStockMaxStockPercentage;
            case 60:
                return manualMinMaxStock;
            case 61:
                return lastCalculatedAutoStockTotalSaleAmount;
            case 62:
                return lastCalculatedAutoStockSaleDays;
            case 63:
                return lastCalculatedAutoStockOldestSaleDateTime;
            case 64:
                return companyId;
            case 65:
                return createdByUserId;
            case 66:
                return createdDateTime;
            case 67:
                return lastModifiedByUserId;
            case 68:
                return lastModifiedDateTime;
            case 69:
                return itemId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 70;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "StoreNumber";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StoreDescription";
                break;
            case 2:
                info.type = Long.class;
                info.name = "ProductNumber";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalCode";
                break;
            case 4:
                info.type = Long.class;
                info.name = "MainBarcode";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductDescription";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductCategoryId";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DefaultPickLocationCode";
                break;
            case 8:
                info.type = Double.class;
                info.name = "CombinationStock";
                break;
            case 9:
                info.type = Double.class;
                info.name = "CombinationFreeStock";
                break;
            case 10:
                info.type = Double.class;
                info.name = "GrossProfitPrice";
                break;
            case 11:
                info.type = Double.class;
                info.name = "GrossProfitPercentage";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PreferredSupplierGeneralName";
                break;
            case 13:
                info.type = Long.class;
                info.name = "PreferredSupplierNumber";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PreferredSupplierId";
                break;
            case 15:
                info.type = Double.class;
                info.name = "AppliedGrossPrice";
                break;
            case 16:
                info.type = Double.class;
                info.name = "PurchasePricePerAmount";
                break;
            case 17:
                info.type = Double.class;
                info.name = "GrossPurchasePrice";
                break;
            case 18:
                info.type = Double.class;
                info.name = "PurchasePrice";
                break;
            case 19:
                info.type = Double.class;
                info.name = "OwnPurchasePrice";
                break;
            case 20:
                info.type = Double.class;
                info.name = "PurchaseUnitToPurchaseContentUnitFactor";
                break;
            case 21:
                info.type = Double.class;
                info.name = "PurchaseContentUnitToConsumerUnitFactor";
                break;
            case 22:
                info.type = Double.class;
                info.name = "MinimumOrderQuantity";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchasePriceType";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PurchaseStatusRowId";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderCode";
                break;
            case 26:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DoesMaintainStock";
                break;
            case 27:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DefaultDeliveryDays";
                break;
            case 28:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "StockedItem";
                break;
            case 29:
                info.type = Double.class;
                info.name = "AppliedPcePurchasePrice";
                break;
            case 30:
                info.type = Double.class;
                info.name = "Stock";
                break;
            case 31:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "StoreId";
                break;
            case 32:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductId";
                break;
            case 33:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DefaultPickLocationLevel5Id";
                break;
            case 34:
                info.type = Double.class;
                info.name = "GrossPrice";
                break;
            case 35:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsMaintainStock";
                break;
            case 36:
                info.type = Double.class;
                info.name = "ShopStock";
                break;
            case 37:
                info.type = Double.class;
                info.name = "FreeStock";
                break;
            case 38:
                info.type = Double.class;
                info.name = "FutureStock";
                break;
            case 39:
                info.type = Double.class;
                info.name = "LocationsStock";
                break;
            case 40:
                info.type = Double.class;
                info.name = "OpenPurchaseOrders";
                break;
            case 41:
                info.type = Double.class;
                info.name = "OpenSaleOrders";
                break;
            case 42:
                info.type = Double.class;
                info.name = "OpenReservations";
                break;
            case 43:
                info.type = Double.class;
                info.name = "OpenReturns";
                break;
            case 44:
                info.type = Double.class;
                info.name = "MinimumStock";
                break;
            case 45:
                info.type = Double.class;
                info.name = "MaximumStock";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderMethod";
                break;
            case 47:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastCashSaleRowId";
                break;
            case 48:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastInvoiceSaleRowId";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastStockChangeDateTime";
                break;
            case 50:
                info.type = Double.class;
                info.name = "AvgFifoPcePurchasePrice";
                break;
            case 51:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "AlternatePreferredSupplierId";
                break;
            case 52:
                info.type = Double.class;
                info.name = "CalculatedMinStock";
                break;
            case 53:
                info.type = Double.class;
                info.name = "CalculatedMaxStock";
                break;
            case 54:
                info.type = Double.class;
                info.name = "LimitCalculatedMinStock";
                break;
            case 55:
                info.type = Double.class;
                info.name = "LimitCalculatedMaxStock";
                break;
            case 56:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IgnoreAutoStockValues";
                break;
            case 57:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AutoStockLog";
                break;
            case 58:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "AutoStockMinStockPercentage";
                break;
            case 59:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "AutoStockMaxStockPercentage";
                break;
            case 60:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ManualMinMaxStock";
                break;
            case 61:
                info.type = Double.class;
                info.name = "LastCalculatedAutoStockTotalSaleAmount";
                break;
            case 62:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastCalculatedAutoStockSaleDays";
                break;
            case 63:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastCalculatedAutoStockOldestSaleDateTime";
                break;
            case 64:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 65:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 66:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 67:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 68:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 69:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
