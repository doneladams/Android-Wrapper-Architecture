package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 9/8/2017 11:54:00 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//


import android.os.AsyncTask;

import com.retailvistaapi.BuildConfig;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.kxml2.kdom.Element;

import CommonClass.APICommonClassNew;
import CommonClass.CommonUtils;
import CommonClass.StaticValues;

public class WebserviceFinancialComponents {

    public String NAMESPACE = "http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents";
    public String url = StaticValues.BASE_URL + "/FinancialComponents.asmx";
    public int timeOut = 10000;
    public IWsdl2CodeEvents eventHandler;
    public Retail3000AuthenticateToken retail3000AuthenticateTokenValue;
    public WS_Enums.SoapProtocolVersion soapVersion;

/*
    public WebserviceFinancialComponents() {
    }

    public WebserviceFinancialComponents(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }
*/

    public WebserviceFinancialComponents(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url + "/FinancialComponents.asmx";

    }

    /*   public WebserviceFinancialComponents(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
           this.eventHandler = eventHandler;
           this.url = url + "/FinancialComponents.asmx";
           this.setTimeOut(timeOutInSeconds);
       }
   */
    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void AddPrePaymentRequestAsync(PrePaymentRequestInfo prePaymentRequest) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddPrePaymentRequestAsync(prePaymentRequest, null);
    }

    public void AddPrePaymentRequestAsync(final PrePaymentRequestInfo prePaymentRequest, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return AddPrePaymentRequest(prePaymentRequest, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddPrePaymentRequest", result);
                }
            }
        }.execute();
    }

    public int AddPrePaymentRequest(PrePaymentRequestInfo prePaymentRequest) {
        return AddPrePaymentRequest(prePaymentRequest, null);
    }

    public int AddPrePaymentRequest(PrePaymentRequestInfo prePaymentRequest, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents", "AddPrePaymentRequest");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents", "prePaymentRequest", new PrePaymentRequestInfo().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("prePaymentRequest", prePaymentRequest);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
           /* if (headers != null) {
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/AddPrePaymentRequest", soapEnvelope, headers);
            } else {*/
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/AddPrePaymentRequest", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            /*}*/
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GetUniquePrePaymentRequestNumberAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUniquePrePaymentRequestNumberAsync(null);
    }

    public void GetUniquePrePaymentRequestNumberAsync(final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return GetUniquePrePaymentRequestNumber(authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUniquePrePaymentRequestNumber", result);
                }
            }
        }.execute();
    }

    public int GetUniquePrePaymentRequestNumber() {
        return GetUniquePrePaymentRequestNumber(null);
    }

    public int GetUniquePrePaymentRequestNumber(ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents", "GetUniquePrePaymentRequestNumber");

        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
/*            if (headers!=null){
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/GetUniquePrePaymentRequestNumber", soapEnvelope,headers);
            }else{*/
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/GetUniquePrePaymentRequestNumber", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            /*}*/
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }


    public void GetSinglePrePaymentAsync(int itemId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSinglePrePaymentAsync(itemId, null);
    }

    public void GetSinglePrePaymentAsync(final int itemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, PrePaymentInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected PrePaymentInfo doInBackground(Void... params) {
                return GetSinglePrePayment(itemId, authenticateToken);
            }

            @Override
            protected void onPostExecute(PrePaymentInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetSinglePrePayment", result);
                }
            }
        }.execute();
    }

    public PrePaymentInfo GetSinglePrePayment(int itemId) {
        return GetSinglePrePayment(itemId, null);
    }

    public PrePaymentInfo GetSinglePrePayment(int itemId, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents", "GetSinglePrePayment");
        soapReq.addProperty("itemId", itemId);
        soapEnvelope.setOutputSoapObject(soapReq);

        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }

        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            /*if (headers!=null){
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/GetSinglePrePayment", soapEnvelope,headers);
            }else{*/
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/GetSinglePrePayment", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

           /* }*/
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    PrePaymentInfo resultVariable = new PrePaymentInfo(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


    public void GetPrePaymentRequestsAsync(PrePaymentRequestsFilter filter, int offset, int maxRecords, String orderBy, int skipItemId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPrePaymentRequestsAsync(filter, offset, maxRecords, orderBy, skipItemId, null);
    }

    public void GetPrePaymentRequestsAsync(final PrePaymentRequestsFilter filter, final int offset, final int maxRecords, final String orderBy, final int skipItemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewPrePaymentRequestInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewPrePaymentRequestInfo doInBackground(Void... params) {
                return GetPrePaymentRequests(filter, offset, maxRecords, orderBy, skipItemId, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewPrePaymentRequestInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetPrePaymentRequests", result);
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        }.execute();
    }

    public VectorViewPrePaymentRequestInfo GetPrePaymentRequests(PrePaymentRequestsFilter filter, int offset, int maxRecords, String orderBy, int skipItemId) {
        return GetPrePaymentRequests(filter, offset, maxRecords, orderBy, skipItemId, null);
    }

    public VectorViewPrePaymentRequestInfo GetPrePaymentRequests(PrePaymentRequestsFilter filter, int offset, int maxRecords, String orderBy, int skipItemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents", "GetPrePaymentRequests");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents", "filter", new PrePaymentRequestsFilter().getClass());
        soapReq.addProperty("filter", filter);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("maxRecords", maxRecords);

        soapEnvelope.setOutputSoapObject(soapReq);

        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }

        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
           /* if (headers!=null){
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/GetPrePaymentRequests", soapEnvelope,authenticateToken);
            }else{*/
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceFinancialComponents/GetPrePaymentRequests", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            //  }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewPrePaymentRequestInfo resultVariable = new VectorViewPrePaymentRequestInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

}
