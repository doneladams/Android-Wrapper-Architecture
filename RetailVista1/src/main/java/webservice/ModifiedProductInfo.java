package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/11/2017 5:10:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class ModifiedProductInfo implements KvmSerializable {

    public int replacementProductId;
    public long productNumber;
    public long mainBarcode;
    public String externalCode;
    public int plu;
    public String searchText;
    public String description;
    public String posDescription;
    public String formattedDescription;
    public String note1;
    public String note2;
    public String note3;
    public String note4;
    public String info;
    public String information;
    public String cbsCode;
    public int classificationLevel1IdField;
    public int classificationLevel2IdField;
    public int classificationLevel3IdField;
    public int classificationLevel4IdField;
    public int classificationLevel5IdField;
    public int productCategoryId;
    public int brandId;
    public int subBrandId;
    public int disposalFeeId;
    public int productCombinationGroupId;
    public int preferredSupplierId;
    public String productAssortmentCode;
    public int sizeTypeId;
    public int sizeId;
    public int assortmentId;
    public int vatId;
    public double grossPrice;
    public double advicePrice;
    public int defaultSaleAmount;
    public double defaultDecimalSaleAmount;
    public int saleUnitDimensionId;
    public int saleUnitPackageIdField;
    public WS_Enums.RelatedProductsType relatedProductsType;
    public boolean isNoSavings;
    public boolean isNoDiscounts;
    public boolean isNoDiscountOnDiscount;
    public boolean isNoMixedMatchDiscount;
    public boolean isNoQuantityPriceBreakDiscount;
    public boolean isNoDiscountAgreementDiscount;
    public double length;
    public double height;
    public double width;
    public double depth;
    public double weight;
    public int sizeIsoDimensionIdPackageField;
    public double lengthPackageField;
    public double heightPackageField;
    public double widthPackageField;
    public double depthPackageField;
    public int contentIsoDimensionId;
    public int contentIsoPackageIdField;
    public double netContent;
    public double grossWeight;
    public boolean isScaleIntegration;
    public boolean isKitchenArticle;
    public boolean isTrackAndTraceProduct;
    public boolean isAskForDescriptionInPos;
    public boolean isAskForPriceInPos;
    public boolean isAskForAmountInPos;
    public boolean isPriceZeroAllowed;
    public boolean isAllowDiscountPercentageModification;
    public boolean isAllowPriceModification;
    public boolean isSerialAdministration;
    public boolean isAllowMultiplePricing;
    public boolean isProductGroup;
    public boolean isSale;
    public boolean isConsignmentProduct;
    public boolean isCancelled;
    public double consumerUnitToSaleUnitFactor;
    public String assortmentCode;
    public int articleGroupId;
    public String lastModifiedDateTime;
    public int colorId;
    public int externalProductId;
    public String storageLocation;
    public int measurementIsoDimensionId;
    public int weightIsoDimensionId;
    public boolean isPriceBlocked;
    public boolean isIncludeInStockValue;
    public int followupNumber;
    public int giftCardTypeId;
    public boolean isGiftCard;
    public String exchangeRemarks;
    public int posMessageId;
    public int itemId;

    public boolean isSelected() {
        return isSelected;
    }

    public void setSelected(boolean selected) {
        isSelected = selected;
    }

    private boolean isSelected;
    public ModifiedProductInfo() {
    }

    public ModifiedProductInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("ReplacementProductId")) {
            Object obj = soapObject.getProperty("ReplacementProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                replacementProductId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                replacementProductId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductNumber")) {
            Object obj = soapObject.getProperty("ProductNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("MainBarcode")) {
            Object obj = soapObject.getProperty("MainBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mainBarcode = Long.parseLong(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mainBarcode = (Long) obj;
            }
        }
        if (soapObject.hasProperty("ExternalCode")) {
            Object obj = soapObject.getProperty("ExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("Plu")) {
            Object obj = soapObject.getProperty("Plu");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                plu = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                plu = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SearchText")) {
            Object obj = soapObject.getProperty("SearchText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                searchText = j.toString();
            } else if (obj != null && obj instanceof String) {
                searchText = (String) obj;
            }
        }
        if (soapObject.hasProperty("Description")) {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                description = j.toString();
            } else if (obj != null && obj instanceof String) {
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("PosDescription")) {
            Object obj = soapObject.getProperty("PosDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                posDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                posDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("FormattedDescription")) {
            Object obj = soapObject.getProperty("FormattedDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                formattedDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                formattedDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note1")) {
            Object obj = soapObject.getProperty("Note1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note2")) {
            Object obj = soapObject.getProperty("Note2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note2 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note3")) {
            Object obj = soapObject.getProperty("Note3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note3 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Note4")) {
            Object obj = soapObject.getProperty("Note4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                note4 = j.toString();
            } else if (obj != null && obj instanceof String) {
                note4 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Info")) {
            Object obj = soapObject.getProperty("Info");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                info = j.toString();
            } else if (obj != null && obj instanceof String) {
                info = (String) obj;
            }
        }
        if (soapObject.hasProperty("Information")) {
            Object obj = soapObject.getProperty("Information");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                information = j.toString();
            } else if (obj != null && obj instanceof String) {
                information = (String) obj;
            }
        }
        if (soapObject.hasProperty("CbsCode")) {
            Object obj = soapObject.getProperty("CbsCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cbsCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                cbsCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel1Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel1Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel1IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel1IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel2Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel2Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel2IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel2IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel3Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel3Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel3IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel3IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel4Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel4Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel4IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel4IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ClassificationLevel5Id")) {
            Object obj = soapObject.getProperty("ClassificationLevel5Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                classificationLevel5IdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                classificationLevel5IdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductCategoryId")) {
            Object obj = soapObject.getProperty("ProductCategoryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productCategoryId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productCategoryId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("BrandId")) {
            Object obj = soapObject.getProperty("BrandId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                brandId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SubBrandId")) {
            Object obj = soapObject.getProperty("SubBrandId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                subBrandId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                subBrandId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DisposalFeeId")) {
            Object obj = soapObject.getProperty("DisposalFeeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                disposalFeeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                disposalFeeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductCombinationGroupId")) {
            Object obj = soapObject.getProperty("ProductCombinationGroupId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productCombinationGroupId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productCombinationGroupId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierId")) {
            Object obj = soapObject.getProperty("PreferredSupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                preferredSupplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductAssortmentCode")) {
            Object obj = soapObject.getProperty("ProductAssortmentCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productAssortmentCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                productAssortmentCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeTypeId")) {
            Object obj = soapObject.getProperty("SizeTypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeTypeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                sizeTypeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SizeId")) {
            Object obj = soapObject.getProperty("SizeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                sizeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("AssortmentId")) {
            Object obj = soapObject.getProperty("AssortmentId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                assortmentId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                assortmentId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatId")) {
            Object obj = soapObject.getProperty("VatId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("GrossPrice")) {
            Object obj = soapObject.getProperty("GrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("AdvicePrice")) {
            Object obj = soapObject.getProperty("AdvicePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                advicePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                advicePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DefaultSaleAmount")) {
            Object obj = soapObject.getProperty("DefaultSaleAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultSaleAmount = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultSaleAmount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DefaultDecimalSaleAmount")) {
            Object obj = soapObject.getProperty("DefaultDecimalSaleAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                defaultDecimalSaleAmount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                defaultDecimalSaleAmount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitDimensionId")) {
            Object obj = soapObject.getProperty("SaleUnitDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleUnitDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleUnitPackageId")) {
            Object obj = soapObject.getProperty("SaleUnitPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleUnitPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleUnitPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("RelatedProductsType")) {
            Object obj = soapObject.getProperty("RelatedProductsType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                relatedProductsType = WS_Enums.RelatedProductsType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsNoSavings")) {
            Object obj = soapObject.getProperty("IsNoSavings");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoSavings = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoSavings = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscounts")) {
            Object obj = soapObject.getProperty("IsNoDiscounts");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscounts = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscounts = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscountOnDiscount")) {
            Object obj = soapObject.getProperty("IsNoDiscountOnDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscountOnDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscountOnDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoMixedMatchDiscount")) {
            Object obj = soapObject.getProperty("IsNoMixedMatchDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoMixedMatchDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoMixedMatchDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoQuantityPriceBreakDiscount")) {
            Object obj = soapObject.getProperty("IsNoQuantityPriceBreakDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoQuantityPriceBreakDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoQuantityPriceBreakDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsNoDiscountAgreementDiscount")) {
            Object obj = soapObject.getProperty("IsNoDiscountAgreementDiscount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isNoDiscountAgreementDiscount = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isNoDiscountAgreementDiscount = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Length")) {
            Object obj = soapObject.getProperty("Length");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                length = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                length = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Height")) {
            Object obj = soapObject.getProperty("Height");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                height = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                height = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Width")) {
            Object obj = soapObject.getProperty("Width");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                width = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                width = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Depth")) {
            Object obj = soapObject.getProperty("Depth");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                depth = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                depth = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Weight")) {
            Object obj = soapObject.getProperty("Weight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                weight = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                weight = (Double) obj;
            }
        }
        if (soapObject.hasProperty("SizeIsoDimensionIdPackage")) {
            Object obj = soapObject.getProperty("SizeIsoDimensionIdPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeIsoDimensionIdPackageField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                sizeIsoDimensionIdPackageField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LengthPackage")) {
            Object obj = soapObject.getProperty("LengthPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lengthPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lengthPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("HeightPackage")) {
            Object obj = soapObject.getProperty("HeightPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                heightPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                heightPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("WidthPackage")) {
            Object obj = soapObject.getProperty("WidthPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                widthPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                widthPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DepthPackage")) {
            Object obj = soapObject.getProperty("DepthPackage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                depthPackageField = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                depthPackageField = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ContentIsoDimensionId")) {
            Object obj = soapObject.getProperty("ContentIsoDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                contentIsoDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                contentIsoDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ContentIsoPackageId")) {
            Object obj = soapObject.getProperty("ContentIsoPackageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                contentIsoPackageIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                contentIsoPackageIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NetContent")) {
            Object obj = soapObject.getProperty("NetContent");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                netContent = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                netContent = (Double) obj;
            }
        }
        if (soapObject.hasProperty("GrossWeight")) {
            Object obj = soapObject.getProperty("GrossWeight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossWeight = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossWeight = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsScaleIntegration")) {
            Object obj = soapObject.getProperty("IsScaleIntegration");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isScaleIntegration = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isScaleIntegration = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsKitchenArticle")) {
            Object obj = soapObject.getProperty("IsKitchenArticle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isKitchenArticle = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isKitchenArticle = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsTrackAndTraceProduct")) {
            Object obj = soapObject.getProperty("IsTrackAndTraceProduct");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isTrackAndTraceProduct = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isTrackAndTraceProduct = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAskForDescriptionInPos")) {
            Object obj = soapObject.getProperty("IsAskForDescriptionInPos");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAskForDescriptionInPos = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAskForDescriptionInPos = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAskForPriceInPos")) {
            Object obj = soapObject.getProperty("IsAskForPriceInPos");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAskForPriceInPos = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAskForPriceInPos = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAskForAmountInPos")) {
            Object obj = soapObject.getProperty("IsAskForAmountInPos");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAskForAmountInPos = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAskForAmountInPos = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsPriceZeroAllowed")) {
            Object obj = soapObject.getProperty("IsPriceZeroAllowed");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isPriceZeroAllowed = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isPriceZeroAllowed = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAllowDiscountPercentageModification")) {
            Object obj = soapObject.getProperty("IsAllowDiscountPercentageModification");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAllowDiscountPercentageModification = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAllowDiscountPercentageModification = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAllowPriceModification")) {
            Object obj = soapObject.getProperty("IsAllowPriceModification");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAllowPriceModification = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAllowPriceModification = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsSerialAdministration")) {
            Object obj = soapObject.getProperty("IsSerialAdministration");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isSerialAdministration = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isSerialAdministration = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsAllowMultiplePricing")) {
            Object obj = soapObject.getProperty("IsAllowMultiplePricing");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isAllowMultiplePricing = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isAllowMultiplePricing = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsProductGroup")) {
            Object obj = soapObject.getProperty("IsProductGroup");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isProductGroup = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isProductGroup = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsSale")) {
            Object obj = soapObject.getProperty("IsSale");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isSale = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isSale = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsConsignmentProduct")) {
            Object obj = soapObject.getProperty("IsConsignmentProduct");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isConsignmentProduct = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isConsignmentProduct = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsCancelled")) {
            Object obj = soapObject.getProperty("IsCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isCancelled = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isCancelled = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ConsumerUnitToSaleUnitFactor")) {
            Object obj = soapObject.getProperty("ConsumerUnitToSaleUnitFactor");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                consumerUnitToSaleUnitFactor = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                consumerUnitToSaleUnitFactor = (Double) obj;
            }
        }
        if (soapObject.hasProperty("AssortmentCode")) {
            Object obj = soapObject.getProperty("AssortmentCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                assortmentCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                assortmentCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ArticleGroupId")) {
            Object obj = soapObject.getProperty("ArticleGroupId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                articleGroupId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                articleGroupId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ColorId")) {
            Object obj = soapObject.getProperty("ColorId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                colorId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                colorId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ExternalProductId")) {
            Object obj = soapObject.getProperty("ExternalProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalProductId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                externalProductId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StorageLocation")) {
            Object obj = soapObject.getProperty("StorageLocation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storageLocation = j.toString();
            } else if (obj != null && obj instanceof String) {
                storageLocation = (String) obj;
            }
        }
        if (soapObject.hasProperty("MeasurementIsoDimensionId")) {
            Object obj = soapObject.getProperty("MeasurementIsoDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                measurementIsoDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                measurementIsoDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("WeightIsoDimensionId")) {
            Object obj = soapObject.getProperty("WeightIsoDimensionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                weightIsoDimensionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                weightIsoDimensionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsPriceBlocked")) {
            Object obj = soapObject.getProperty("IsPriceBlocked");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isPriceBlocked = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isPriceBlocked = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IsIncludeInStockValue")) {
            Object obj = soapObject.getProperty("IsIncludeInStockValue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isIncludeInStockValue = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isIncludeInStockValue = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("FollowupNumber")) {
            Object obj = soapObject.getProperty("FollowupNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                followupNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                followupNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("GiftCardTypeId")) {
            Object obj = soapObject.getProperty("GiftCardTypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                giftCardTypeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                giftCardTypeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsGiftCard")) {
            Object obj = soapObject.getProperty("IsGiftCard");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isGiftCard = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isGiftCard = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ExchangeRemarks")) {
            Object obj = soapObject.getProperty("ExchangeRemarks");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                exchangeRemarks = j.toString();
            } else if (obj != null && obj instanceof String) {
                exchangeRemarks = (String) obj;
            }
        }
        if (soapObject.hasProperty("PosMessageId")) {
            Object obj = soapObject.getProperty("PosMessageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                posMessageId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                posMessageId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return replacementProductId;
            case 1:
                return productNumber;
            case 2:
                return mainBarcode;
            case 3:
                return externalCode;
            case 4:
                return plu;
            case 5:
                return searchText;
            case 6:
                return description;
            case 7:
                return posDescription;
            case 8:
                return formattedDescription;
            case 9:
                return note1;
            case 10:
                return note2;
            case 11:
                return note3;
            case 12:
                return note4;
            case 13:
                return info;
            case 14:
                return information;
            case 15:
                return cbsCode;
            case 16:
                return classificationLevel1IdField;
            case 17:
                return classificationLevel2IdField;
            case 18:
                return classificationLevel3IdField;
            case 19:
                return classificationLevel4IdField;
            case 20:
                return classificationLevel5IdField;
            case 21:
                return productCategoryId;
            case 22:
                return brandId;
            case 23:
                return subBrandId;
            case 24:
                return disposalFeeId;
            case 25:
                return productCombinationGroupId;
            case 26:
                return preferredSupplierId;
            case 27:
                return productAssortmentCode;
            case 28:
                return sizeTypeId;
            case 29:
                return sizeId;
            case 30:
                return assortmentId;
            case 31:
                return vatId;
            case 32:
                return grossPrice;
            case 33:
                return advicePrice;
            case 34:
                return defaultSaleAmount;
            case 35:
                return defaultDecimalSaleAmount;
            case 36:
                return saleUnitDimensionId;
            case 37:
                return saleUnitPackageIdField;
            case 38:
                return relatedProductsType.toString();
            case 39:
                return isNoSavings;
            case 40:
                return isNoDiscounts;
            case 41:
                return isNoDiscountOnDiscount;
            case 42:
                return isNoMixedMatchDiscount;
            case 43:
                return isNoQuantityPriceBreakDiscount;
            case 44:
                return isNoDiscountAgreementDiscount;
            case 45:
                return length;
            case 46:
                return height;
            case 47:
                return width;
            case 48:
                return depth;
            case 49:
                return weight;
            case 50:
                return sizeIsoDimensionIdPackageField;
            case 51:
                return lengthPackageField;
            case 52:
                return heightPackageField;
            case 53:
                return widthPackageField;
            case 54:
                return depthPackageField;
            case 55:
                return contentIsoDimensionId;
            case 56:
                return contentIsoPackageIdField;
            case 57:
                return netContent;
            case 58:
                return grossWeight;
            case 59:
                return isScaleIntegration;
            case 60:
                return isKitchenArticle;
            case 61:
                return isTrackAndTraceProduct;
            case 62:
                return isAskForDescriptionInPos;
            case 63:
                return isAskForPriceInPos;
            case 64:
                return isAskForAmountInPos;
            case 65:
                return isPriceZeroAllowed;
            case 66:
                return isAllowDiscountPercentageModification;
            case 67:
                return isAllowPriceModification;
            case 68:
                return isSerialAdministration;
            case 69:
                return isAllowMultiplePricing;
            case 70:
                return isProductGroup;
            case 71:
                return isSale;
            case 72:
                return isConsignmentProduct;
            case 73:
                return isCancelled;
            case 74:
                return consumerUnitToSaleUnitFactor;
            case 75:
                return assortmentCode;
            case 76:
                return articleGroupId;
            case 77:
                return lastModifiedDateTime;
            case 78:
                return colorId;
            case 79:
                return externalProductId;
            case 80:
                return storageLocation;
            case 81:
                return measurementIsoDimensionId;
            case 82:
                return weightIsoDimensionId;
            case 83:
                return isPriceBlocked;
            case 84:
                return isIncludeInStockValue;
            case 85:
                return followupNumber;
            case 86:
                return giftCardTypeId;
            case 87:
                return isGiftCard;
            case 88:
                return exchangeRemarks;
            case 89:
                return posMessageId;
            case 90:
                return itemId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 91;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ReplacementProductId";
                break;
            case 1:
                info.type = Long.class;
                info.name = "ProductNumber";
                break;
            case 2:
                info.type = Long.class;
                info.name = "MainBarcode";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalCode";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Plu";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SearchText";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PosDescription";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "FormattedDescription";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note1";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note2";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note3";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note4";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Info";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Information";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CbsCode";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel1Id";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel2Id";
                break;
            case 18:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel3Id";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel4Id";
                break;
            case 20:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ClassificationLevel5Id";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductCategoryId";
                break;
            case 22:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "BrandId";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SubBrandId";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DisposalFeeId";
                break;
            case 25:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductCombinationGroupId";
                break;
            case 26:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PreferredSupplierId";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductAssortmentCode";
                break;
            case 28:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SizeTypeId";
                break;
            case 29:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SizeId";
                break;
            case 30:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "AssortmentId";
                break;
            case 31:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "VatId";
                break;
            case 32:
                info.type = Double.class;
                info.name = "GrossPrice";
                break;
            case 33:
                info.type = Double.class;
                info.name = "AdvicePrice";
                break;
            case 34:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DefaultSaleAmount";
                break;
            case 35:
                info.type = Double.class;
                info.name = "DefaultDecimalSaleAmount";
                break;
            case 36:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleUnitDimensionId";
                break;
            case 37:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleUnitPackageId";
                break;
            case 38:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RelatedProductsType";
                break;
            case 39:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoSavings";
                break;
            case 40:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscounts";
                break;
            case 41:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscountOnDiscount";
                break;
            case 42:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoMixedMatchDiscount";
                break;
            case 43:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoQuantityPriceBreakDiscount";
                break;
            case 44:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsNoDiscountAgreementDiscount";
                break;
            case 45:
                info.type = Double.class;
                info.name = "Length";
                break;
            case 46:
                info.type = Double.class;
                info.name = "Height";
                break;
            case 47:
                info.type = Double.class;
                info.name = "Width";
                break;
            case 48:
                info.type = Double.class;
                info.name = "Depth";
                break;
            case 49:
                info.type = Double.class;
                info.name = "Weight";
                break;
            case 50:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SizeIsoDimensionIdPackage";
                break;
            case 51:
                info.type = Double.class;
                info.name = "LengthPackage";
                break;
            case 52:
                info.type = Double.class;
                info.name = "HeightPackage";
                break;
            case 53:
                info.type = Double.class;
                info.name = "WidthPackage";
                break;
            case 54:
                info.type = Double.class;
                info.name = "DepthPackage";
                break;
            case 55:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ContentIsoDimensionId";
                break;
            case 56:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ContentIsoPackageId";
                break;
            case 57:
                info.type = Double.class;
                info.name = "NetContent";
                break;
            case 58:
                info.type = Double.class;
                info.name = "GrossWeight";
                break;
            case 59:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsScaleIntegration";
                break;
            case 60:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsKitchenArticle";
                break;
            case 61:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsTrackAndTraceProduct";
                break;
            case 62:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAskForDescriptionInPos";
                break;
            case 63:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAskForPriceInPos";
                break;
            case 64:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAskForAmountInPos";
                break;
            case 65:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsPriceZeroAllowed";
                break;
            case 66:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAllowDiscountPercentageModification";
                break;
            case 67:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAllowPriceModification";
                break;
            case 68:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSerialAdministration";
                break;
            case 69:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsAllowMultiplePricing";
                break;
            case 70:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsProductGroup";
                break;
            case 71:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSale";
                break;
            case 72:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsConsignmentProduct";
                break;
            case 73:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCancelled";
                break;
            case 74:
                info.type = Double.class;
                info.name = "ConsumerUnitToSaleUnitFactor";
                break;
            case 75:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AssortmentCode";
                break;
            case 76:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ArticleGroupId";
                break;
            case 77:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 78:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ColorId";
                break;
            case 79:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ExternalProductId";
                break;
            case 80:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StorageLocation";
                break;
            case 81:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "MeasurementIsoDimensionId";
                break;
            case 82:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "WeightIsoDimensionId";
                break;
            case 83:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsPriceBlocked";
                break;
            case 84:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsIncludeInStockValue";
                break;
            case 85:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "FollowupNumber";
                break;
            case 86:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "GiftCardTypeId";
                break;
            case 87:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsGiftCard";
                break;
            case 88:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExchangeRemarks";
                break;
            case 89:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PosMessageId";
                break;
            case 90:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }

//    @Override //    public String getInnerText() { //        return null; //    } // // //    @Override //    public void setInnerText(String s) { //    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
