package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 9/8/2017 11:59:10 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ViewLabelDefinitionInfo implements KvmSerializable {
    
    public String labelTypeDescription;
    public String thermalPrinterLanguageDescription;
    public String labelClassDescriptionField;
    public int organizationLabelDefinitionId;
    public String description;
    public String externalCode;
    public WS_Enums.LabelType labelType;
    public int thermalPrinterLanguageId;
    public int labelClassIdField;
    public String startPrinting;
    public String startLabel;
    public String label;
    public String stopLabel;
    public String stopPrinting;
    public int horizontalLabels;
    public boolean isPrintDescriptions;
    public boolean property1;
    public boolean property2;
    public boolean property3;
    public boolean property4;
    public boolean property5;
    public boolean property6;
    public boolean property7;
    public boolean property8;
    public boolean property9;
    public boolean property10;
    public int codePage;
    public String encoding;
    public boolean isCancelled;
    public int organizationId;
    public int companyId;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;
    
    public ViewLabelDefinitionInfo(){}
    
    public ViewLabelDefinitionInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("LabelTypeDescription"))
        {
            Object obj = soapObject.getProperty("LabelTypeDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelTypeDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                labelTypeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ThermalPrinterLanguageDescription"))
        {
            Object obj = soapObject.getProperty("ThermalPrinterLanguageDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                thermalPrinterLanguageDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                thermalPrinterLanguageDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("LabelClassDescription"))
        {
            Object obj = soapObject.getProperty("LabelClassDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelClassDescriptionField = j.toString();
            }else if (obj!= null && obj instanceof String){
                labelClassDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationLabelDefinitionId"))
        {
            Object obj = soapObject.getProperty("OrganizationLabelDefinitionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                organizationLabelDefinitionId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                organizationLabelDefinitionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Description"))
        {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExternalCode"))
        {
            Object obj = soapObject.getProperty("ExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                externalCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                externalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("LabelType"))
        {
            Object obj = soapObject.getProperty("LabelType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                labelType = WS_Enums.LabelType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("ThermalPrinterLanguageId"))
        {
            Object obj = soapObject.getProperty("ThermalPrinterLanguageId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                thermalPrinterLanguageId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                thermalPrinterLanguageId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LabelClassId"))
        {
            Object obj = soapObject.getProperty("LabelClassId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                labelClassIdField = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                labelClassIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StartPrinting"))
        {
            Object obj = soapObject.getProperty("StartPrinting");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startPrinting = j.toString();
            }else if (obj!= null && obj instanceof String){
                startPrinting = (String) obj;
            }
        }
        if (soapObject.hasProperty("StartLabel"))
        {
            Object obj = soapObject.getProperty("StartLabel");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startLabel = j.toString();
            }else if (obj!= null && obj instanceof String){
                startLabel = (String) obj;
            }
        }
        if (soapObject.hasProperty("Label"))
        {
            Object obj = soapObject.getProperty("Label");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                label = j.toString();
            }else if (obj!= null && obj instanceof String){
                label = (String) obj;
            }
        }
        if (soapObject.hasProperty("StopLabel"))
        {
            Object obj = soapObject.getProperty("StopLabel");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stopLabel = j.toString();
            }else if (obj!= null && obj instanceof String){
                stopLabel = (String) obj;
            }
        }
        if (soapObject.hasProperty("StopPrinting"))
        {
            Object obj = soapObject.getProperty("StopPrinting");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                stopPrinting = j.toString();
            }else if (obj!= null && obj instanceof String){
                stopPrinting = (String) obj;
            }
        }
        if (soapObject.hasProperty("HorizontalLabels"))
        {
            Object obj = soapObject.getProperty("HorizontalLabels");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                horizontalLabels = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                horizontalLabels = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsPrintDescriptions"))
        {
            Object obj = soapObject.getProperty("IsPrintDescriptions");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                isPrintDescriptions = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isPrintDescriptions = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property1"))
        {
            Object obj = soapObject.getProperty("Property1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property1 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property1 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property2"))
        {
            Object obj = soapObject.getProperty("Property2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property2 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property2 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property3"))
        {
            Object obj = soapObject.getProperty("Property3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property3 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property3 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property4"))
        {
            Object obj = soapObject.getProperty("Property4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property4 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property4 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property5"))
        {
            Object obj = soapObject.getProperty("Property5");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property5 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property5 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property6"))
        {
            Object obj = soapObject.getProperty("Property6");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property6 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property6 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property7"))
        {
            Object obj = soapObject.getProperty("Property7");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property7 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property7 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property8"))
        {
            Object obj = soapObject.getProperty("Property8");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property8 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property8 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property9"))
        {
            Object obj = soapObject.getProperty("Property9");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property9 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property9 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Property10"))
        {
            Object obj = soapObject.getProperty("Property10");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                property10 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                property10 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("CodePage"))
        {
            Object obj = soapObject.getProperty("CodePage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                codePage = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                codePage = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Encoding"))
        {
            Object obj = soapObject.getProperty("Encoding");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                encoding = j.toString();
            }else if (obj!= null && obj instanceof String){
                encoding = (String) obj;
            }
        }
        if (soapObject.hasProperty("IsCancelled"))
        {
            Object obj = soapObject.getProperty("IsCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                isCancelled = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isCancelled = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationId"))
        {
            Object obj = soapObject.getProperty("OrganizationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                organizationId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                organizationId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId"))
        {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId"))
        {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime"))
        {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                createdDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId"))
        {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime"))
        {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId"))
        {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                itemId = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return labelTypeDescription;
            case 1:
                return thermalPrinterLanguageDescription;
            case 2:
                return labelClassDescriptionField;
            case 3:
                return organizationLabelDefinitionId;
            case 4:
                return description;
            case 5:
                return externalCode;
            case 6:
                return labelType.toString();
            case 7:
                return thermalPrinterLanguageId;
            case 8:
                return labelClassIdField;
            case 9:
                return startPrinting;
            case 10:
                return startLabel;
            case 11:
                return label;
            case 12:
                return stopLabel;
            case 13:
                return stopPrinting;
            case 14:
                return horizontalLabels;
            case 15:
                return isPrintDescriptions;
            case 16:
                return property1;
            case 17:
                return property2;
            case 18:
                return property3;
            case 19:
                return property4;
            case 20:
                return property5;
            case 21:
                return property6;
            case 22:
                return property7;
            case 23:
                return property8;
            case 24:
                return property9;
            case 25:
                return property10;
            case 26:
                return codePage;
            case 27:
                return encoding;
            case 28:
                return isCancelled;
            case 29:
                return organizationId;
            case 30:
                return companyId;
            case 31:
                return createdByUserId;
            case 32:
                return createdDateTime;
            case 33:
                return lastModifiedByUserId;
            case 34:
                return lastModifiedDateTime;
            case 35:
                return itemId;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 36;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LabelTypeDescription";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ThermalPrinterLanguageDescription";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LabelClassDescription";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OrganizationLabelDefinitionId";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalCode";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LabelType";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ThermalPrinterLanguageId";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LabelClassId";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartPrinting";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartLabel";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Label";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StopLabel";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StopPrinting";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "HorizontalLabels";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsPrintDescriptions";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property1";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property2";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property3";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property4";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property5";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property6";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property7";
                break;
            case 23:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property8";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property9";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Property10";
                break;
            case 26:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CodePage";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Encoding";
                break;
            case 28:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCancelled";
                break;
            case 29:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OrganizationId";
                break;
            case 30:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 31:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 33:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 35:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }
    
    //    @Override
//    public String getInnerText() {
//        return null;
//    }
//
//
//    @Override
//    public void setInnerText(String s) {
//    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
