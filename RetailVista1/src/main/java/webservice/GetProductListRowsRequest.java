package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class GetProductListRowsRequest implements KvmSerializable {
    public int offset;
    public String orderBy;
    //    public int recordCount;
    public ProductListRowsFilter filter;
/*    public WS_Enums.FieldsToReturnType fieldsToReturnField;
    public int skipItemId;

    public int pagingTreshold;*/

    public GetProductListRowsRequest() {
    }

    public GetProductListRowsRequest(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Offset")) {
            Object obj = soapObject.getProperty("Offset");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                offset = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                offset = (Integer) obj;
            }
        }
/*        if (soapObject.hasProperty("RecordCount")) {
            Object obj = soapObject.getProperty("RecordCount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                recordCount = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                recordCount = (Integer) obj;
            }
        }*/
        if (soapObject.hasProperty("Filter")) {
            SoapObject j = (SoapObject) soapObject.getProperty("Filter");
            filter = new ProductListRowsFilter(j);

        }
/*        if (soapObject.hasProperty("FieldsToReturn")) {
            Object obj = soapObject.getProperty("FieldsToReturn");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                fieldsToReturnField = WS_Enums.FieldsToReturnType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("SkipItemId")) {
            Object obj = soapObject.getProperty("SkipItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                skipItemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                skipItemId = (Integer) obj;
            }
        }
*/
        if (soapObject.hasProperty("OrderBy")) {
            Object obj = soapObject.getProperty("OrderBy");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderBy = j.toString();
            } else if (obj != null && obj instanceof String) {
                orderBy = (String) obj;
            }
        }

  /*      if (soapObject.hasProperty("PagingTreshold")) {
            Object obj = soapObject.getProperty("PagingTreshold");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pagingTreshold = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pagingTreshold = (Integer) obj;
            }
        }*/
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return offset;
            case 1:
                return orderBy;
            case 2:
                return filter;

/*            case 0:
                return fieldsToReturnField.toString();
            case 1:
                return skipItemId;

                 case 1:
                return recordCount;
            case 6:
                return pagingTreshold;*/
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 3;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Offset";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderBy";
                break;
            case 2:
                info.type = ProductListRowsFilter.class;
                info.name = "Filter";
                break;

/*
                case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RecordCount";
                break;

            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "FieldsToReturn";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SkipItemId";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderBy";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PagingTreshold";
                break;
*/
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
