package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class ViewProductListRowInfo implements KvmSerializable {

    public double pceNetPrice;
    public String productDescription;
    public String brandDescription;
    public long productNumber;
    public double productGrossPrice;
    public int productPreferredSupplierId;
    public String vatCode;
    public int vatId;
    public double vatPercentage;
    public boolean isMultiplePricing;
    public double grossPriceDifference;
    public boolean isSale;
    public double totalVat;
    public String cashRegisterGroupCode;
    public String cashRegisterGroupDescription;
    public String orderCode;
    public long mainBarcode;
    public double productAdvicePrice;
    public String barcodeStream;
    public double purchasePcePrice;
    public String preferredSupplierName;
    public long preferredSupplierNumber;
    public String productExternalCode;
    public String productNote1;
    public String productNote2;
    public String productNote3;
    public String productNote4;
    public String size;
    public String sizeTypeDescription;
    public String sizeTypeCode;
    public double stock;
    public double freeStock;
    public String labelClassDescriptionField;
    public String createdByUserFullName;
    public String lastModifiedByUserFullName;
    public double futureStock;
    public double openPurchaseOrders;
    public double openSaleOrders;
    public double openReservations;
    public double minimumStock;
    public double maximumStock;
    public double calculatedMinStock;
    public double calculatedMaxStock;
    public double limitCalculatedMinStock;
    public double limitCalculatedMaxStock;
    public boolean manualMinMaxStock;
    public WS_Enums.OrderMethod orderMethod;
    public String purchaseStatusCode;
    public String purchaseStatusDescription;
    public int companyId;
    public int productListId;
    public int parentProductListRowId;
    public double amount;
    public int productId;
    public int brandId;
    public int supplierId;
    public int referenceNumber;
    public double pceGrossPrice;
    public double totalGrossPrice;
    public double totalNetPrice;
    public String description;
    public double discountPrice;
    public double discountPercentage;
    public WS_Enums.SalePriceType priceType;
    public double weightedTotalNetPrice;
    public long barcode;
    public long conversionId;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;
    public boolean isFailed = false;
    public boolean isChecked = false;
    public double shopStock = 0;

    public ViewProductListRowInfo() {
    }

    public ViewProductListRowInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("PceNetPrice")) {
            Object obj = soapObject.getProperty("PceNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pceNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pceNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ProductDescription")) {
            Object obj = soapObject.getProperty("ProductDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                productDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("BrandDescription")) {
            Object obj = soapObject.getProperty("BrandDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                brandDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductNumber")) {
            Object obj = soapObject.getProperty("ProductNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductGrossPrice")) {
            Object obj = soapObject.getProperty("ProductGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ProductPreferredSupplierId")) {
            Object obj = soapObject.getProperty("ProductPreferredSupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productPreferredSupplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productPreferredSupplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatCode")) {
            Object obj = soapObject.getProperty("VatCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                vatCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("VatId")) {
            Object obj = soapObject.getProperty("VatId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatPercentage")) {
            Object obj = soapObject.getProperty("VatPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsMultiplePricing")) {
            Object obj = soapObject.getProperty("IsMultiplePricing");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isMultiplePricing = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isMultiplePricing = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("GrossPriceDifference")) {
            Object obj = soapObject.getProperty("GrossPriceDifference");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                grossPriceDifference = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                grossPriceDifference = (Double) obj;
            }
        }
        if (soapObject.hasProperty("IsSale")) {
            Object obj = soapObject.getProperty("IsSale");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isSale = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isSale = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("TotalVat")) {
            Object obj = soapObject.getProperty("TotalVat");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalVat = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalVat = (Double) obj;
            }
        }
        if (soapObject.hasProperty("CashRegisterGroupCode")) {
            Object obj = soapObject.getProperty("CashRegisterGroupCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cashRegisterGroupCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                cashRegisterGroupCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("CashRegisterGroupDescription")) {
            Object obj = soapObject.getProperty("CashRegisterGroupDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                cashRegisterGroupDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                cashRegisterGroupDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("OrderCode")) {
            Object obj = soapObject.getProperty("OrderCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                orderCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("MainBarcode")) {
            Object obj = soapObject.getProperty("MainBarcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                mainBarcode = Long.parseLong(j.toString());
            } else if (obj != null && obj instanceof Number) {
                mainBarcode = (Long) obj;
            }
        }
        if (soapObject.hasProperty("ProductAdvicePrice")) {
            Object obj = soapObject.getProperty("ProductAdvicePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productAdvicePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productAdvicePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("BarcodeStream")) {
            Object obj = soapObject.getProperty("BarcodeStream");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                barcodeStream = j.toString();
            } else if (obj != null && obj instanceof String) {
                barcodeStream = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchasePcePrice")) {
            Object obj = soapObject.getProperty("PurchasePcePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchasePcePrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                purchasePcePrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierName")) {
            Object obj = soapObject.getProperty("PreferredSupplierName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierName = j.toString();
            } else if (obj != null && obj instanceof String) {
                preferredSupplierName = (String) obj;
            }
        }
        if (soapObject.hasProperty("PreferredSupplierNumber")) {
            Object obj = soapObject.getProperty("PreferredSupplierNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                preferredSupplierNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                preferredSupplierNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductExternalCode")) {
            Object obj = soapObject.getProperty("ProductExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productExternalCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                productExternalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductNote1")) {
            Object obj = soapObject.getProperty("ProductNote1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNote1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                productNote1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductNote2")) {
            Object obj = soapObject.getProperty("ProductNote2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNote2 = j.toString();
            } else if (obj != null && obj instanceof String) {
                productNote2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductNote3")) {
            Object obj = soapObject.getProperty("ProductNote3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNote3 = j.toString();
            } else if (obj != null && obj instanceof String) {
                productNote3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("ProductNote4")) {
            Object obj = soapObject.getProperty("ProductNote4");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productNote4 = j.toString();
            } else if (obj != null && obj instanceof String) {
                productNote4 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Size")) {
            Object obj = soapObject.getProperty("Size");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                size = j.toString();
            } else if (obj != null && obj instanceof String) {
                size = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeTypeDescription")) {
            Object obj = soapObject.getProperty("SizeTypeDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeTypeDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                sizeTypeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SizeTypeCode")) {
            Object obj = soapObject.getProperty("SizeTypeCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                sizeTypeCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                sizeTypeCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("Stock")) {
            Object obj = soapObject.getProperty("Stock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                stock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                stock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FreeStock")) {
            Object obj = soapObject.getProperty("FreeStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                freeStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                freeStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LabelClassDescription")) {
            Object obj = soapObject.getProperty("LabelClassDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                labelClassDescriptionField = j.toString();
            } else if (obj != null && obj instanceof String) {
                labelClassDescriptionField = (String) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserFullName")) {
            Object obj = soapObject.getProperty("CreatedByUserFullName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserFullName = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdByUserFullName = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserFullName")) {
            Object obj = soapObject.getProperty("LastModifiedByUserFullName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserFullName = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedByUserFullName = (String) obj;
            }
        }
        if (soapObject.hasProperty("FutureStock")) {
            Object obj = soapObject.getProperty("FutureStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                futureStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                futureStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenPurchaseOrders")) {
            Object obj = soapObject.getProperty("OpenPurchaseOrders");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openPurchaseOrders = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openPurchaseOrders = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenSaleOrders")) {
            Object obj = soapObject.getProperty("OpenSaleOrders");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openSaleOrders = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openSaleOrders = (Double) obj;
            }
        }
        if (soapObject.hasProperty("OpenReservations")) {
            Object obj = soapObject.getProperty("OpenReservations");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                openReservations = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                openReservations = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MinimumStock")) {
            Object obj = soapObject.getProperty("MinimumStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                minimumStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                minimumStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("MaximumStock")) {
            Object obj = soapObject.getProperty("MaximumStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                maximumStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                maximumStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("CalculatedMinStock")) {
            Object obj = soapObject.getProperty("CalculatedMinStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculatedMinStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                calculatedMinStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("CalculatedMaxStock")) {
            Object obj = soapObject.getProperty("CalculatedMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                calculatedMaxStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                calculatedMaxStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LimitCalculatedMinStock")) {
            Object obj = soapObject.getProperty("LimitCalculatedMinStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                limitCalculatedMinStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                limitCalculatedMinStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("LimitCalculatedMaxStock")) {
            Object obj = soapObject.getProperty("LimitCalculatedMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                limitCalculatedMaxStock = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                limitCalculatedMaxStock = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ManualMinMaxStock")) {
            Object obj = soapObject.getProperty("ManualMinMaxStock");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                manualMinMaxStock = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                manualMinMaxStock = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("OrderMethod")) {
            Object obj = soapObject.getProperty("OrderMethod");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderMethod = WS_Enums.OrderMethod.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("PurchaseStatusCode")) {
            Object obj = soapObject.getProperty("PurchaseStatusCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseStatusCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseStatusCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("PurchaseStatusDescription")) {
            Object obj = soapObject.getProperty("PurchaseStatusDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                purchaseStatusDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                purchaseStatusDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId")) {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ProductListId")) {
            Object obj = soapObject.getProperty("ProductListId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productListId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productListId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ParentProductListRowId")) {
            Object obj = soapObject.getProperty("ParentProductListRowId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                parentProductListRowId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                parentProductListRowId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Amount")) {
            Object obj = soapObject.getProperty("Amount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                amount = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                amount = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ProductId")) {
            Object obj = soapObject.getProperty("ProductId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                productId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                productId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("BrandId")) {
            Object obj = soapObject.getProperty("BrandId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                brandId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                brandId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SupplierId")) {
            Object obj = soapObject.getProperty("SupplierId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                supplierId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                supplierId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ReferenceNumber")) {
            Object obj = soapObject.getProperty("ReferenceNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                referenceNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                referenceNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PceGrossPrice")) {
            Object obj = soapObject.getProperty("PceGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pceGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                pceGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalGrossPrice")) {
            Object obj = soapObject.getProperty("TotalGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalGrossPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalNetPrice")) {
            Object obj = soapObject.getProperty("TotalNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Description")) {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                description = j.toString();
            } else if (obj != null && obj instanceof String) {
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("DiscountPrice")) {
            Object obj = soapObject.getProperty("DiscountPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("DiscountPercentage")) {
            Object obj = soapObject.getProperty("DiscountPercentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountPercentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountPercentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PriceType")) {
            Object obj = soapObject.getProperty("PriceType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                priceType = WS_Enums.SalePriceType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("WeightedTotalNetPrice")) {
            Object obj = soapObject.getProperty("WeightedTotalNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                weightedTotalNetPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                weightedTotalNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("Barcode")) {
            Object obj = soapObject.getProperty("Barcode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                barcode = Long.parseLong(j.toString());
            } else if (obj != null && obj instanceof Number) {
                barcode = (Long) obj;
            }
        }
        if (soapObject.hasProperty("ConversionId")) {
            Object obj = soapObject.getProperty("ConversionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                conversionId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                conversionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId")) {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime")) {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId")) {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return pceNetPrice;
            case 1:
                return productDescription;
            case 2:
                return brandDescription;
            case 3:
                return productNumber;
            case 4:
                return productGrossPrice;
            case 5:
                return productPreferredSupplierId;
            case 6:
                return vatCode;
            case 7:
                return vatId;
            case 8:
                return vatPercentage;
            case 9:
                return isMultiplePricing;
            case 10:
                return grossPriceDifference;
            case 11:
                return isSale;
            case 12:
                return totalVat;
            case 13:
                return cashRegisterGroupCode;
            case 14:
                return cashRegisterGroupDescription;
            case 15:
                return orderCode;
            case 16:
                return mainBarcode;
            case 17:
                return productAdvicePrice;
            case 18:
                return barcodeStream;
            case 19:
                return purchasePcePrice;
            case 20:
                return preferredSupplierName;
            case 21:
                return preferredSupplierNumber;
            case 22:
                return productExternalCode;
            case 23:
                return productNote1;
            case 24:
                return productNote2;
            case 25:
                return productNote3;
            case 26:
                return productNote4;
            case 27:
                return size;
            case 28:
                return sizeTypeDescription;
            case 29:
                return sizeTypeCode;
            case 30:
                return stock;
            case 31:
                return freeStock;
            case 32:
                return labelClassDescriptionField;
            case 33:
                return createdByUserFullName;
            case 34:
                return lastModifiedByUserFullName;
            case 35:
                return futureStock;
            case 36:
                return openPurchaseOrders;
            case 37:
                return openSaleOrders;
            case 38:
                return openReservations;
            case 39:
                return minimumStock;
            case 40:
                return maximumStock;
            case 41:
                return calculatedMinStock;
            case 42:
                return calculatedMaxStock;
            case 43:
                return limitCalculatedMinStock;
            case 44:
                return limitCalculatedMaxStock;
            case 45:
                return manualMinMaxStock;
            case 46:
                return orderMethod.toString();
            case 47:
                return purchaseStatusCode;
            case 48:
                return purchaseStatusDescription;
            case 49:
                return companyId;
            case 50:
                return productListId;
            case 51:
                return parentProductListRowId;
            case 52:
                return amount;
            case 53:
                return productId;
            case 54:
                return brandId;
            case 55:
                return supplierId;
            case 56:
                return referenceNumber;
            case 57:
                return pceGrossPrice;
            case 58:
                return totalGrossPrice;
            case 59:
                return totalNetPrice;
            case 60:
                return description;
            case 61:
                return discountPrice;
            case 62:
                return discountPercentage;
            case 63:
                return priceType.toString();
            case 64:
                return weightedTotalNetPrice;
            case 65:
                return barcode;
            case 66:
                return conversionId;
            case 67:
                return createdByUserId;
            case 68:
                return createdDateTime;
            case 69:
                return lastModifiedByUserId;
            case 70:
                return lastModifiedDateTime;
            case 71:
                return itemId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 72;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = Double.class;
                info.name = "PceNetPrice";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductDescription";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "BrandDescription";
                break;
            case 3:
                info.type = Long.class;
                info.name = "ProductNumber";
                break;
            case 4:
                info.type = Double.class;
                info.name = "ProductGrossPrice";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductPreferredSupplierId";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "VatCode";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "VatId";
                break;
            case 8:
                info.type = Double.class;
                info.name = "VatPercentage";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsMultiplePricing";
                break;
            case 10:
                info.type = Double.class;
                info.name = "GrossPriceDifference";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSale";
                break;
            case 12:
                info.type = Double.class;
                info.name = "TotalVat";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CashRegisterGroupCode";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CashRegisterGroupDescription";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderCode";
                break;
            case 16:
                info.type = Long.class;
                info.name = "MainBarcode";
                break;
            case 17:
                info.type = Double.class;
                info.name = "ProductAdvicePrice";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "BarcodeStream";
                break;
            case 19:
                info.type = Double.class;
                info.name = "PurchasePcePrice";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PreferredSupplierName";
                break;
            case 21:
                info.type = Long.class;
                info.name = "PreferredSupplierNumber";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductExternalCode";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductNote1";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductNote2";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductNote3";
                break;
            case 26:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProductNote4";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Size";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SizeTypeDescription";
                break;
            case 29:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SizeTypeCode";
                break;
            case 30:
                info.type = Double.class;
                info.name = "Stock";
                break;
            case 31:
                info.type = Double.class;
                info.name = "FreeStock";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LabelClassDescription";
                break;
            case 33:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedByUserFullName";
                break;
            case 34:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedByUserFullName";
                break;
            case 35:
                info.type = Double.class;
                info.name = "FutureStock";
                break;
            case 36:
                info.type = Double.class;
                info.name = "OpenPurchaseOrders";
                break;
            case 37:
                info.type = Double.class;
                info.name = "OpenSaleOrders";
                break;
            case 38:
                info.type = Double.class;
                info.name = "OpenReservations";
                break;
            case 39:
                info.type = Double.class;
                info.name = "MinimumStock";
                break;
            case 40:
                info.type = Double.class;
                info.name = "MaximumStock";
                break;
            case 41:
                info.type = Double.class;
                info.name = "CalculatedMinStock";
                break;
            case 42:
                info.type = Double.class;
                info.name = "CalculatedMaxStock";
                break;
            case 43:
                info.type = Double.class;
                info.name = "LimitCalculatedMinStock";
                break;
            case 44:
                info.type = Double.class;
                info.name = "LimitCalculatedMaxStock";
                break;
            case 45:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ManualMinMaxStock";
                break;
            case 46:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderMethod";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseStatusCode";
                break;
            case 48:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PurchaseStatusDescription";
                break;
            case 49:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 50:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductListId";
                break;
            case 51:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ParentProductListRowId";
                break;
            case 52:
                info.type = Double.class;
                info.name = "Amount";
                break;
            case 53:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ProductId";
                break;
            case 54:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "BrandId";
                break;
            case 55:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SupplierId";
                break;
            case 56:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ReferenceNumber";
                break;
            case 57:
                info.type = Double.class;
                info.name = "PceGrossPrice";
                break;
            case 58:
                info.type = Double.class;
                info.name = "TotalGrossPrice";
                break;
            case 59:
                info.type = Double.class;
                info.name = "TotalNetPrice";
                break;
            case 60:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 61:
                info.type = Double.class;
                info.name = "DiscountPrice";
                break;
            case 62:
                info.type = Double.class;
                info.name = "DiscountPercentage";
                break;
            case 63:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PriceType";
                break;
            case 64:
                info.type = Double.class;
                info.name = "WeightedTotalNetPrice";
                break;
            case 65:
                info.type = Long.class;
                info.name = "Barcode";
                break;
            case 66:
                info.type = Long.class;
                info.name = "ConversionId";
                break;
            case 67:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 68:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 69:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 70:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 71:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
