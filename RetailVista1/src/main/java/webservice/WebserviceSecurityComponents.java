package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/17/2017 7:05:39 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import com.retailvistaapi.BuildConfig;

import java.lang.*;

import CommonClass.APICommonClassNew;
import CommonClass.CommonUtils;
import CommonClass.StaticValues;
import webservice.WS_Enums.*;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.kxml2.kdom.Element;


public class WebserviceSecurityComponents {

    public String NAMESPACE = "http://retail3000.net/Retail3000Webservice/WebserviceSecurityComponents";
    public String url = "";
    public int timeOut = 30000;
    public IWsdl2CodeEvents eventHandler;
    public Retail3000AuthenticateToken retail3000AuthenticateTokenValue;
    public SoapProtocolVersion soapVersion;

    public WebserviceSecurityComponents() {
    }

    public WebserviceSecurityComponents(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public WebserviceSecurityComponents(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public WebserviceSecurityComponents(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }


    public void ValidateUserAsync(int languageId, boolean isThrowExceptions) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ValidateUserAsync(languageId, isThrowExceptions, null);
    }

    public void ValidateUserAsync(final int languageId, final boolean isThrowExceptions, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, MessageCode>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected MessageCode doInBackground(Void... params) {
                return ValidateUser(languageId, isThrowExceptions, authenticateToken);
            }

            @Override
            protected void onPostExecute(MessageCode result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ValidateUser", result);
                }
            }
        }.execute();
    }

    public MessageCode ValidateUser(int languageId, boolean isThrowExceptions) {
        return ValidateUser(languageId, isThrowExceptions, null);
    }

    public MessageCode ValidateUser(int languageId, boolean isThrowExceptions, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceSecurityComponents", "ValidateUser");
        soapReq.addProperty("languageId", languageId);
        soapReq.addProperty("isThrowExceptions", isThrowExceptions);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
           /* if (headers!=null){
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceSecurityComponents/ValidateUser", soapEnvelope,headers);
            }else{*/
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceSecurityComponents/ValidateUser", soapEnvelope,APICommonClassNew.buildAuthToken(authenticateToken));
            // }
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        MessageCode resultVariable = MessageCode.fromString(j.toString());
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


}
