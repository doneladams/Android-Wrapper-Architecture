package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/17/2017 7:04:45 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.lang.*;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class VerifyExceptionInfo implements KvmSerializable {
    
    public int messageNumber;
    public String messageCode;
    public String technicalMessage;
    public String friendlyMessage;
    public VectorString properties;
    public VectorObject additionalParameters;
    
    public VerifyExceptionInfo(){}
    
    public VerifyExceptionInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("MessageNumber"))
        {
            Object obj = soapObject.getProperty("MessageNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                messageNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                messageNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("MessageCode"))
        {
            Object obj = soapObject.getProperty("MessageCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                messageCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                messageCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("TechnicalMessage"))
        {
            Object obj = soapObject.getProperty("TechnicalMessage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                technicalMessage = j.toString();
            }else if (obj!= null && obj instanceof String){
                technicalMessage = (String) obj;
            }
        }
        if (soapObject.hasProperty("FriendlyMessage"))
        {
            Object obj = soapObject.getProperty("FriendlyMessage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                friendlyMessage = j.toString();
            }else if (obj!= null && obj instanceof String){
                friendlyMessage = (String) obj;
            }
        }
        if (soapObject.hasProperty("Properties"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Properties");
            properties = new VectorString(j);
        }
        if (soapObject.hasProperty("AdditionalParameters"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("AdditionalParameters");
            additionalParameters = new VectorObject(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return messageNumber;
            case 1:
                return messageCode;
            case 2:
                return technicalMessage;
            case 3:
                return friendlyMessage;
            case 4:
                return properties;
            case 5:
                return additionalParameters;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 6;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "MessageNumber";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "MessageCode";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TechnicalMessage";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "FriendlyMessage";
                break;
            case 4:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Properties";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "AdditionalParameters";
                break;
        }
    }
    
//    @Override //    public String getInnerText() { //        return null; //    } // // //    @Override //    public void setInnerText(String s) { //    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
