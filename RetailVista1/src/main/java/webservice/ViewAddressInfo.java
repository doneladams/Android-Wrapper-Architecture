package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/17/2017 7:04:46 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.lang.*;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ViewAddressInfo implements KvmSerializable {
    
    public String countryIsoCode;
    public String countryIsoDescription;
    public String countryDescription;
    public int customerId;
    public WS_Enums.AddressSource source;
    public String externalCode;
    public WS_Enums.AddressType2 addressType;
    public String street;
    public int numberPart1;
    public String numberPart2;
    public String address;
    public String addressDescription;
    public String zipCode;
    public String city;
    public int countryId;
    public String county;
    public String attentionOf;
    public int organizationId;
    public int companyId;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;
    
    public ViewAddressInfo(){}
    
    public ViewAddressInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("CountryIsoCode"))
        {
            Object obj = soapObject.getProperty("CountryIsoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                countryIsoCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                countryIsoCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("CountryIsoDescription"))
        {
            Object obj = soapObject.getProperty("CountryIsoDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                countryIsoDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                countryIsoDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("CountryDescription"))
        {
            Object obj = soapObject.getProperty("CountryDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                countryDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                countryDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("CustomerId"))
        {
            Object obj = soapObject.getProperty("CustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customerId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                customerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Source"))
        {
            Object obj = soapObject.getProperty("Source");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                source = WS_Enums.AddressSource.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("ExternalCode"))
        {
            Object obj = soapObject.getProperty("ExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                externalCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                externalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("AddressType"))
        {
            Object obj = soapObject.getProperty("AddressType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                addressType = WS_Enums.AddressType2.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("Street"))
        {
            Object obj = soapObject.getProperty("Street");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                street = j.toString();
            }else if (obj!= null && obj instanceof String){
                street = (String) obj;
            }
        }
        if (soapObject.hasProperty("NumberPart1"))
        {
            Object obj = soapObject.getProperty("NumberPart1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numberPart1 = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                numberPart1 = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NumberPart2"))
        {
            Object obj = soapObject.getProperty("NumberPart2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numberPart2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                numberPart2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Address"))
        {
            Object obj = soapObject.getProperty("Address");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                address = j.toString();
            }else if (obj!= null && obj instanceof String){
                address = (String) obj;
            }
        }
        if (soapObject.hasProperty("AddressDescription"))
        {
            Object obj = soapObject.getProperty("AddressDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                addressDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                addressDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("ZipCode"))
        {
            Object obj = soapObject.getProperty("ZipCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                zipCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                zipCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("City"))
        {
            Object obj = soapObject.getProperty("City");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                city = j.toString();
            }else if (obj!= null && obj instanceof String){
                city = (String) obj;
            }
        }
        if (soapObject.hasProperty("CountryId"))
        {
            Object obj = soapObject.getProperty("CountryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                countryId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                countryId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("County"))
        {
            Object obj = soapObject.getProperty("County");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                county = j.toString();
            }else if (obj!= null && obj instanceof String){
                county = (String) obj;
            }
        }
        if (soapObject.hasProperty("AttentionOf"))
        {
            Object obj = soapObject.getProperty("AttentionOf");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                attentionOf = j.toString();
            }else if (obj!= null && obj instanceof String){
                attentionOf = (String) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationId"))
        {
            Object obj = soapObject.getProperty("OrganizationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                organizationId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                organizationId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId"))
        {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId"))
        {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime"))
        {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                createdDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId"))
        {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime"))
        {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId"))
        {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                itemId = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return countryIsoCode;
            case 1:
                return countryIsoDescription;
            case 2:
                return countryDescription;
            case 3:
                return customerId;
            case 4:
                return source.toString();
            case 5:
                return externalCode;
            case 6:
                return addressType.toString();
            case 7:
                return street;
            case 8:
                return numberPart1;
            case 9:
                return numberPart2;
            case 10:
                return address;
            case 11:
                return addressDescription;
            case 12:
                return zipCode;
            case 13:
                return city;
            case 14:
                return countryId;
            case 15:
                return county;
            case 16:
                return attentionOf;
            case 17:
                return organizationId;
            case 18:
                return companyId;
            case 19:
                return createdByUserId;
            case 20:
                return createdDateTime;
            case 21:
                return lastModifiedByUserId;
            case 22:
                return lastModifiedDateTime;
            case 23:
                return itemId;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 24;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CountryIsoCode";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CountryIsoDescription";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CountryDescription";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CustomerId";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Source";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalCode";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AddressType";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Street";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "NumberPart1";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "NumberPart2";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Address";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AddressDescription";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ZipCode";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "City";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CountryId";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "County";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AttentionOf";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OrganizationId";
                break;
            case 18:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }
    
//    @Override //    public String getInnerText() { //        return null; //    } // // //    @Override //    public void setInnerText(String s) { //    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
