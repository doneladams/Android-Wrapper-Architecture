package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import webservice.WS_Enums.*;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.util.Hashtable;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class SaleOrderInfo implements KvmSerializable {
    public int itemId;
    public int orderNumber;
    public String lastModifiedDateTime;
    public int storeId;
    public int customerId;
    public WS_Enums.SaleOrderStatus orderStatus;
    public int saleOrderClassIdField;
    public SaleOrderType saleOrderType;
    public double discountPrice;
    public int transportTypeId;
    public String expectedDeliveryDate;
    public String miscInfo;
    public String referenceCode;
    public int deliveryCustomerId;
    // public int deliveryAddressId;

    public SaleOrderInfo() {
    }

    public SaleOrderInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("StoreId")) {
            Object obj = soapObject.getProperty("StoreId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                storeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                storeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CustomerId")) {
            Object obj = soapObject.getProperty("CustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                customerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                customerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OrderNumber")) {
            Object obj = soapObject.getProperty("OrderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                orderNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("OrderStatus")) {
            Object obj = soapObject.getProperty("OrderStatus");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                orderStatus = WS_Enums.SaleOrderStatus.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("SaleOrderClassId")) {
            Object obj = soapObject.getProperty("SaleOrderClassId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderClassIdField = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleOrderClassIdField = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderType")) {
            Object obj = soapObject.getProperty("SaleOrderType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleOrderType = SaleOrderType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DeliveryCustomerId")) {
            java.lang.Object obj = soapObject.getProperty("DeliveryCustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                deliveryCustomerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                deliveryCustomerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DiscountPrice")) {
            Object obj = soapObject.getProperty("DiscountPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                discountPrice = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                discountPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TransportTypeId")) {
            Object obj = soapObject.getProperty("TransportTypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                transportTypeId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                transportTypeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ExpectedDeliveryDate")) {
            Object obj = soapObject.getProperty("ExpectedDeliveryDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                expectedDeliveryDate = j.toString();
            } else if (obj != null && obj instanceof String) {
                expectedDeliveryDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("MiscInfo")) {
            Object obj = soapObject.getProperty("MiscInfo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                miscInfo = j.toString();
            } else if (obj != null && obj instanceof String) {
                miscInfo = (String) obj;
            }
        }

        if (soapObject.hasProperty("ReferenceCode")) {
            java.lang.Object obj = soapObject.getProperty("ReferenceCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                referenceCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                referenceCode = (String) obj;
            }
        }

    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return storeId;
            case 1:
                return customerId;
            case 2:
                return orderNumber;
            case 3:
                return orderStatus.toString();
            case 4:
                return saleOrderClassIdField;
            case 5:
                return saleOrderType.toString();
            case 6:
                return lastModifiedDateTime;
            case 7:
                return itemId;
            case 8:
                return discountPrice;
            case 9:
                return transportTypeId;
            case 10:
                return expectedDeliveryDate;
            case 11:
                return miscInfo;
            case 12:
                return referenceCode;
            case 13:
                return deliveryCustomerId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 14;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "StoreId";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CustomerId";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OrderNumber";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "OrderStatus";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleOrderClassId";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderType";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
            case 8:
                if (discountPrice == 0 || discountPrice == -1) {
                    info.type = PropertyInfo.LONG_CLASS;
                    info.name = "DiscountPrice1";
                    break;

                } else {
                    info.type = PropertyInfo.LONG_CLASS;
                    info.name = "DiscountPrice";
                    break;

                }

            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "TransportTypeId";
                break;
            case 10:
                if (expectedDeliveryDate.trim().isEmpty()) {
                    info.type = PropertyInfo.STRING_CLASS;
                    info.name = "ExpectedDeliveryDate1";
                    break;

                } else {
                    info.type = PropertyInfo.STRING_CLASS;
                    info.name = "ExpectedDeliveryDate";
                    break;

                }
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "MiscInfo";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ReferenceCode";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DeliveryCustomerId";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
