package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class ViewVatInfo implements KvmSerializable {

    public String countryIsoCode;
    public String countryDescription;
    public String ledgerDescription;
    public String ledgerExportCode;
    public String saleLedgerDescription;
    public String saleLedgerExportCode;
    public String nonSaleLedgerDescription;
    public String nonSaleLedgerExportCode;
    public String code;
    public String externalCode;
    public String financialExportCode;
    public String description;
    public double percentage;
    public int followupNumber;
    public int countryId;
    public int vatLedgerId;
    public int saleLedgerId;
    public int nonSaleLedgerId;
    public boolean isDerived;
    public int organizationId;
    public int companyId;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;

    public ViewVatInfo() {
    }

    public ViewVatInfo(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("CountryIsoCode")) {
            Object obj = soapObject.getProperty("CountryIsoCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                countryIsoCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                countryIsoCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("CountryDescription")) {
            Object obj = soapObject.getProperty("CountryDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                countryDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                countryDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("LedgerDescription")) {
            Object obj = soapObject.getProperty("LedgerDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ledgerDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                ledgerDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("LedgerExportCode")) {
            Object obj = soapObject.getProperty("LedgerExportCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                ledgerExportCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                ledgerExportCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleLedgerDescription")) {
            Object obj = soapObject.getProperty("SaleLedgerDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleLedgerDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleLedgerDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleLedgerExportCode")) {
            Object obj = soapObject.getProperty("SaleLedgerExportCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleLedgerExportCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                saleLedgerExportCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("NonSaleLedgerDescription")) {
            Object obj = soapObject.getProperty("NonSaleLedgerDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                nonSaleLedgerDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                nonSaleLedgerDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("NonSaleLedgerExportCode")) {
            Object obj = soapObject.getProperty("NonSaleLedgerExportCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                nonSaleLedgerExportCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                nonSaleLedgerExportCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("Code")) {
            Object obj = soapObject.getProperty("Code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                code = j.toString();
            } else if (obj != null && obj instanceof String) {
                code = (String) obj;
            }
        }
        if (soapObject.hasProperty("ExternalCode")) {
            Object obj = soapObject.getProperty("ExternalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                externalCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                externalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("FinancialExportCode")) {
            Object obj = soapObject.getProperty("FinancialExportCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                financialExportCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                financialExportCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("Description")) {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                description = j.toString();
            } else if (obj != null && obj instanceof String) {
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("Percentage")) {
            Object obj = soapObject.getProperty("Percentage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                percentage = Double.parseDouble(j.toString());
            } else if (obj != null && obj instanceof Number) {
                percentage = (Double) obj;
            }
        }
        if (soapObject.hasProperty("FollowupNumber")) {
            Object obj = soapObject.getProperty("FollowupNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                followupNumber = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                followupNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CountryId")) {
            Object obj = soapObject.getProperty("CountryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                countryId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                countryId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("VatLedgerId")) {
            Object obj = soapObject.getProperty("VatLedgerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                vatLedgerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                vatLedgerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleLedgerId")) {
            Object obj = soapObject.getProperty("SaleLedgerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                saleLedgerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                saleLedgerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("NonSaleLedgerId")) {
            Object obj = soapObject.getProperty("NonSaleLedgerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                nonSaleLedgerId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                nonSaleLedgerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IsDerived")) {
            Object obj = soapObject.getProperty("IsDerived");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                isDerived = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                isDerived = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("OrganizationId")) {
            Object obj = soapObject.getProperty("OrganizationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                organizationId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                organizationId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId")) {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId")) {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime")) {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                createdDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId")) {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime")) {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            } else if (obj != null && obj instanceof String) {
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId")) {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                itemId = (Integer) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return countryIsoCode;
            case 1:
                return countryDescription;
            case 2:
                return ledgerDescription;
            case 3:
                return ledgerExportCode;
            case 4:
                return saleLedgerDescription;
            case 5:
                return saleLedgerExportCode;
            case 6:
                return nonSaleLedgerDescription;
            case 7:
                return nonSaleLedgerExportCode;
            case 8:
                return code;
            case 9:
                return externalCode;
            case 10:
                return financialExportCode;
            case 11:
                return description;
            case 12:
                return percentage;
            case 13:
                return followupNumber;
            case 14:
                return countryId;
            case 15:
                return vatLedgerId;
            case 16:
                return saleLedgerId;
            case 17:
                return nonSaleLedgerId;
            case 18:
                return isDerived;
            case 19:
                return organizationId;
            case 20:
                return companyId;
            case 21:
                return createdByUserId;
            case 22:
                return createdDateTime;
            case 23:
                return lastModifiedByUserId;
            case 24:
                return lastModifiedDateTime;
            case 25:
                return itemId;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 26;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CountryIsoCode";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CountryDescription";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LedgerDescription";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LedgerExportCode";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleLedgerDescription";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleLedgerExportCode";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "NonSaleLedgerDescription";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "NonSaleLedgerExportCode";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Code";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExternalCode";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "FinancialExportCode";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 12:
                info.type = Double.class;
                info.name = "Percentage";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "FollowupNumber";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CountryId";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "VatLedgerId";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleLedgerId";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "NonSaleLedgerId";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsDerived";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "OrganizationId";
                break;
            case 20:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 25:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
