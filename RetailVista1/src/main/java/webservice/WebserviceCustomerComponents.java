package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/17/2017 7:04:46 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//


import android.os.AsyncTask;

import com.retailvistaapi.BuildConfig;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.kxml2.kdom.Element;

import java.util.List;

import CommonClass.APICommonClassNew;
import CommonClass.CommonUtils;
import CommonClass.StaticValues;

public class WebserviceCustomerComponents {

    public String NAMESPACE = "http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents";
    public String url = "";
    public int timeOut = 7000;
    public IWsdl2CodeEvents eventHandler;
    public Retail3000AuthenticateToken retail3000AuthenticateTokenValue;
    public WS_Enums.SoapProtocolVersion soapVersion;

    /*  public WebserviceCustomerComponents() {
      }
  */
    public WebserviceCustomerComponents(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url + "/customercomponents.asmx";
    }
/*

    public WebserviceCustomerComponents(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
*/

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }


    public void GetCustomersAsync(CustomersFilter filter, int offset, int recordCount, String orderBy) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCustomersAsync(filter, offset, recordCount, orderBy, null);
    }

    public void GetCustomersAsync(final CustomersFilter filter, final int offset, final int recordCount, final String orderBy, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewCustomerInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }


            @Override
            protected VectorViewCustomerInfo doInBackground(Void... params) {
                return GetCustomers(filter, offset, recordCount, orderBy, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewCustomerInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetCustomers", result);
                } else {
                    eventHandler.Wsdl2CodeFinished("GetCustomers", null);
                }
            }
        }.execute();
    }

    public VectorViewCustomerInfo GetCustomers(CustomersFilter filter, int offset, int recordCount, String orderBy) {
        return GetCustomers(filter, offset, recordCount, orderBy, null);
    }

    public VectorViewCustomerInfo GetCustomers(CustomersFilter filter, int offset, int recordCount, String orderBy, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "GetCustomers");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "filter", new CustomersFilter().getClass());
        soapReq.addProperty("filter", filter);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("recordCount", recordCount);
        soapReq.addProperty("orderBy", orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/GetCustomers", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewCustomerInfo resultVariable = new VectorViewCustomerInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void AddCustomerAsync(CustomerInfo customer, boolean isAutoClaim) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddCustomerAsync(customer, isAutoClaim, null);
    }

    public void AddCustomerAsync(final CustomerInfo customer, final boolean isAutoClaim, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }


            @Override
            protected Number doInBackground(Void... params) {
                return AddCustomer(customer, isAutoClaim, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddCustomer", result);
                }
            }
        }.execute();
    }

    public int AddCustomer(CustomerInfo customer, boolean isAutoClaim) {
        return AddCustomer(customer, isAutoClaim, null);
    }

    public int AddCustomer(CustomerInfo customer, boolean isAutoClaim, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "AddCustomer");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "customer", new CustomerInfo().getClass());
        soapReq.addProperty("customer", customer);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
          /*  if (headers != null) {
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/AddCustomer", soapEnvelope, headers);
            } else {*/
            if (BuildConfig.DEBUG) {
                httpTransport.debug = true;
            }
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/AddCustomer", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            //}
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void AddEmailAddressAsync(EmailAddressInfo emailAddress) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddEmailAddressAsync(emailAddress, null);
    }

    public void AddEmailAddressAsync(final EmailAddressInfo emailAddress, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }


            @Override
            protected Number doInBackground(Void... params) {
                return AddEmailAddress(emailAddress, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddEmailAddress", result);
                }
            }
        }.execute();
    }

    public int AddEmailAddress(EmailAddressInfo emailAddress) {
        return AddEmailAddress(emailAddress, null);
    }

    public int AddEmailAddress(EmailAddressInfo emailAddress, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "AddEmailAddress");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "emailAddress", new EmailAddressInfo().getClass());
        soapReq.addProperty("emailAddress", emailAddress);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (BuildConfig.DEBUG) {
                httpTransport.debug = true;
            }

            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/AddEmailAddress", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GetEmailAddressesAsync(int customerId, String email, WS_Enums.BooleanFilter isDefaultOnly, WS_Enums.BooleanFilter debtorsOnly) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetEmailAddressesAsync(customerId, email, isDefaultOnly, debtorsOnly, null);
    }

    public void GetEmailAddressesAsync(final int customerId, final String email, final WS_Enums.BooleanFilter isDefaultOnly, final WS_Enums.BooleanFilter debtorsOnly, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewEmailAddressInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }


            @Override
            protected VectorViewEmailAddressInfo doInBackground(Void... params) {
                return GetEmailAddresses(customerId, email, isDefaultOnly, debtorsOnly, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewEmailAddressInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetEmailAddresses", result);
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        }.execute();
    }

    public VectorViewEmailAddressInfo GetEmailAddresses(int customerId, String email, WS_Enums.BooleanFilter isDefaultOnly, WS_Enums.BooleanFilter debtorsOnly) {
        return GetEmailAddresses(customerId, email, isDefaultOnly, debtorsOnly, null);
    }

    public VectorViewEmailAddressInfo GetEmailAddresses(int customerId, String email, WS_Enums.BooleanFilter isDefaultOnly, WS_Enums.BooleanFilter debtorsOnly, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "GetEmailAddresses");
        soapReq.addProperty("customerId", customerId);
        soapReq.addProperty("email", email);
//        soapReq.addProperty("isDefaultOnly",isDefaultOnly.toString());
//        soapReq.addProperty("debtorsOnly",debtorsOnly.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {

            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/GetEmailAddresses", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewEmailAddressInfo resultVariable = new VectorViewEmailAddressInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


    public void UpdateEmailAddressAsync(EmailAddressInfo emailAddress, boolean isForceUpdate) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateEmailAddressAsync(emailAddress, isForceUpdate, null);
    }

    public void UpdateEmailAddressAsync(final EmailAddressInfo emailAddress, final boolean isForceUpdate, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return UpdateEmailAddress(emailAddress, isForceUpdate, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateEmailAddress", result);
                }
            }
        }.execute();
    }

    public int UpdateEmailAddress(EmailAddressInfo emailAddress, boolean isForceUpdate) {
        return UpdateEmailAddress(emailAddress, isForceUpdate, null);
    }

    public int UpdateEmailAddress(EmailAddressInfo emailAddress, boolean isForceUpdate, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "UpdateEmailAddress");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "emailAddress", new EmailAddressInfo().getClass());
        soapReq.addProperty("emailAddress", emailAddress);
        soapReq.addProperty("isForceUpdate", isForceUpdate);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/UpdateEmailAddress", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }


    public void GetLoyaltyCardsAsync(LoyaltyCardsFilter filter, int offset, int maxRecords, String orderBy, int skipItemId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLoyaltyCardsAsync(filter, offset, maxRecords, orderBy, skipItemId, null);
    }

    public void GetLoyaltyCardsAsync(final LoyaltyCardsFilter filter, final int offset, final int maxRecords, final String orderBy, final int skipItemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewLoyaltyCardInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewLoyaltyCardInfo doInBackground(Void... params) {
                return GetLoyaltyCards(filter, offset, maxRecords, orderBy, skipItemId, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewLoyaltyCardInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetLoyaltyCards", result);
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        }.execute();
    }

    public VectorViewLoyaltyCardInfo GetLoyaltyCards(LoyaltyCardsFilter filter, int offset, int maxRecords, String orderBy, int skipItemId) {
        return GetLoyaltyCards(filter, offset, maxRecords, orderBy, skipItemId, null);
    }

    public VectorViewLoyaltyCardInfo GetLoyaltyCards(LoyaltyCardsFilter filter, int offset, int maxRecords, String orderBy, int skipItemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "GetLoyaltyCards");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "filter", new LoyaltyCardsFilter().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("filter", filter);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("maxRecords", maxRecords);
        soapReq.addProperty("orderBy", orderBy);
        soapReq.addProperty("skipItemId", skipItemId);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/GetLoyaltyCards", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewLoyaltyCardInfo resultVariable = new VectorViewLoyaltyCardInfo(j);
                    return resultVariable;
                } else {
                    if (eventHandler != null) {
                        eventHandler.Wsdl2CodeFinishedWithNull();
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void UpdateCustomerAsync(CustomerInfo customer, boolean isAutoClaim, boolean isForceUpdate) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateCustomerAsync(customer, isAutoClaim, isForceUpdate, null);
    }

    public void UpdateCustomerAsync(final CustomerInfo customer, final boolean isAutoClaim, final boolean isForceUpdate, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return UpdateCustomer(customer, isAutoClaim, isForceUpdate, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateCustomer", result);
                }
            }
        }.execute();
    }

    public int UpdateCustomer(CustomerInfo customer, boolean isAutoClaim, boolean isForceUpdate) {
        return UpdateCustomer(customer, isAutoClaim, isForceUpdate, null);
    }

    public int UpdateCustomer(CustomerInfo customer, boolean isAutoClaim, boolean isForceUpdate, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "UpdateCustomer");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "customer", new CustomerInfo().getClass());
        soapReq.addProperty("customer", customer);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapReq.addProperty("isForceUpdate", isForceUpdate);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/UpdateCustomer", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GetPhoneNumbersAsync(final String phoneNumber, final int customerId, final int customerContactId, final int phoneTypeId, final int countryCode, final int nationalPrefix, final int countryId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewPhoneNumberInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewPhoneNumberInfo doInBackground(Void... params) {
                return GetPhoneNumbers(phoneNumber, customerId, customerContactId, phoneTypeId, countryCode, nationalPrefix, countryId, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewPhoneNumberInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetPhoneNumbers", result);
                }
            }
        }.execute();
    }

    public VectorViewPhoneNumberInfo GetPhoneNumbers(String phoneNumber, int customerId, int customerContactId, int phoneTypeId, int countryCode, int nationalPrefix, String areaCode, String searchPhoneNumber, int countryId) {
        return GetPhoneNumbers(phoneNumber, customerId, customerContactId, phoneTypeId, countryCode, nationalPrefix, countryId, null);
    }

    public VectorViewPhoneNumberInfo GetPhoneNumbers(String phoneNumber, int customerId, int customerContactId, int phoneTypeId, int countryCode, int nationalPrefix, int countryId, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "GetPhoneNumbers");
        soapReq.addProperty("customerId", customerId);
        soapReq.addProperty("customerContactId", customerContactId);
        soapReq.addProperty("phoneTypeId", phoneTypeId);
        soapReq.addProperty("countryCode", countryCode);
        soapReq.addProperty("nationalPrefix", nationalPrefix);
        soapReq.addProperty("countryId", countryId);
        soapReq.addProperty("phoneNumber", phoneNumber);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/GetPhoneNumbers", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewPhoneNumberInfo resultVariable = new VectorViewPhoneNumberInfo(j);
                    return resultVariable;
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void UpdatePhoneNumberAsync(PhoneNumberInfo phoneNumber, boolean isAutoClaim, boolean isForceUpdate) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdatePhoneNumberAsync(phoneNumber, isAutoClaim, isForceUpdate, null);
    }

    public void UpdatePhoneNumberAsync(final PhoneNumberInfo phoneNumber, final boolean isAutoClaim, final boolean isForceUpdate, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return UpdatePhoneNumber(phoneNumber, isAutoClaim, isForceUpdate, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdatePhoneNumber", result);
                }
            }
        }.execute();
    }

    public int UpdatePhoneNumber(PhoneNumberInfo phoneNumber, boolean isAutoClaim, boolean isForceUpdate) {
        return UpdatePhoneNumber(phoneNumber, isAutoClaim, isForceUpdate, null);
    }

    public int UpdatePhoneNumber(PhoneNumberInfo phoneNumber, boolean isAutoClaim, boolean isForceUpdate, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "UpdatePhoneNumber");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "phoneNumber", new PhoneNumberInfo().getClass());
        soapReq.addProperty("phoneNumber", phoneNumber);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapReq.addProperty("isForceUpdate", isForceUpdate);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/UpdatePhoneNumber", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void GetAddressesAsync(int customerId, WS_Enums.AddressType2 addressType, int numberPart1, int countryId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAddressesAsync(customerId, addressType, numberPart1, countryId, null);
    }

    public void GetAddressesAsync(final int customerId, final WS_Enums.AddressType2 addressType, final int numberPart1, final int countryId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewAddressInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewAddressInfo doInBackground(Void... params) {
                return GetAddresses(customerId, addressType, numberPart1, countryId, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewAddressInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetAddresses", result);
                }
            }
        }.execute();
    }

    public VectorViewAddressInfo GetAddresses(int customerId, WS_Enums.AddressType2 addressType, int numberPart1, int countryId) {
        return GetAddresses(customerId, addressType, numberPart1, countryId, null);
    }

    public VectorViewAddressInfo GetAddresses(int customerId, WS_Enums.AddressType2 addressType, int numberPart1, int countryId, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "GetAddresses");
        soapReq.addProperty("customerId", customerId);
        soapReq.addProperty("addressType", addressType.toString());
        soapReq.addProperty("numberPart1", numberPart1);

        soapReq.addProperty("countryId", countryId);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/GetAddresses", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewAddressInfo resultVariable = new VectorViewAddressInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void UpdateAddressAsync(AddressInfo address, boolean isAutoClaim, boolean isForceUpdate) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateAddressAsync(address, isAutoClaim, isForceUpdate, null);
    }

    public void UpdateAddressAsync(final AddressInfo address, final boolean isAutoClaim, final boolean isForceUpdate, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return UpdateAddress(address, isAutoClaim, isForceUpdate, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateAddress", result);
                }
            }
        }.execute();
    }

    public int UpdateAddress(AddressInfo address, boolean isAutoClaim, boolean isForceUpdate) {
        return UpdateAddress(address, isAutoClaim, isForceUpdate, null);
    }

    public int UpdateAddress(AddressInfo address, boolean isAutoClaim, boolean isForceUpdate, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "UpdateAddress");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "address", new AddressInfo().getClass());
        soapReq.addProperty("address", address);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapReq.addProperty("isForceUpdate", isForceUpdate);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/UpdateAddress", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }


    public void AddAddressAsync(AddressInfo address, boolean isAutoClaim) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddAddressAsync(address, isAutoClaim, null);
    }

    public void AddAddressAsync(final AddressInfo address, final boolean isAutoClaim, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return AddAddress(address, isAutoClaim, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddAddress", result);
                }
            }
        }.execute();
    }

    public int AddAddress(AddressInfo address, boolean isAutoClaim) {
        return AddAddress(address, isAutoClaim, null);
    }

    public int AddAddress(AddressInfo address, boolean isAutoClaim, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "AddAddress");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "address", new AddressInfo().getClass());
        soapReq.addProperty("address", address);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/AddAddress", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void AddPhoneNumberAsync(PhoneNumberInfo phoneNumber, boolean isAutoClaim) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AddPhoneNumberAsync(phoneNumber, isAutoClaim, null);
    }

    public void AddPhoneNumberAsync(final PhoneNumberInfo phoneNumber, final boolean isAutoClaim, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Number>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Number doInBackground(Void... params) {
                return AddPhoneNumber(phoneNumber, isAutoClaim, authenticateToken);
            }

            @Override
            protected void onPostExecute(Number result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AddPhoneNumber", result);
                }
            }
        }.execute();
    }

    public int AddPhoneNumber(PhoneNumberInfo phoneNumber, boolean isAutoClaim, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "AddPhoneNumber");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "phoneNumber", new PhoneNumberInfo().getClass());
        soapReq.addProperty("phoneNumber", phoneNumber);
        soapReq.addProperty("isAutoClaim", isAutoClaim);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/AddPhoneNumber", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Number) {
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }

    public void DeletePhoneNumberAsync(int itemId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeletePhoneNumberAsync(itemId, null);
    }

    public void DeletePhoneNumberAsync(final int itemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return DeletePhoneNumber(itemId, authenticateToken);
            }

            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DeletePhoneNumber", result);
                }
            }
        }.execute();
    }

    public boolean DeletePhoneNumber(int itemId) {
        return DeletePhoneNumber(itemId, null);
    }

    public boolean DeletePhoneNumber(int itemId, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "DeletePhoneNumber");
        soapReq.addProperty("itemId", itemId);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
           /* if (headers!=null){
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/DeletePhoneNumber", soapEnvelope,headers);
            }else{*/
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/DeletePhoneNumber", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);

            // }
            java.lang.Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    java.lang.Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void DeleteEmailAddressAsync(int itemId) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteEmailAddressAsync(itemId, null);
    }

    public void DeleteEmailAddressAsync(final int itemId, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, Boolean>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected Boolean doInBackground(Void... params) {
                return DeleteEmailAddress(itemId, authenticateToken);
            }

            @Override
            protected void onPostExecute(Boolean result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DeleteEmailAddress", result);
                }
            }
        }.execute();
    }

    public boolean DeleteEmailAddress(int itemId) {
        return DeleteEmailAddress(itemId, null);
    }

    public boolean DeleteEmailAddress(int itemId, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "DeleteEmailAddress");
        soapReq.addProperty("itemId", itemId);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
/*
            if (headers != null) {
                httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/DeleteEmailAddress", soapEnvelope, headers);
            } else {
*/
            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/DeleteEmailAddress", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            java.lang.Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    java.lang.Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    } else if (obj != null && obj instanceof Boolean) {
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }

    public void GetPriceAgreementProductsAsync(PriceAgreementProductsFilter filter) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPriceAgreementProductsAsync(filter, null);
    }

    public void GetPriceAgreementProductsAsync(final PriceAgreementProductsFilter filter, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewPriceAgreementProductInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected VectorViewPriceAgreementProductInfo doInBackground(Void... params) {
                return GetPriceAgreementProducts(filter, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewPriceAgreementProductInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetPriceAgreementProducts", result);
                } else {
                    eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        }.execute();
    }

    public VectorViewPriceAgreementProductInfo GetPriceAgreementProducts(PriceAgreementProductsFilter filter) {
        return GetPriceAgreementProducts(filter, null);
    }

    public VectorViewPriceAgreementProductInfo GetPriceAgreementProducts(PriceAgreementProductsFilter filter, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "GetPriceAgreementProducts");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "filter", new PriceAgreementProductsFilter().getClass());
        soapReq.addProperty("filter", filter);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {

            httpTransport.debug = BuildConfig.DEBUG;
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/GetPriceAgreementProducts", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewPriceAgreementProductInfo resultVariable = new VectorViewPriceAgreementProductInfo(j);
                    return resultVariable;
                } else {
                    if (eventHandler != null)
                        eventHandler.Wsdl2CodeFinishedWithNull();
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetSuppliersAsync(SuppliersFilter filter, int offset, int recordCount, String orderBy) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSuppliersAsync(filter, offset, recordCount, orderBy, null);
    }

    public void GetSuppliersAsync(final SuppliersFilter filter, final int offset, final int recordCount, final String orderBy, final ModelClass.Retail3000AuthenticateToken authenticateToken) throws Exception {

        new AsyncTask<Void, Void, VectorViewSupplierInfo>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected VectorViewSupplierInfo doInBackground(Void... params) {
                return GetSuppliers(filter, offset, recordCount, orderBy, authenticateToken);
            }

            @Override
            protected void onPostExecute(VectorViewSupplierInfo result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetSuppliers", result);
                }
            }
        }.execute();
    }

    public VectorViewSupplierInfo GetSuppliers(SuppliersFilter filter, int offset, int recordCount, String orderBy, ModelClass.Retail3000AuthenticateToken authenticateToken) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "GetSuppliers");
        soapEnvelope.addMapping("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents", "filter", new SuppliersFilter().getClass());
        soapReq.addProperty("filter", filter);
        soapReq.addProperty("offset", offset);
        soapReq.addProperty("recordCount", recordCount);
        soapReq.addProperty("orderBy", orderBy);
        soapEnvelope.setOutputSoapObject(soapReq);
        if (authenticateToken != null) {
            soapEnvelope.headerOut = new Element[1];
            soapEnvelope.headerOut[0] = APICommonClassNew.buildAuthHeader(NAMESPACE, authenticateToken);
        }
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            httpTransport.call("http://retail3000.net/Retail3000Webservice/WebserviceCustomerComponents/GetSuppliers", soapEnvelope, APICommonClassNew.buildAuthToken(authenticateToken));
            CommonUtils.printLog(httpTransport);
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    VectorViewSupplierInfo resultVariable = new VectorViewSupplierInfo(j);
                    return resultVariable;
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
}
