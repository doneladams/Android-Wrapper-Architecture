package webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/16/2017 5:54:09 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.lang.*;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ViewReservationInfo implements KvmSerializable {
    
    public double saleOrderLeftOverNetPrice;
    public String storeDescription;
    public String transportTypeDescription;
    public long customerNumber;
    public String customerName;
    public String saleOrderExpectedDeliveryDate;
    public String saleOrderUtmostDeliveryDate;
    public int saleOrderNumber;
    public int pickingAvgRowDurationMsecs;
    public int totalPickingRows;
    public double totalPickingDurationSeconds;
    public String saleOrderReferenceCode;
    public int parcelsCount;
    public String saleOrderDescription;
    public int companyId;
    public int storeId;
    public int customerId;
    public int debtorId;
    public String customerReference;
    public int saleOrderId;
    public ReservationStatus status;
    public int transportTypeId;
    public int parcelServiceId;
    public int reservationNumber;
    public int cashSaleId;
    public int invoiceSaleId;
    public int assignedScannerId;
    public String note;
    public String printedDateTime;
    public String closedDateTime;
    public double totalGrossPrice;
    public double totalNetPrice;
    public String parcelLog;
    public boolean isCancelled;
    public long conversionId;
    public String notification1SentDateTime;
    public String notification2SentDateTime;
    public String notification3SentDateTime;
    public int createdByUserId;
    public String createdDateTime;
    public int lastModifiedByUserId;
    public String lastModifiedDateTime;
    public int itemId;
    
    public ViewReservationInfo(){}
    
    public ViewReservationInfo(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("SaleOrderLeftOverNetPrice"))
        {
            Object obj = soapObject.getProperty("SaleOrderLeftOverNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                saleOrderLeftOverNetPrice = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                saleOrderLeftOverNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("StoreDescription"))
        {
            Object obj = soapObject.getProperty("StoreDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                storeDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                storeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("TransportTypeDescription"))
        {
            Object obj = soapObject.getProperty("TransportTypeDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                transportTypeDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                transportTypeDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("CustomerNumber"))
        {
            Object obj = soapObject.getProperty("CustomerNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customerNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                customerNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CustomerName"))
        {
            Object obj = soapObject.getProperty("CustomerName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customerName = j.toString();
            }else if (obj!= null && obj instanceof String){
                customerName = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderExpectedDeliveryDate"))
        {
            Object obj = soapObject.getProperty("SaleOrderExpectedDeliveryDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                saleOrderExpectedDeliveryDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                saleOrderExpectedDeliveryDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderUtmostDeliveryDate"))
        {
            Object obj = soapObject.getProperty("SaleOrderUtmostDeliveryDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                saleOrderUtmostDeliveryDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                saleOrderUtmostDeliveryDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderNumber"))
        {
            Object obj = soapObject.getProperty("SaleOrderNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                saleOrderNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                saleOrderNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PickingAvgRowDurationMsecs"))
        {
            Object obj = soapObject.getProperty("PickingAvgRowDurationMsecs");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pickingAvgRowDurationMsecs = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                pickingAvgRowDurationMsecs = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TotalPickingRows"))
        {
            Object obj = soapObject.getProperty("TotalPickingRows");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalPickingRows = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalPickingRows = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TotalPickingDurationSeconds"))
        {
            Object obj = soapObject.getProperty("TotalPickingDurationSeconds");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalPickingDurationSeconds = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalPickingDurationSeconds = (Double) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderReferenceCode"))
        {
            Object obj = soapObject.getProperty("SaleOrderReferenceCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                saleOrderReferenceCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                saleOrderReferenceCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("ParcelsCount"))
        {
            Object obj = soapObject.getProperty("ParcelsCount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parcelsCount = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parcelsCount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderDescription"))
        {
            Object obj = soapObject.getProperty("SaleOrderDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                saleOrderDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                saleOrderDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("CompanyId"))
        {
            Object obj = soapObject.getProperty("CompanyId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                companyId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                companyId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("StoreId"))
        {
            Object obj = soapObject.getProperty("StoreId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                storeId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                storeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CustomerId"))
        {
            Object obj = soapObject.getProperty("CustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customerId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                customerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DebtorId"))
        {
            Object obj = soapObject.getProperty("DebtorId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                debtorId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                debtorId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CustomerReference"))
        {
            Object obj = soapObject.getProperty("CustomerReference");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                customerReference = j.toString();
            }else if (obj!= null && obj instanceof String){
                customerReference = (String) obj;
            }
        }
        if (soapObject.hasProperty("SaleOrderId"))
        {
            Object obj = soapObject.getProperty("SaleOrderId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                saleOrderId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                saleOrderId = (Integer) obj;
            }
        }
//        if (soapObject.hasProperty("Status"))
//        {
//            java.lang.Object obj = soapObject.getProperty("Status");
//            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
//                SoapPrimitive j =(SoapPrimitive)obj;
//                status = ReservationStatus.fromString(j.toString());
//            }
//        }
        if (soapObject.hasProperty("TransportTypeId"))
        {
            Object obj = soapObject.getProperty("TransportTypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                transportTypeId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                transportTypeId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ParcelServiceId"))
        {
            Object obj = soapObject.getProperty("ParcelServiceId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parcelServiceId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parcelServiceId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ReservationNumber"))
        {
            Object obj = soapObject.getProperty("ReservationNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                reservationNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                reservationNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CashSaleId"))
        {
            Object obj = soapObject.getProperty("CashSaleId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                cashSaleId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                cashSaleId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("InvoiceSaleId"))
        {
            Object obj = soapObject.getProperty("InvoiceSaleId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                invoiceSaleId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                invoiceSaleId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("AssignedScannerId"))
        {
            Object obj = soapObject.getProperty("AssignedScannerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                assignedScannerId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                assignedScannerId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Note"))
        {
            Object obj = soapObject.getProperty("Note");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                note = j.toString();
            }else if (obj!= null && obj instanceof String){
                note = (String) obj;
            }
        }
        if (soapObject.hasProperty("PrintedDateTime"))
        {
            Object obj = soapObject.getProperty("PrintedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                printedDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                printedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ClosedDateTime"))
        {
            Object obj = soapObject.getProperty("ClosedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                closedDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                closedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("TotalGrossPrice"))
        {
            Object obj = soapObject.getProperty("TotalGrossPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalGrossPrice = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalGrossPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("TotalNetPrice"))
        {
            Object obj = soapObject.getProperty("TotalNetPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalNetPrice = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalNetPrice = (Double) obj;
            }
        }
        if (soapObject.hasProperty("ParcelLog"))
        {
            Object obj = soapObject.getProperty("ParcelLog");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parcelLog = j.toString();
            }else if (obj!= null && obj instanceof String){
                parcelLog = (String) obj;
            }
        }
        if (soapObject.hasProperty("IsCancelled"))
        {
            Object obj = soapObject.getProperty("IsCancelled");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                isCancelled = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isCancelled = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ConversionId"))
        {
            Object obj = soapObject.getProperty("ConversionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conversionId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                conversionId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Notification1SentDateTime"))
        {
            Object obj = soapObject.getProperty("Notification1SentDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                notification1SentDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                notification1SentDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("Notification2SentDateTime"))
        {
            Object obj = soapObject.getProperty("Notification2SentDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                notification2SentDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                notification2SentDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("Notification3SentDateTime"))
        {
            Object obj = soapObject.getProperty("Notification3SentDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                notification3SentDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                notification3SentDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("CreatedByUserId"))
        {
            Object obj = soapObject.getProperty("CreatedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                createdByUserId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                createdByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CreatedDateTime"))
        {
            Object obj = soapObject.getProperty("CreatedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                createdDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                createdDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedByUserId"))
        {
            Object obj = soapObject.getProperty("LastModifiedByUserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastModifiedByUserId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                lastModifiedByUserId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LastModifiedDateTime"))
        {
            Object obj = soapObject.getProperty("LastModifiedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastModifiedDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                lastModifiedDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("ItemId"))
        {
            Object obj = soapObject.getProperty("ItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                itemId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                itemId = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return saleOrderLeftOverNetPrice;
            case 1:
                return storeDescription;
            case 2:
                return transportTypeDescription;
            case 3:
                return customerNumber;
            case 4:
                return customerName;
            case 5:
                return saleOrderExpectedDeliveryDate;
            case 6:
                return saleOrderUtmostDeliveryDate;
            case 7:
                return saleOrderNumber;
            case 8:
                return pickingAvgRowDurationMsecs;
            case 9:
                return totalPickingRows;
            case 10:
                return totalPickingDurationSeconds;
            case 11:
                return saleOrderReferenceCode;
            case 12:
                return parcelsCount;
            case 13:
                return saleOrderDescription;
            case 14:
                return companyId;
            case 15:
                return storeId;
            case 16:
                return customerId;
            case 17:
                return debtorId;
            case 18:
                return customerReference;
            case 19:
                return saleOrderId;
            case 20:
                return status.toString();
            case 21:
                return transportTypeId;
            case 22:
                return parcelServiceId;
            case 23:
                return reservationNumber;
            case 24:
                return cashSaleId;
            case 25:
                return invoiceSaleId;
            case 26:
                return assignedScannerId;
            case 27:
                return note;
            case 28:
                return printedDateTime;
            case 29:
                return closedDateTime;
            case 30:
                return totalGrossPrice;
            case 31:
                return totalNetPrice;
            case 32:
                return parcelLog;
            case 33:
                return isCancelled;
            case 34:
                return conversionId;
            case 35:
                return notification1SentDateTime;
            case 36:
                return notification2SentDateTime;
            case 37:
                return notification3SentDateTime;
            case 38:
                return createdByUserId;
            case 39:
                return createdDateTime;
            case 40:
                return lastModifiedByUserId;
            case 41:
                return lastModifiedDateTime;
            case 42:
                return itemId;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 43;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = Double.class;
                info.name = "SaleOrderLeftOverNetPrice";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StoreDescription";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TransportTypeDescription";
                break;
            case 3:
                info.type = Long.class;
                info.name = "CustomerNumber";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerName";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderExpectedDeliveryDate";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderUtmostDeliveryDate";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleOrderNumber";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PickingAvgRowDurationMsecs";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "TotalPickingRows";
                break;
            case 10:
                info.type = Double.class;
                info.name = "TotalPickingDurationSeconds";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderReferenceCode";
                break;
            case 12:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ParcelsCount";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SaleOrderDescription";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CompanyId";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "StoreId";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CustomerId";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DebtorId";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerReference";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "SaleOrderId";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Status";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "TransportTypeId";
                break;
            case 22:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ParcelServiceId";
                break;
            case 23:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ReservationNumber";
                break;
            case 24:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CashSaleId";
                break;
            case 25:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "InvoiceSaleId";
                break;
            case 26:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "AssignedScannerId";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Note";
                break;
            case 28:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PrintedDateTime";
                break;
            case 29:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ClosedDateTime";
                break;
            case 30:
                info.type = Double.class;
                info.name = "TotalGrossPrice";
                break;
            case 31:
                info.type = Double.class;
                info.name = "TotalNetPrice";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ParcelLog";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsCancelled";
                break;
            case 34:
                info.type = Long.class;
                info.name = "ConversionId";
                break;
            case 35:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Notification1SentDateTime";
                break;
            case 36:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Notification2SentDateTime";
                break;
            case 37:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Notification3SentDateTime";
                break;
            case 38:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CreatedByUserId";
                break;
            case 39:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreatedDateTime";
                break;
            case 40:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LastModifiedByUserId";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastModifiedDateTime";
                break;
            case 42:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ItemId";
                break;
        }
    }
    
//    @Override //    public String getInnerText() { //        return null; //    } // // //    @Override //    public void setInnerText(String s) { //    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
